name: OVFToolsBuildTestDeploy

on: [push, pull_request]
  
jobs:
  check_license:
    runs-on: windows-latest
    steps:
    - name: Setup python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
        architecture: 'x64'
        
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        submodules: true
        
    - name: Check license headers
      run: python manage_license_headers.py ci
    
  build_and_test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: true
    
    steps:
    
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        submodules: true
        
    - name: Setup Dotnet sdk
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
                
    - name: Test Linux
      if: contains(matrix.os, 'ubuntu')
      run: |
        dotnet build --configuration Release --framework net6 ReaderWriter/FileReaderWriterFactoryGRPCWrapper/FileReaderWriterFactoryGRPCWrapper.csproj
        dotnet build --configuration Release --framework net6 ReaderWriter/UnitTests/UnitTests.csproj
        dotnet build --configuration Release --framework net6 PlausibilityChecker/PlausibilityCheckerUnitTests/PlausibilityCheckerUnitTests.csproj
        dotnet run --configuration Release --framework net6 --project ReaderWriter/FileReaderWriterFactoryGRPCWrapper/FileReaderWriterFactoryGRPCWrapper.csproj &
        grpcpid="$!"
        echo "started grpc server"
        sleep 5s
        dotnet test --no-build --configuration Release --framework net6
        kill $grpcpid
        
    - name: Add msbuild to PATH
      if: contains(matrix.os, 'windows')
      uses: microsoft/setup-msbuild@v1.0.2
                  
    - name: Test Windows
      if: contains(matrix.os, 'windows')
      run: |
        dotnet build --configuration Release
        $j = Start-Process -PassThru -Filepath 'dotnet' -WorkingDirectory $PWD -ArgumentList 'run --configuration Release --framework net6 --project .\ReaderWriter\FileReaderWriterFactoryGRPCWrapper\FileReaderWriterFactoryGRPCWrapper.csproj'
        Start-Sleep -s 5
        dotnet test --no-build --configuration Release
        $j | Select-Object -Property Id | Stop-Process
        
  publish_nuget:
    needs: [check_license, build_and_test]
    if: startsWith(github.ref, 'refs/tags/v') # make sure deploy only runs on tags with version number
    runs-on: windows-latest
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: true
    
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        submodules: true
        
    - name: Setup Dotnet sdk
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
        
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2
                  
    - name: Build Windows
      run: |
        dotnet sln OpenVectorFormatTools.sln remove OVFFileConverterGUI/OVFFileConverterGUI.csproj
        dotnet build --configuration Release
                  
    - name: Nuget Deploy
      run: |
        $env:RELEASE_VERSION=($env:GITHUB_REF).split("tags/v")[-1]
        echo $env:RELEASE_VERSION
        echo $env:GITHUB_SHA
        mkdir nupkg
        dotnet pack -p:PackageVersion=$env:RELEASE_VERSION -o  $PWD\nupkg -p:RepositoryCommit=$env:GITHUB_SHA --configuration Release
        cd nupkg
        #dotnet nuget push "**/*.nupkg" --api-key ${{secrets.NUGET_DEPLOY_KEY}} --source "https://api.nuget.org/v3/index.json" --no-symbols true 

  publish_docker:
    needs: [publish_nuget]
    if: startsWith(github.ref, 'refs/tags/v') # make sure deploy only runs on tags with version number
    runs-on: ubuntu-latest
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: true
    
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        submodules: true

    - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
        
    - name: Build container
      run: | 
        echo $RELEASE_VERSION
        docker build . -t digitalproductionaachen/ovf-grpc:$RELEASE_VERSION