// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: open_vector_format.proto

#include "open_vector_format.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace open_vector_format {
constexpr Job_MarkingParamsMapEntry_DoNotUse::Job_MarkingParamsMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Job_MarkingParamsMapEntry_DoNotUseDefaultTypeInternal {
  constexpr Job_MarkingParamsMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Job_MarkingParamsMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Job_MarkingParamsMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Job_MarkingParamsMapEntry_DoNotUseDefaultTypeInternal _Job_MarkingParamsMapEntry_DoNotUse_default_instance_;
constexpr Job_PartsMapEntry_DoNotUse::Job_PartsMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Job_PartsMapEntry_DoNotUseDefaultTypeInternal {
  constexpr Job_PartsMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Job_PartsMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Job_PartsMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Job_PartsMapEntry_DoNotUseDefaultTypeInternal _Job_PartsMapEntry_DoNotUse_default_instance_;
constexpr Job_JobMetaData::Job_JobMetaData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : job_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , author_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , job_creation_time_(PROTOBUF_LONGLONG(0))
  , version_(PROTOBUF_ULONGLONG(0)){}
struct Job_JobMetaDataDefaultTypeInternal {
  constexpr Job_JobMetaDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Job_JobMetaDataDefaultTypeInternal() {}
  union {
    Job_JobMetaData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Job_JobMetaDataDefaultTypeInternal _Job_JobMetaData_default_instance_;
constexpr Job::Job(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : work_planes_()
  , marking_params_map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , parts_map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , job_meta_data_(nullptr)
  , job_parameters_(nullptr)
  , num_work_planes_(0){}
struct JobDefaultTypeInternal {
  constexpr JobDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JobDefaultTypeInternal() {}
  union {
    Job _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JobDefaultTypeInternal _Job_default_instance_;
constexpr JobParameters::JobParameters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shielding_gas_directions_()
  , _shielding_gas_directions_cached_byte_size_()
  , material_feed_directions_()
  , _material_feed_directions_cached_byte_size_()
  , preheating_temperatur_in_dg_c_(0){}
struct JobParametersDefaultTypeInternal {
  constexpr JobParametersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JobParametersDefaultTypeInternal() {}
  union {
    JobParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JobParametersDefaultTypeInternal _JobParameters_default_instance_;
constexpr MarkingParams::MarkingParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , powergradient_(nullptr)
  , laser_power_in_w_(0)
  , laser_speed_in_mm_per_s_(0)
  , laser_focus_shift_in_mm_(0)
  , point_exposure_time_in_us_(0)
  , jump_speed_in_mm_s_(0)
  , point_exposure_repetitions_(0)
  , repetition_rate_in_hz_(PROTOBUF_ULONGLONG(0))
  , laser_pulses_per_burst_(PROTOBUF_ULONGLONG(0))
  , pulsedurationinfemtoseconds_(PROTOBUF_ULONGLONG(0))
  , marking_mode_(0)

  , jump_delay_in_us_(0)
  , laser_off_delay_in_us_(0)
  , laser_on_delay_in_us_(0)
  , mark_delay_in_us_(0)
  , polygon_delay_in_us_(0)
  , time_lag_in_us_(0)
  , laser_on_shift_in_us_(0)
  , limit_(0)
  , n_prev_in_us_(0)
  , n_post_in_us_(0)
  , wob_frequency_in_hz_(0)
  , wob_amp_long_in_mm_(0)
  , wob_amp_trans_in_mm_(0)
  , wobble_mode_(0)
{}
struct MarkingParamsDefaultTypeInternal {
  constexpr MarkingParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MarkingParamsDefaultTypeInternal() {}
  union {
    MarkingParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MarkingParamsDefaultTypeInternal _MarkingParams_default_instance_;
constexpr PowerGradientParams::PowerGradientParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : minpowerinw_(0)
  , gradientinwpers_(0){}
struct PowerGradientParamsDefaultTypeInternal {
  constexpr PowerGradientParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PowerGradientParamsDefaultTypeInternal() {}
  union {
    PowerGradientParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PowerGradientParamsDefaultTypeInternal _PowerGradientParams_default_instance_;
constexpr Part_GeometryInfo::Part_GeometryInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : volume_in_mm3_(0)
  , support_volume_in_mm3_(0)
  , build_height_in_mm_(0)
  , surface_area_in_mm2_(0)
  , projected_surface_in_mm2_(0){}
struct Part_GeometryInfoDefaultTypeInternal {
  constexpr Part_GeometryInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Part_GeometryInfoDefaultTypeInternal() {}
  union {
    Part_GeometryInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Part_GeometryInfoDefaultTypeInternal _Part_GeometryInfo_default_instance_;
constexpr Part_Material::Part_Material(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(PROTOBUF_ULONGLONG(0)){}
struct Part_MaterialDefaultTypeInternal {
  constexpr Part_MaterialDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Part_MaterialDefaultTypeInternal() {}
  union {
    Part_Material _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Part_MaterialDefaultTypeInternal _Part_Material_default_instance_;
constexpr Part_ProcessStrategy_ProprietaryParam::Part_ProcessStrategy_ProprietaryParam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : param_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , param_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , param_value_(0){}
struct Part_ProcessStrategy_ProprietaryParamDefaultTypeInternal {
  constexpr Part_ProcessStrategy_ProprietaryParamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Part_ProcessStrategy_ProprietaryParamDefaultTypeInternal() {}
  union {
    Part_ProcessStrategy_ProprietaryParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Part_ProcessStrategy_ProprietaryParamDefaultTypeInternal _Part_ProcessStrategy_ProprietaryParam_default_instance_;
constexpr Part_ProcessStrategy::Part_ProcessStrategy(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : additional_parameters_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rot_angle_in_deg_(0)
  , increment_angle_in_deg_(0)
  , shift_in_mm_(0)
  , extend_into_in_mm_(0)
  , layer_thickness_in_mm_(0)
  , hatch_distance_in_mm_(0)
  , hatch_contour_distance_in_mm_(0)
  , overhang_angle_in_deg_(0)
  , contour_offset_in_mm_(0)
  , number_of_contours_(0)
  , contour_distance_in_mm_(0)
  , hatching_pattern_(0)
{}
struct Part_ProcessStrategyDefaultTypeInternal {
  constexpr Part_ProcessStrategyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Part_ProcessStrategyDefaultTypeInternal() {}
  union {
    Part_ProcessStrategy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Part_ProcessStrategyDefaultTypeInternal _Part_ProcessStrategy_default_instance_;
constexpr Part::Part(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , geometry_info_(nullptr)
  , material_(nullptr)
  , process_strategy_(nullptr){}
struct PartDefaultTypeInternal {
  constexpr PartDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PartDefaultTypeInternal() {}
  union {
    Part _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PartDefaultTypeInternal _Part_default_instance_;
constexpr WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse::WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUseDefaultTypeInternal {
  constexpr WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUseDefaultTypeInternal _WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse_default_instance_;
constexpr WorkPlane_WorkPlaneMetaData_closedContour::WorkPlane_WorkPlaneMetaData_closedContour(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : contour_section_vector_block_indices_()
  , _contour_section_vector_block_indices_cached_byte_size_()
  , area_in_mm_2_(0)
  , length_in_mm_(0){}
struct WorkPlane_WorkPlaneMetaData_closedContourDefaultTypeInternal {
  constexpr WorkPlane_WorkPlaneMetaData_closedContourDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkPlane_WorkPlaneMetaData_closedContourDefaultTypeInternal() {}
  union {
    WorkPlane_WorkPlaneMetaData_closedContour _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkPlane_WorkPlaneMetaData_closedContourDefaultTypeInternal _WorkPlane_WorkPlaneMetaData_closedContour_default_instance_;
constexpr WorkPlane_WorkPlaneMetaData::WorkPlane_WorkPlaneMetaData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : patches_map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , contours_()
  , total_scan_distance_in_mm_(0)
  , total_jump_distance_in_mm_(0)
  , maxpower_(0)
  , minpower_(0){}
struct WorkPlane_WorkPlaneMetaDataDefaultTypeInternal {
  constexpr WorkPlane_WorkPlaneMetaDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkPlane_WorkPlaneMetaDataDefaultTypeInternal() {}
  union {
    WorkPlane_WorkPlaneMetaData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkPlane_WorkPlaneMetaDataDefaultTypeInternal _WorkPlane_WorkPlaneMetaData_default_instance_;
constexpr WorkPlane_Patch::WorkPlane_Patch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : outer_contour_(nullptr)
  , u_(0)
  , v_(0)
  , layer_id_(0){}
struct WorkPlane_PatchDefaultTypeInternal {
  constexpr WorkPlane_PatchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkPlane_PatchDefaultTypeInternal() {}
  union {
    WorkPlane_Patch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkPlane_PatchDefaultTypeInternal _WorkPlane_Patch_default_instance_;
constexpr WorkPlane::WorkPlane(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vector_blocks_()
  , additional_axis_positions_()
  , _additional_axis_positions_cached_byte_size_()
  , machine_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , meta_data_(nullptr)
  , x_pos_in_mm_(0)
  , y_pos_in_mm_(0)
  , z_pos_in_mm_(0)
  , x_rot_in_deg_(0)
  , y_rot_in_deg_(0)
  , z_rot_in_deg_(0)
  , num_blocks_(0)
  , repeats_(0u)
  , work_plane_number_(0){}
struct WorkPlaneDefaultTypeInternal {
  constexpr WorkPlaneDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkPlaneDefaultTypeInternal() {}
  union {
    WorkPlane _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkPlaneDefaultTypeInternal _WorkPlane_default_instance_;
constexpr VectorBlock_VectorBlockMetaData::VectorBlock_VectorBlockMetaData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : total_scan_distance_in_mm_(0)
  , total_jump_distance_in_mm_(0)
  , part_key_(0)
  , patch_key_(0)
  , contour_index_(0){}
struct VectorBlock_VectorBlockMetaDataDefaultTypeInternal {
  constexpr VectorBlock_VectorBlockMetaDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorBlock_VectorBlockMetaDataDefaultTypeInternal() {}
  union {
    VectorBlock_VectorBlockMetaData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorBlock_VectorBlockMetaDataDefaultTypeInternal _VectorBlock_VectorBlockMetaData_default_instance_;
constexpr VectorBlock_LPBFMetadata::VectorBlock_LPBFMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : part_area_(0)

  , skin_type_(0)

  , skin_core_strategy_area_(0)

  , structure_type_(0)

  , reexposure_(false){}
struct VectorBlock_LPBFMetadataDefaultTypeInternal {
  constexpr VectorBlock_LPBFMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorBlock_LPBFMetadataDefaultTypeInternal() {}
  union {
    VectorBlock_LPBFMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorBlock_LPBFMetadataDefaultTypeInternal _VectorBlock_LPBFMetadata_default_instance_;
constexpr VectorBlock_MicroStructuringMetadata::VectorBlock_MicroStructuringMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : part_area_(0)

  , structure_type_(0)
{}
struct VectorBlock_MicroStructuringMetadataDefaultTypeInternal {
  constexpr VectorBlock_MicroStructuringMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorBlock_MicroStructuringMetadataDefaultTypeInternal() {}
  union {
    VectorBlock_MicroStructuringMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorBlock_MicroStructuringMetadataDefaultTypeInternal _VectorBlock_MicroStructuringMetadata_default_instance_;
constexpr VectorBlock_PolishingMetadata::VectorBlock_PolishingMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct VectorBlock_PolishingMetadataDefaultTypeInternal {
  constexpr VectorBlock_PolishingMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorBlock_PolishingMetadataDefaultTypeInternal() {}
  union {
    VectorBlock_PolishingMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorBlock_PolishingMetadataDefaultTypeInternal _VectorBlock_PolishingMetadata_default_instance_;
constexpr VectorBlock_LineSequence::VectorBlock_LineSequence(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : points_()
  , _points_cached_byte_size_(){}
struct VectorBlock_LineSequenceDefaultTypeInternal {
  constexpr VectorBlock_LineSequenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorBlock_LineSequenceDefaultTypeInternal() {}
  union {
    VectorBlock_LineSequence _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorBlock_LineSequenceDefaultTypeInternal _VectorBlock_LineSequence_default_instance_;
constexpr VectorBlock_LineSequence3D::VectorBlock_LineSequence3D(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : points_()
  , _points_cached_byte_size_(){}
struct VectorBlock_LineSequence3DDefaultTypeInternal {
  constexpr VectorBlock_LineSequence3DDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorBlock_LineSequence3DDefaultTypeInternal() {}
  union {
    VectorBlock_LineSequence3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorBlock_LineSequence3DDefaultTypeInternal _VectorBlock_LineSequence3D_default_instance_;
constexpr VectorBlock_Hatches::VectorBlock_Hatches(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : points_()
  , _points_cached_byte_size_(){}
struct VectorBlock_HatchesDefaultTypeInternal {
  constexpr VectorBlock_HatchesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorBlock_HatchesDefaultTypeInternal() {}
  union {
    VectorBlock_Hatches _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorBlock_HatchesDefaultTypeInternal _VectorBlock_Hatches_default_instance_;
constexpr VectorBlock_Hatches3D::VectorBlock_Hatches3D(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : points_()
  , _points_cached_byte_size_(){}
struct VectorBlock_Hatches3DDefaultTypeInternal {
  constexpr VectorBlock_Hatches3DDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorBlock_Hatches3DDefaultTypeInternal() {}
  union {
    VectorBlock_Hatches3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorBlock_Hatches3DDefaultTypeInternal _VectorBlock_Hatches3D_default_instance_;
constexpr VectorBlock_PointSequence::VectorBlock_PointSequence(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : points_()
  , _points_cached_byte_size_(){}
struct VectorBlock_PointSequenceDefaultTypeInternal {
  constexpr VectorBlock_PointSequenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorBlock_PointSequenceDefaultTypeInternal() {}
  union {
    VectorBlock_PointSequence _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorBlock_PointSequenceDefaultTypeInternal _VectorBlock_PointSequence_default_instance_;
constexpr VectorBlock_PointSequence3D::VectorBlock_PointSequence3D(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : points_()
  , _points_cached_byte_size_(){}
struct VectorBlock_PointSequence3DDefaultTypeInternal {
  constexpr VectorBlock_PointSequence3DDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorBlock_PointSequence3DDefaultTypeInternal() {}
  union {
    VectorBlock_PointSequence3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorBlock_PointSequence3DDefaultTypeInternal _VectorBlock_PointSequence3D_default_instance_;
constexpr VectorBlock_Arcs::VectorBlock_Arcs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : centers_()
  , _centers_cached_byte_size_()
  , angle_(0)
  , start_dx_(0)
  , start_dy_(0){}
struct VectorBlock_ArcsDefaultTypeInternal {
  constexpr VectorBlock_ArcsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorBlock_ArcsDefaultTypeInternal() {}
  union {
    VectorBlock_Arcs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorBlock_ArcsDefaultTypeInternal _VectorBlock_Arcs_default_instance_;
constexpr VectorBlock_Arcs3D::VectorBlock_Arcs3D(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : centers_()
  , _centers_cached_byte_size_()
  , angle_(0)
  , start_dx_(0)
  , start_dy_(0)
  , start_dz_(0){}
struct VectorBlock_Arcs3DDefaultTypeInternal {
  constexpr VectorBlock_Arcs3DDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorBlock_Arcs3DDefaultTypeInternal() {}
  union {
    VectorBlock_Arcs3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorBlock_Arcs3DDefaultTypeInternal _VectorBlock_Arcs3D_default_instance_;
constexpr VectorBlock_Ellipses::VectorBlock_Ellipses(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ellipses_arcs_(nullptr)
  , a_(0)
  , b_(0)
  , phi0_(0){}
struct VectorBlock_EllipsesDefaultTypeInternal {
  constexpr VectorBlock_EllipsesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorBlock_EllipsesDefaultTypeInternal() {}
  union {
    VectorBlock_Ellipses _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorBlock_EllipsesDefaultTypeInternal _VectorBlock_Ellipses_default_instance_;
constexpr VectorBlock_ExposurePause::VectorBlock_ExposurePause(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pause_in_us_(PROTOBUF_ULONGLONG(0)){}
struct VectorBlock_ExposurePauseDefaultTypeInternal {
  constexpr VectorBlock_ExposurePauseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorBlock_ExposurePauseDefaultTypeInternal() {}
  union {
    VectorBlock_ExposurePause _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorBlock_ExposurePauseDefaultTypeInternal _VectorBlock_ExposurePause_default_instance_;
constexpr VectorBlock_LineSequenceParaAdapt::VectorBlock_LineSequenceParaAdapt(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : points_with_paras_()
  , _points_with_paras_cached_byte_size_()
  , parameter_(0)
{}
struct VectorBlock_LineSequenceParaAdaptDefaultTypeInternal {
  constexpr VectorBlock_LineSequenceParaAdaptDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorBlock_LineSequenceParaAdaptDefaultTypeInternal() {}
  union {
    VectorBlock_LineSequenceParaAdapt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorBlock_LineSequenceParaAdaptDefaultTypeInternal _VectorBlock_LineSequenceParaAdapt_default_instance_;
constexpr VectorBlock_HatchesParaAdapt::VectorBlock_HatchesParaAdapt(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hatchaslinesequence_(){}
struct VectorBlock_HatchesParaAdaptDefaultTypeInternal {
  constexpr VectorBlock_HatchesParaAdaptDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorBlock_HatchesParaAdaptDefaultTypeInternal() {}
  union {
    VectorBlock_HatchesParaAdapt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorBlock_HatchesParaAdaptDefaultTypeInternal _VectorBlock_HatchesParaAdapt_default_instance_;
constexpr VectorBlock::VectorBlock(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : meta_data_(nullptr)
  , marking_params_key_(0)
  , laser_index_(0)
  , repeats_(PROTOBUF_ULONGLONG(0))
  , _oneof_case_{}{}
struct VectorBlockDefaultTypeInternal {
  constexpr VectorBlockDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorBlockDefaultTypeInternal() {}
  union {
    VectorBlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorBlockDefaultTypeInternal _VectorBlock_default_instance_;
}  // namespace open_vector_format
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_open_5fvector_5fformat_2eproto[34];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_open_5fvector_5fformat_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_open_5fvector_5fformat_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_open_5fvector_5fformat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Job_MarkingParamsMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Job_MarkingParamsMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Job_MarkingParamsMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Job_MarkingParamsMapEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Job_PartsMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Job_PartsMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Job_PartsMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Job_PartsMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Job_JobMetaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Job_JobMetaData, job_creation_time_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Job_JobMetaData, version_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Job_JobMetaData, job_name_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Job_JobMetaData, author_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Job_JobMetaData, description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Job, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Job, work_planes_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Job, job_meta_data_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Job, marking_params_map_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Job, parts_map_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Job, job_parameters_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Job, num_work_planes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::JobParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::JobParameters, preheating_temperatur_in_dg_c_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::JobParameters, shielding_gas_directions_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::JobParameters, material_feed_directions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, laser_power_in_w_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, laser_speed_in_mm_per_s_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, laser_focus_shift_in_mm_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, point_exposure_time_in_us_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, jump_speed_in_mm_s_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, point_exposure_repetitions_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, repetition_rate_in_hz_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, laser_pulses_per_burst_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, pulsedurationinfemtoseconds_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, marking_mode_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, jump_delay_in_us_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, laser_off_delay_in_us_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, laser_on_delay_in_us_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, mark_delay_in_us_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, polygon_delay_in_us_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, time_lag_in_us_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, laser_on_shift_in_us_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, limit_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, n_prev_in_us_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, n_post_in_us_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, wob_frequency_in_hz_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, wob_amp_long_in_mm_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, wob_amp_trans_in_mm_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, wobble_mode_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, powergradient_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::MarkingParams, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::PowerGradientParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::PowerGradientParams, minpowerinw_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::PowerGradientParams, gradientinwpers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_GeometryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_GeometryInfo, volume_in_mm3_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_GeometryInfo, support_volume_in_mm3_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_GeometryInfo, build_height_in_mm_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_GeometryInfo, surface_area_in_mm2_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_GeometryInfo, projected_surface_in_mm2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_Material, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_Material, id_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_Material, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_ProcessStrategy_ProprietaryParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_ProcessStrategy_ProprietaryParam, param_name_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_ProcessStrategy_ProprietaryParam, param_value_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_ProcessStrategy_ProprietaryParam, param_description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_ProcessStrategy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_ProcessStrategy, rot_angle_in_deg_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_ProcessStrategy, increment_angle_in_deg_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_ProcessStrategy, shift_in_mm_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_ProcessStrategy, extend_into_in_mm_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_ProcessStrategy, layer_thickness_in_mm_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_ProcessStrategy, hatch_distance_in_mm_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_ProcessStrategy, hatch_contour_distance_in_mm_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_ProcessStrategy, overhang_angle_in_deg_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_ProcessStrategy, contour_offset_in_mm_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_ProcessStrategy, number_of_contours_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_ProcessStrategy, contour_distance_in_mm_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_ProcessStrategy, hatching_pattern_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_ProcessStrategy, name_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Part_ProcessStrategy, additional_parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Part, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Part, name_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Part, geometry_info_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Part, material_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::Part, process_strategy_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour, contour_section_vector_block_indices_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour, area_in_mm_2_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour, length_in_mm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_WorkPlaneMetaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_WorkPlaneMetaData, total_scan_distance_in_mm_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_WorkPlaneMetaData, total_jump_distance_in_mm_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_WorkPlaneMetaData, patches_map_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_WorkPlaneMetaData, maxpower_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_WorkPlaneMetaData, minpower_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_WorkPlaneMetaData, contours_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_Patch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_Patch, outer_contour_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_Patch, u_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_Patch, v_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane_Patch, layer_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane, vector_blocks_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane, x_pos_in_mm_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane, y_pos_in_mm_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane, z_pos_in_mm_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane, x_rot_in_deg_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane, y_rot_in_deg_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane, z_rot_in_deg_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane, num_blocks_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane, repeats_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane, work_plane_number_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane, machine_type_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane, additional_axis_positions_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::WorkPlane, meta_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_VectorBlockMetaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_VectorBlockMetaData, total_scan_distance_in_mm_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_VectorBlockMetaData, total_jump_distance_in_mm_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_VectorBlockMetaData, part_key_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_VectorBlockMetaData, patch_key_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_VectorBlockMetaData, contour_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_LPBFMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_LPBFMetadata, part_area_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_LPBFMetadata, skin_type_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_LPBFMetadata, skin_core_strategy_area_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_LPBFMetadata, structure_type_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_LPBFMetadata, reexposure_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_MicroStructuringMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_MicroStructuringMetadata, part_area_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_MicroStructuringMetadata, structure_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_PolishingMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_LineSequence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_LineSequence, points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_LineSequence3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_LineSequence3D, points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Hatches, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Hatches, points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Hatches3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Hatches3D, points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_PointSequence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_PointSequence, points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_PointSequence3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_PointSequence3D, points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Arcs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Arcs, angle_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Arcs, start_dx_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Arcs, start_dy_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Arcs, centers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Arcs3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Arcs3D, angle_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Arcs3D, start_dx_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Arcs3D, start_dy_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Arcs3D, start_dz_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Arcs3D, centers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Ellipses, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Ellipses, a_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Ellipses, b_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Ellipses, phi0_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_Ellipses, ellipses_arcs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_ExposurePause, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_ExposurePause, pause_in_us_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_LineSequenceParaAdapt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_LineSequenceParaAdapt, points_with_paras_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_LineSequenceParaAdapt, parameter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_HatchesParaAdapt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock_HatchesParaAdapt, hatchaslinesequence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock, marking_params_key_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock, laser_index_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock, repeats_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock, meta_data_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock, vector_data_),
  PROTOBUF_FIELD_OFFSET(::open_vector_format::VectorBlock, process_meta_data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::open_vector_format::Job_MarkingParamsMapEntry_DoNotUse)},
  { 9, 16, sizeof(::open_vector_format::Job_PartsMapEntry_DoNotUse)},
  { 18, -1, sizeof(::open_vector_format::Job_JobMetaData)},
  { 28, -1, sizeof(::open_vector_format::Job)},
  { 39, -1, sizeof(::open_vector_format::JobParameters)},
  { 47, -1, sizeof(::open_vector_format::MarkingParams)},
  { 78, -1, sizeof(::open_vector_format::PowerGradientParams)},
  { 85, -1, sizeof(::open_vector_format::Part_GeometryInfo)},
  { 95, -1, sizeof(::open_vector_format::Part_Material)},
  { 102, -1, sizeof(::open_vector_format::Part_ProcessStrategy_ProprietaryParam)},
  { 110, -1, sizeof(::open_vector_format::Part_ProcessStrategy)},
  { 129, -1, sizeof(::open_vector_format::Part)},
  { 138, 145, sizeof(::open_vector_format::WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse)},
  { 147, -1, sizeof(::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour)},
  { 155, -1, sizeof(::open_vector_format::WorkPlane_WorkPlaneMetaData)},
  { 166, -1, sizeof(::open_vector_format::WorkPlane_Patch)},
  { 175, -1, sizeof(::open_vector_format::WorkPlane)},
  { 193, -1, sizeof(::open_vector_format::VectorBlock_VectorBlockMetaData)},
  { 203, -1, sizeof(::open_vector_format::VectorBlock_LPBFMetadata)},
  { 213, -1, sizeof(::open_vector_format::VectorBlock_MicroStructuringMetadata)},
  { 220, -1, sizeof(::open_vector_format::VectorBlock_PolishingMetadata)},
  { 225, -1, sizeof(::open_vector_format::VectorBlock_LineSequence)},
  { 231, -1, sizeof(::open_vector_format::VectorBlock_LineSequence3D)},
  { 237, -1, sizeof(::open_vector_format::VectorBlock_Hatches)},
  { 243, -1, sizeof(::open_vector_format::VectorBlock_Hatches3D)},
  { 249, -1, sizeof(::open_vector_format::VectorBlock_PointSequence)},
  { 255, -1, sizeof(::open_vector_format::VectorBlock_PointSequence3D)},
  { 261, -1, sizeof(::open_vector_format::VectorBlock_Arcs)},
  { 270, -1, sizeof(::open_vector_format::VectorBlock_Arcs3D)},
  { 280, -1, sizeof(::open_vector_format::VectorBlock_Ellipses)},
  { 289, -1, sizeof(::open_vector_format::VectorBlock_ExposurePause)},
  { 295, -1, sizeof(::open_vector_format::VectorBlock_LineSequenceParaAdapt)},
  { 302, -1, sizeof(::open_vector_format::VectorBlock_HatchesParaAdapt)},
  { 308, -1, sizeof(::open_vector_format::VectorBlock)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::open_vector_format::_Job_MarkingParamsMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::open_vector_format::_Job_PartsMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::open_vector_format::_Job_JobMetaData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::open_vector_format::_Job_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::open_vector_format::_JobParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::open_vector_format::_MarkingParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::open_vector_format::_PowerGradientParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::open_vector_format::_Part_GeometryInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::open_vector_format::_Part_Material_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::open_vector_format::_Part_ProcessStrategy_ProprietaryParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::open_vector_format::_Part_ProcessStrategy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::open_vector_format::_Part_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::open_vector_format::_WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::open_vector_format::_WorkPlane_WorkPlaneMetaData_closedContour_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::open_vector_format::_WorkPlane_WorkPlaneMetaData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::open_vector_format::_WorkPlane_Patch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::open_vector_format::_WorkPlane_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::open_vector_format::_VectorBlock_VectorBlockMetaData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::open_vector_format::_VectorBlock_LPBFMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::open_vector_format::_VectorBlock_MicroStructuringMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::open_vector_format::_VectorBlock_PolishingMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::open_vector_format::_VectorBlock_LineSequence_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::open_vector_format::_VectorBlock_LineSequence3D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::open_vector_format::_VectorBlock_Hatches_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::open_vector_format::_VectorBlock_Hatches3D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::open_vector_format::_VectorBlock_PointSequence_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::open_vector_format::_VectorBlock_PointSequence3D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::open_vector_format::_VectorBlock_Arcs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::open_vector_format::_VectorBlock_Arcs3D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::open_vector_format::_VectorBlock_Ellipses_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::open_vector_format::_VectorBlock_ExposurePause_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::open_vector_format::_VectorBlock_LineSequenceParaAdapt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::open_vector_format::_VectorBlock_HatchesParaAdapt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::open_vector_format::_VectorBlock_default_instance_),
};

const char descriptor_table_protodef_open_5fvector_5fformat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030open_vector_format.proto\022\022open_vector_"
  "format\"\347\004\n\003Job\0222\n\013work_planes\030\001 \003(\0132\035.op"
  "en_vector_format.WorkPlane\022:\n\rjob_meta_d"
  "ata\030\002 \001(\0132#.open_vector_format.Job.JobMe"
  "taData\022I\n\022marking_params_map\030\003 \003(\0132-.ope"
  "n_vector_format.Job.MarkingParamsMapEntr"
  "y\0228\n\tparts_map\030\004 \003(\0132%.open_vector_forma"
  "t.Job.PartsMapEntry\0229\n\016job_parameters\030\005 "
  "\001(\0132!.open_vector_format.JobParameters\022\027"
  "\n\017num_work_planes\030\006 \001(\005\032Z\n\025MarkingParams"
  "MapEntry\022\013\n\003key\030\001 \001(\005\0220\n\005value\030\002 \001(\0132!.o"
  "pen_vector_format.MarkingParams:\0028\001\032I\n\rP"
  "artsMapEntry\022\013\n\003key\030\001 \001(\005\022\'\n\005value\030\002 \001(\013"
  "2\030.open_vector_format.Part:\0028\001\032p\n\013JobMet"
  "aData\022\031\n\021job_creation_time\030\001 \001(\003\022\017\n\007vers"
  "ion\030\002 \001(\004\022\020\n\010job_name\030\003 \001(\t\022\016\n\006author\030\004 "
  "\001(\t\022\023\n\013description\030\005 \001(\t\"z\n\rJobParameter"
  "s\022%\n\035preheating_temperatur_in_dg_c\030\001 \001(\001"
  "\022 \n\030shielding_gas_directions\030\002 \003(\001\022 \n\030ma"
  "terial_feed_directions\030\003 \003(\001\"\375\007\n\rMarking"
  "Params\022\030\n\020laser_power_in_w\030\001 \001(\002\022\037\n\027lase"
  "r_speed_in_mm_per_s\030\002 \001(\002\022\037\n\027laser_focus"
  "_shift_in_mm\030\003 \001(\002\022!\n\031point_exposure_tim"
  "e_in_us\030\004 \001(\002\022\032\n\022jump_speed_in_mm_s\030\005 \001("
  "\002\022\"\n\032point_exposure_repetitions\030\006 \001(\002\022\035\n"
  "\025repetition_rate_in_hz\030\007 \001(\004\022\036\n\026laser_pu"
  "lses_per_burst\030\010 \001(\004\022#\n\033pulseDurationInF"
  "emtoseconds\030\t \001(\004\022C\n\014marking_mode\030\n \001(\0162"
  "-.open_vector_format.MarkingParams.Marki"
  "ngMode\022\030\n\020jump_delay_in_us\030\013 \001(\002\022\035\n\025lase"
  "r_off_delay_in_us\030\014 \001(\002\022\034\n\024laser_on_dela"
  "y_in_us\030\r \001(\002\022\030\n\020mark_delay_in_us\030\016 \001(\002\022"
  "\033\n\023polygon_delay_in_us\030\017 \001(\002\022\026\n\016time_lag"
  "_in_us\030\020 \001(\002\022\034\n\024laser_on_shift_in_us\030\021 \001"
  "(\002\022\r\n\005limit\030\022 \001(\002\022\024\n\014n_prev_in_us\030\023 \001(\002\022"
  "\024\n\014n_post_in_us\030\024 \001(\002\022\033\n\023wob_frequency_i"
  "n_hz\030\025 \001(\002\022\032\n\022wob_amp_long_in_mm\030\026 \001(\002\022\033"
  "\n\023wob_amp_trans_in_mm\030\027 \001(\002\022A\n\013wobble_mo"
  "de\030\030 \001(\0162,.open_vector_format.MarkingPar"
  "ams.WobbleMode\022>\n\rpowerGradient\030\031 \001(\0132\'."
  "open_vector_format.PowerGradientParams\022\014"
  "\n\004name\030\032 \001(\t\":\n\013MarkingMode\022\n\n\006NO_SKY\020\000\022"
  "\t\n\005SKY_1\020\001\022\t\n\005SKY_2\020\002\022\t\n\005SKY_3\020\003\"b\n\nWobb"
  "leMode\022\r\n\tNO_WOBBLE\020\000\022\022\n\016ELLIPSE_WOBBLE\020"
  "\001\022\031\n\025STANDING_EIGHT_WOBBLE\020\002\022\026\n\022LYING_EI"
  "GHT_WOBBLE\020\003\"C\n\023PowerGradientParams\022\023\n\013m"
  "inPowerInW\030\001 \001(\002\022\027\n\017gradientInWPerS\030\002 \001("
  "\002\"\315\010\n\004Part\022\014\n\004name\030\001 \001(\t\022<\n\rgeometry_inf"
  "o\030\002 \001(\0132%.open_vector_format.Part.Geomet"
  "ryInfo\0223\n\010material\030\003 \001(\0132!.open_vector_f"
  "ormat.Part.Material\022B\n\020process_strategy\030"
  "\004 \001(\0132(.open_vector_format.Part.ProcessS"
  "trategy\032\237\001\n\014GeometryInfo\022\025\n\rvolume_in_mm"
  "3\030\001 \001(\001\022\035\n\025support_volume_in_mm3\030\002 \001(\001\022\032"
  "\n\022build_height_in_mm\030\003 \001(\001\022\033\n\023surface_ar"
  "ea_in_mm2\030\004 \001(\001\022 \n\030projected_surface_in_"
  "mm2\030\005 \001(\001\032$\n\010Material\022\n\n\002id\030\001 \001(\004\022\014\n\004nam"
  "e\030\002 \001(\t\032\267\005\n\017ProcessStrategy\022\030\n\020rot_angle"
  "_in_deg\030\001 \001(\002\022\036\n\026increment_angle_in_deg\030"
  "\002 \001(\002\022\023\n\013shift_in_mm\030\003 \001(\002\022\031\n\021extend_int"
  "o_in_mm\030\004 \001(\002\022\035\n\025layer_thickness_in_mm\030\005"
  " \001(\002\022\034\n\024hatch_distance_in_mm\030\006 \001(\002\022$\n\034ha"
  "tch_contour_distance_in_mm\030\007 \001(\002\022\035\n\025over"
  "hang_angle_in_deg\030\010 \001(\002\022\034\n\024contour_offse"
  "t_in_mm\030\t \001(\002\022\032\n\022number_of_contours\030\n \001("
  "\005\022\036\n\026contour_distance_in_mm\030\013 \001(\002\022R\n\020hat"
  "ching_pattern\030\014 \001(\01628.open_vector_format"
  ".Part.ProcessStrategy.HatchingPattern\022\014\n"
  "\004name\030Z \001(\t\022X\n\025additional_parameters\030d \003"
  "(\01329.open_vector_format.Part.ProcessStra"
  "tegy.ProprietaryParam\032V\n\020ProprietaryPara"
  "m\022\022\n\nparam_name\030\001 \001(\t\022\023\n\013param_value\030\002 \001"
  "(\001\022\031\n\021param_description\030\003 \001(\t\"J\n\017Hatchin"
  "gPattern\022\022\n\016UNIDIRECTIONAL\020\000\022\021\n\rBIDIRECT"
  "IONAL\020\001\022\020\n\014CHECKERBOARD\020\002\"\341\007\n\tWorkPlane\022"
  "6\n\rvector_blocks\030\001 \003(\0132\037.open_vector_for"
  "mat.VectorBlock\022\023\n\013x_pos_in_mm\030\002 \001(\002\022\023\n\013"
  "y_pos_in_mm\030\003 \001(\002\022\023\n\013z_pos_in_mm\030\004 \001(\002\022\024"
  "\n\014x_rot_in_deg\030\005 \001(\002\022\024\n\014y_rot_in_deg\030\006 \001"
  "(\002\022\024\n\014z_rot_in_deg\030\007 \001(\002\022\022\n\nnum_blocks\030\010"
  " \001(\005\022\017\n\007repeats\030\t \001(\r\022\031\n\021work_plane_numb"
  "er\030\n \001(\005\022\024\n\014machine_type\030\013 \001(\t\022!\n\031additi"
  "onal_axis_positions\030\014 \003(\002\022B\n\tmeta_data\030\r"
  " \001(\0132/.open_vector_format.WorkPlane.Work"
  "PlaneMetaData\032\347\003\n\021WorkPlaneMetaData\022!\n\031t"
  "otal_scan_distance_in_mm\030\001 \001(\001\022!\n\031total_"
  "jump_distance_in_mm\030\002 \001(\001\022T\n\013patches_map"
  "\030\003 \003(\0132\?.open_vector_format.WorkPlane.Wo"
  "rkPlaneMetaData.PatchesMapEntry\022\020\n\010maxPo"
  "wer\030\004 \001(\002\022\020\n\010minPower\030\005 \001(\002\022O\n\010contours\030"
  "\006 \003(\0132=.open_vector_format.WorkPlane.Wor"
  "kPlaneMetaData.closedContour\032V\n\017PatchesM"
  "apEntry\022\013\n\003key\030\001 \001(\005\0222\n\005value\030\002 \001(\0132#.op"
  "en_vector_format.WorkPlane.Patch:\0028\001\032i\n\r"
  "closedContour\022,\n$contour_section_vector_"
  "block_indices\030\001 \003(\005\022\024\n\014area_in_mm_2\030\002 \001("
  "\002\022\024\n\014length_in_mm\030\003 \001(\002\032t\n\005Patch\022C\n\route"
  "r_contour\030\001 \001(\0132,.open_vector_format.Vec"
  "torBlock.LineSequence\022\t\n\001u\030\002 \001(\002\022\t\n\001v\030\003 "
  "\001(\002\022\020\n\010layer_id\030\004 \001(\005\"\242\030\n\013VectorBlock\022E\n"
  "\rline_sequence\030\001 \001(\0132,.open_vector_forma"
  "t.VectorBlock.LineSequenceH\000\022;\n\010_hatches"
  "\030\002 \001(\0132\'.open_vector_format.VectorBlock."
  "HatchesH\000\022G\n\016point_sequence\030\003 \001(\0132-.open"
  "_vector_format.VectorBlock.PointSequence"
  "H\000\0225\n\005_arcs\030\004 \001(\0132$.open_vector_format.V"
  "ectorBlock.ArcsH\000\022<\n\010ellipses\030\005 \001(\0132(.op"
  "en_vector_format.VectorBlock.EllipsesH\000\022"
  "J\n\020line_sequence_3d\030\006 \001(\0132..open_vector_"
  "format.VectorBlock.LineSequence3DH\000\022\?\n\nh"
  "atches_3d\030\007 \001(\0132).open_vector_format.Vec"
  "torBlock.Hatches3DH\000\022L\n\021point_sequence_3"
  "d\030\010 \001(\0132/.open_vector_format.VectorBlock"
  ".PointSequence3DH\000\0229\n\007arcs_3d\030\t \001(\0132&.op"
  "en_vector_format.VectorBlock.Arcs3DH\000\022G\n"
  "\016exposure_pause\030\n \001(\0132-.open_vector_form"
  "at.VectorBlock.ExposurePauseH\000\022Y\n\030line_s"
  "equence_para_adapt\030\013 \001(\01325.open_vector_f"
  "ormat.VectorBlock.LineSequenceParaAdaptH"
  "\000\022K\n\017_hatchParaAdapt\030\014 \001(\01320.open_vector"
  "_format.VectorBlock.HatchesParaAdaptH\000\022\032"
  "\n\022marking_params_key\0302 \001(\005\022\023\n\013laser_inde"
  "x\0305 \001(\005\022\017\n\007repeats\0306 \001(\004\022F\n\tmeta_data\030d "
  "\001(\01323.open_vector_format.VectorBlock.Vec"
  "torBlockMetaData\022E\n\rlpbf_metadata\030e \001(\0132"
  ",.open_vector_format.VectorBlock.LPBFMet"
  "adataH\001\022^\n\032micro_structuring_metadata\030f "
  "\001(\01328.open_vector_format.VectorBlock.Mic"
  "roStructuringMetadataH\001\022O\n\022polishing_met"
  "adata\030g \001(\01321.open_vector_format.VectorB"
  "lock.PolishingMetadataH\001\032\227\001\n\023VectorBlock"
  "MetaData\022!\n\031total_scan_distance_in_mm\030\001 "
  "\001(\001\022!\n\031total_jump_distance_in_mm\030\002 \001(\001\022\020"
  "\n\010part_key\030\003 \001(\005\022\021\n\tpatch_key\030\004 \001(\005\022\025\n\rc"
  "ontour_index\030\005 \001(\005\032\317\003\n\014LPBFMetadata\022;\n\tp"
  "art_area\030\001 \001(\0162(.open_vector_format.Vect"
  "orBlock.PartArea\022H\n\tskin_type\030\002 \001(\01625.op"
  "en_vector_format.VectorBlock.LPBFMetadat"
  "a.SkinType\022b\n\027skin_core_strategy_area\030\003 "
  "\001(\0162A.open_vector_format.VectorBlock.LPB"
  "FMetadata.SkinCoreStrategyArea\022E\n\016struct"
  "ure_type\030\004 \001(\0162-.open_vector_format.Vect"
  "orBlock.StructureType\022\022\n\nreexposure\030\005 \001("
  "\010\"3\n\010SkinType\022\013\n\007IN_SKIN\020\000\022\r\n\tDOWN_SKIN\020"
  "\001\022\013\n\007UP_SKIN\020\002\"D\n\024SkinCoreStrategyArea\022\016"
  "\n\nOUTER_HULL\020\000\022\010\n\004CORE\020\001\022\022\n\016INBETWEEN_HU"
  "LL\020\002\032\236\001\n\030MicroStructuringMetadata\022;\n\tpar"
  "t_area\030\001 \001(\0162(.open_vector_format.Vector"
  "Block.PartArea\022E\n\016structure_type\030\002 \001(\0162-"
  ".open_vector_format.VectorBlock.Structur"
  "eType\032\023\n\021PolishingMetadata\032\036\n\014LineSequen"
  "ce\022\016\n\006points\030\001 \003(\002\032 \n\016LineSequence3D\022\016\n\006"
  "points\030\001 \003(\002\032\031\n\007Hatches\022\016\n\006points\030\001 \003(\002\032"
  "\033\n\tHatches3D\022\016\n\006points\030\001 \003(\002\032\037\n\rPointSeq"
  "uence\022\016\n\006points\030\001 \003(\002\032!\n\017PointSequence3D"
  "\022\016\n\006points\030\001 \003(\002\032J\n\004Arcs\022\r\n\005angle\030\001 \001(\001\022"
  "\020\n\010start_dx\030\002 \001(\002\022\020\n\010start_dy\030\003 \001(\002\022\017\n\007c"
  "enters\030\004 \003(\002\032^\n\006Arcs3D\022\r\n\005angle\030\001 \001(\001\022\020\n"
  "\010start_dx\030\002 \001(\002\022\020\n\010start_dy\030\003 \001(\002\022\020\n\010sta"
  "rt_dz\030\004 \001(\002\022\017\n\007centers\030\005 \003(\002\032k\n\010Ellipses"
  "\022\t\n\001a\030\001 \001(\002\022\t\n\001b\030\002 \001(\002\022\014\n\004phi0\030\003 \001(\001\022;\n\r"
  "ellipses_arcs\030\004 \001(\0132$.open_vector_format"
  ".VectorBlock.Arcs\032$\n\rExposurePause\022\023\n\013pa"
  "use_in_us\030\001 \001(\004\032\230\002\n\025LineSequenceParaAdap"
  "t\022\031\n\021points_with_paras\030\001 \003(\002\022Y\n\tparamete"
  "r\030\002 \001(\0162F.open_vector_format.VectorBlock"
  ".LineSequenceParaAdapt.AdaptedParameter\""
  "\210\001\n\020AdaptedParameter\022\024\n\020LASER_POWER_IN_W"
  "\020\000\022\033\n\027LASER_FOCUS_SHIFT_IN_MM\020\001\022\034\n\030LASER"
  "_PULSE_LENGTH_IN_US\020\002\022#\n\037LASER_PULSE_REP"
  "ITION_RATE_IN_HZ\020\003\032f\n\020HatchesParaAdapt\022R"
  "\n\023hatchAsLinesequence\030\001 \003(\01325.open_vecto"
  "r_format.VectorBlock.LineSequenceParaAda"
  "pt\";\n\010PartArea\022\n\n\006VOLUME\020\000\022\013\n\007CONTOUR\020\001\022"
  "\026\n\022TRANSITION_CONTOUR\020\002\"E\n\rStructureType"
  "\022\010\n\004PART\020\000\022\013\n\007SUPPORT\020\001\022\021\n\rWIRESTRUCTURE"
  "\020\002\022\n\n\006POINTS\020\003B\r\n\013vector_dataB\023\n\021process"
  "_meta_dataB=Z;github.com/digital-product"
  "ion-aachen/openvectorformat/protob\006proto"
  "3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_open_5fvector_5fformat_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_open_5fvector_5fformat_2eproto = {
  false, false, 7161, descriptor_table_protodef_open_5fvector_5fformat_2eproto, "open_vector_format.proto", 
  &descriptor_table_open_5fvector_5fformat_2eproto_once, nullptr, 0, 34,
  schemas, file_default_instances, TableStruct_open_5fvector_5fformat_2eproto::offsets,
  file_level_metadata_open_5fvector_5fformat_2eproto, file_level_enum_descriptors_open_5fvector_5fformat_2eproto, file_level_service_descriptors_open_5fvector_5fformat_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_open_5fvector_5fformat_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_open_5fvector_5fformat_2eproto);
  return descriptor_table_open_5fvector_5fformat_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_open_5fvector_5fformat_2eproto(&descriptor_table_open_5fvector_5fformat_2eproto);
namespace open_vector_format {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MarkingParams_MarkingMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_open_5fvector_5fformat_2eproto);
  return file_level_enum_descriptors_open_5fvector_5fformat_2eproto[0];
}
bool MarkingParams_MarkingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MarkingParams_MarkingMode MarkingParams::NO_SKY;
constexpr MarkingParams_MarkingMode MarkingParams::SKY_1;
constexpr MarkingParams_MarkingMode MarkingParams::SKY_2;
constexpr MarkingParams_MarkingMode MarkingParams::SKY_3;
constexpr MarkingParams_MarkingMode MarkingParams::MarkingMode_MIN;
constexpr MarkingParams_MarkingMode MarkingParams::MarkingMode_MAX;
constexpr int MarkingParams::MarkingMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MarkingParams_WobbleMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_open_5fvector_5fformat_2eproto);
  return file_level_enum_descriptors_open_5fvector_5fformat_2eproto[1];
}
bool MarkingParams_WobbleMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MarkingParams_WobbleMode MarkingParams::NO_WOBBLE;
constexpr MarkingParams_WobbleMode MarkingParams::ELLIPSE_WOBBLE;
constexpr MarkingParams_WobbleMode MarkingParams::STANDING_EIGHT_WOBBLE;
constexpr MarkingParams_WobbleMode MarkingParams::LYING_EIGHT_WOBBLE;
constexpr MarkingParams_WobbleMode MarkingParams::WobbleMode_MIN;
constexpr MarkingParams_WobbleMode MarkingParams::WobbleMode_MAX;
constexpr int MarkingParams::WobbleMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Part_ProcessStrategy_HatchingPattern_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_open_5fvector_5fformat_2eproto);
  return file_level_enum_descriptors_open_5fvector_5fformat_2eproto[2];
}
bool Part_ProcessStrategy_HatchingPattern_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Part_ProcessStrategy_HatchingPattern Part_ProcessStrategy::UNIDIRECTIONAL;
constexpr Part_ProcessStrategy_HatchingPattern Part_ProcessStrategy::BIDIRECTIONAL;
constexpr Part_ProcessStrategy_HatchingPattern Part_ProcessStrategy::CHECKERBOARD;
constexpr Part_ProcessStrategy_HatchingPattern Part_ProcessStrategy::HatchingPattern_MIN;
constexpr Part_ProcessStrategy_HatchingPattern Part_ProcessStrategy::HatchingPattern_MAX;
constexpr int Part_ProcessStrategy::HatchingPattern_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VectorBlock_LPBFMetadata_SkinType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_open_5fvector_5fformat_2eproto);
  return file_level_enum_descriptors_open_5fvector_5fformat_2eproto[3];
}
bool VectorBlock_LPBFMetadata_SkinType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr VectorBlock_LPBFMetadata_SkinType VectorBlock_LPBFMetadata::IN_SKIN;
constexpr VectorBlock_LPBFMetadata_SkinType VectorBlock_LPBFMetadata::DOWN_SKIN;
constexpr VectorBlock_LPBFMetadata_SkinType VectorBlock_LPBFMetadata::UP_SKIN;
constexpr VectorBlock_LPBFMetadata_SkinType VectorBlock_LPBFMetadata::SkinType_MIN;
constexpr VectorBlock_LPBFMetadata_SkinType VectorBlock_LPBFMetadata::SkinType_MAX;
constexpr int VectorBlock_LPBFMetadata::SkinType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VectorBlock_LPBFMetadata_SkinCoreStrategyArea_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_open_5fvector_5fformat_2eproto);
  return file_level_enum_descriptors_open_5fvector_5fformat_2eproto[4];
}
bool VectorBlock_LPBFMetadata_SkinCoreStrategyArea_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr VectorBlock_LPBFMetadata_SkinCoreStrategyArea VectorBlock_LPBFMetadata::OUTER_HULL;
constexpr VectorBlock_LPBFMetadata_SkinCoreStrategyArea VectorBlock_LPBFMetadata::CORE;
constexpr VectorBlock_LPBFMetadata_SkinCoreStrategyArea VectorBlock_LPBFMetadata::INBETWEEN_HULL;
constexpr VectorBlock_LPBFMetadata_SkinCoreStrategyArea VectorBlock_LPBFMetadata::SkinCoreStrategyArea_MIN;
constexpr VectorBlock_LPBFMetadata_SkinCoreStrategyArea VectorBlock_LPBFMetadata::SkinCoreStrategyArea_MAX;
constexpr int VectorBlock_LPBFMetadata::SkinCoreStrategyArea_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VectorBlock_LineSequenceParaAdapt_AdaptedParameter_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_open_5fvector_5fformat_2eproto);
  return file_level_enum_descriptors_open_5fvector_5fformat_2eproto[5];
}
bool VectorBlock_LineSequenceParaAdapt_AdaptedParameter_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr VectorBlock_LineSequenceParaAdapt_AdaptedParameter VectorBlock_LineSequenceParaAdapt::LASER_POWER_IN_W;
constexpr VectorBlock_LineSequenceParaAdapt_AdaptedParameter VectorBlock_LineSequenceParaAdapt::LASER_FOCUS_SHIFT_IN_MM;
constexpr VectorBlock_LineSequenceParaAdapt_AdaptedParameter VectorBlock_LineSequenceParaAdapt::LASER_PULSE_LENGTH_IN_US;
constexpr VectorBlock_LineSequenceParaAdapt_AdaptedParameter VectorBlock_LineSequenceParaAdapt::LASER_PULSE_REPITION_RATE_IN_HZ;
constexpr VectorBlock_LineSequenceParaAdapt_AdaptedParameter VectorBlock_LineSequenceParaAdapt::AdaptedParameter_MIN;
constexpr VectorBlock_LineSequenceParaAdapt_AdaptedParameter VectorBlock_LineSequenceParaAdapt::AdaptedParameter_MAX;
constexpr int VectorBlock_LineSequenceParaAdapt::AdaptedParameter_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VectorBlock_PartArea_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_open_5fvector_5fformat_2eproto);
  return file_level_enum_descriptors_open_5fvector_5fformat_2eproto[6];
}
bool VectorBlock_PartArea_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr VectorBlock_PartArea VectorBlock::VOLUME;
constexpr VectorBlock_PartArea VectorBlock::CONTOUR;
constexpr VectorBlock_PartArea VectorBlock::TRANSITION_CONTOUR;
constexpr VectorBlock_PartArea VectorBlock::PartArea_MIN;
constexpr VectorBlock_PartArea VectorBlock::PartArea_MAX;
constexpr int VectorBlock::PartArea_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VectorBlock_StructureType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_open_5fvector_5fformat_2eproto);
  return file_level_enum_descriptors_open_5fvector_5fformat_2eproto[7];
}
bool VectorBlock_StructureType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr VectorBlock_StructureType VectorBlock::PART;
constexpr VectorBlock_StructureType VectorBlock::SUPPORT;
constexpr VectorBlock_StructureType VectorBlock::WIRESTRUCTURE;
constexpr VectorBlock_StructureType VectorBlock::POINTS;
constexpr VectorBlock_StructureType VectorBlock::StructureType_MIN;
constexpr VectorBlock_StructureType VectorBlock::StructureType_MAX;
constexpr int VectorBlock::StructureType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

Job_MarkingParamsMapEntry_DoNotUse::Job_MarkingParamsMapEntry_DoNotUse() {}
Job_MarkingParamsMapEntry_DoNotUse::Job_MarkingParamsMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Job_MarkingParamsMapEntry_DoNotUse::MergeFrom(const Job_MarkingParamsMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Job_MarkingParamsMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Job_MarkingParamsMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Job_PartsMapEntry_DoNotUse::Job_PartsMapEntry_DoNotUse() {}
Job_PartsMapEntry_DoNotUse::Job_PartsMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Job_PartsMapEntry_DoNotUse::MergeFrom(const Job_PartsMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Job_PartsMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Job_PartsMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class Job_JobMetaData::_Internal {
 public:
};

Job_JobMetaData::Job_JobMetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.Job.JobMetaData)
}
Job_JobMetaData::Job_JobMetaData(const Job_JobMetaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  job_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_job_name().empty()) {
    job_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_job_name(), 
      GetArena());
  }
  author_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_author().empty()) {
    author_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_author(), 
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  ::memcpy(&job_creation_time_, &from.job_creation_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&job_creation_time_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:open_vector_format.Job.JobMetaData)
}

void Job_JobMetaData::SharedCtor() {
job_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
author_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&job_creation_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&job_creation_time_)) + sizeof(version_));
}

Job_JobMetaData::~Job_JobMetaData() {
  // @@protoc_insertion_point(destructor:open_vector_format.Job.JobMetaData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Job_JobMetaData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  job_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  author_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Job_JobMetaData::ArenaDtor(void* object) {
  Job_JobMetaData* _this = reinterpret_cast< Job_JobMetaData* >(object);
  (void)_this;
}
void Job_JobMetaData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Job_JobMetaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Job_JobMetaData::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.Job.JobMetaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  job_name_.ClearToEmpty();
  author_.ClearToEmpty();
  description_.ClearToEmpty();
  ::memset(&job_creation_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&job_creation_time_)) + sizeof(version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Job_JobMetaData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 job_creation_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          job_creation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string job_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_job_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "open_vector_format.Job.JobMetaData.job_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string author = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_author();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "open_vector_format.Job.JobMetaData.author"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "open_vector_format.Job.JobMetaData.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Job_JobMetaData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.Job.JobMetaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 job_creation_time = 1;
  if (this->job_creation_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_job_creation_time(), target);
  }

  // uint64 version = 2;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_version(), target);
  }

  // string job_name = 3;
  if (this->job_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_job_name().data(), static_cast<int>(this->_internal_job_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "open_vector_format.Job.JobMetaData.job_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_job_name(), target);
  }

  // string author = 4;
  if (this->author().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_author().data(), static_cast<int>(this->_internal_author().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "open_vector_format.Job.JobMetaData.author");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_author(), target);
  }

  // string description = 5;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "open_vector_format.Job.JobMetaData.description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.Job.JobMetaData)
  return target;
}

size_t Job_JobMetaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:open_vector_format.Job.JobMetaData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string job_name = 3;
  if (this->job_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_job_name());
  }

  // string author = 4;
  if (this->author().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_author());
  }

  // string description = 5;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // int64 job_creation_time = 1;
  if (this->job_creation_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_job_creation_time());
  }

  // uint64 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Job_JobMetaData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:open_vector_format.Job.JobMetaData)
  GOOGLE_DCHECK_NE(&from, this);
  const Job_JobMetaData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Job_JobMetaData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:open_vector_format.Job.JobMetaData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:open_vector_format.Job.JobMetaData)
    MergeFrom(*source);
  }
}

void Job_JobMetaData::MergeFrom(const Job_JobMetaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.Job.JobMetaData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.job_name().size() > 0) {
    _internal_set_job_name(from._internal_job_name());
  }
  if (from.author().size() > 0) {
    _internal_set_author(from._internal_author());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.job_creation_time() != 0) {
    _internal_set_job_creation_time(from._internal_job_creation_time());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
}

void Job_JobMetaData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:open_vector_format.Job.JobMetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Job_JobMetaData::CopyFrom(const Job_JobMetaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.Job.JobMetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Job_JobMetaData::IsInitialized() const {
  return true;
}

void Job_JobMetaData::InternalSwap(Job_JobMetaData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  job_name_.Swap(&other->job_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  author_.Swap(&other->author_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Job_JobMetaData, version_)
      + sizeof(Job_JobMetaData::version_)
      - PROTOBUF_FIELD_OFFSET(Job_JobMetaData, job_creation_time_)>(
          reinterpret_cast<char*>(&job_creation_time_),
          reinterpret_cast<char*>(&other->job_creation_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Job_JobMetaData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Job::_Internal {
 public:
  static const ::open_vector_format::Job_JobMetaData& job_meta_data(const Job* msg);
  static const ::open_vector_format::JobParameters& job_parameters(const Job* msg);
};

const ::open_vector_format::Job_JobMetaData&
Job::_Internal::job_meta_data(const Job* msg) {
  return *msg->job_meta_data_;
}
const ::open_vector_format::JobParameters&
Job::_Internal::job_parameters(const Job* msg) {
  return *msg->job_parameters_;
}
Job::Job(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  work_planes_(arena),
  marking_params_map_(arena),
  parts_map_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.Job)
}
Job::Job(const Job& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      work_planes_(from.work_planes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  marking_params_map_.MergeFrom(from.marking_params_map_);
  parts_map_.MergeFrom(from.parts_map_);
  if (from._internal_has_job_meta_data()) {
    job_meta_data_ = new ::open_vector_format::Job_JobMetaData(*from.job_meta_data_);
  } else {
    job_meta_data_ = nullptr;
  }
  if (from._internal_has_job_parameters()) {
    job_parameters_ = new ::open_vector_format::JobParameters(*from.job_parameters_);
  } else {
    job_parameters_ = nullptr;
  }
  num_work_planes_ = from.num_work_planes_;
  // @@protoc_insertion_point(copy_constructor:open_vector_format.Job)
}

void Job::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&job_meta_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_work_planes_) -
    reinterpret_cast<char*>(&job_meta_data_)) + sizeof(num_work_planes_));
}

Job::~Job() {
  // @@protoc_insertion_point(destructor:open_vector_format.Job)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Job::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete job_meta_data_;
  if (this != internal_default_instance()) delete job_parameters_;
}

void Job::ArenaDtor(void* object) {
  Job* _this = reinterpret_cast< Job* >(object);
  (void)_this;
}
void Job::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Job::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Job::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.Job)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  work_planes_.Clear();
  marking_params_map_.Clear();
  parts_map_.Clear();
  if (GetArena() == nullptr && job_meta_data_ != nullptr) {
    delete job_meta_data_;
  }
  job_meta_data_ = nullptr;
  if (GetArena() == nullptr && job_parameters_ != nullptr) {
    delete job_parameters_;
  }
  job_parameters_ = nullptr;
  num_work_planes_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Job::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .open_vector_format.WorkPlane work_planes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_work_planes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .open_vector_format.Job.JobMetaData job_meta_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_job_meta_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, .open_vector_format.MarkingParams> marking_params_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&marking_params_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, .open_vector_format.Part> parts_map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&parts_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .open_vector_format.JobParameters job_parameters = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_job_parameters(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_work_planes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          num_work_planes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Job::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.Job)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .open_vector_format.WorkPlane work_planes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_work_planes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_work_planes(i), target, stream);
  }

  // .open_vector_format.Job.JobMetaData job_meta_data = 2;
  if (this->has_job_meta_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::job_meta_data(this), target, stream);
  }

  // map<int32, .open_vector_format.MarkingParams> marking_params_map = 3;
  if (!this->_internal_marking_params_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::MarkingParams >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_marking_params_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_marking_params_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::MarkingParams >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::MarkingParams >::const_iterator
          it = this->_internal_marking_params_map().begin();
          it != this->_internal_marking_params_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Job_MarkingParamsMapEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::MarkingParams >::const_iterator
          it = this->_internal_marking_params_map().begin();
          it != this->_internal_marking_params_map().end(); ++it) {
        target = Job_MarkingParamsMapEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, .open_vector_format.Part> parts_map = 4;
  if (!this->_internal_parts_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::Part >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_parts_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_parts_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::Part >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::Part >::const_iterator
          it = this->_internal_parts_map().begin();
          it != this->_internal_parts_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Job_PartsMapEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::Part >::const_iterator
          it = this->_internal_parts_map().begin();
          it != this->_internal_parts_map().end(); ++it) {
        target = Job_PartsMapEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
      }
    }
  }

  // .open_vector_format.JobParameters job_parameters = 5;
  if (this->has_job_parameters()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::job_parameters(this), target, stream);
  }

  // int32 num_work_planes = 6;
  if (this->num_work_planes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_num_work_planes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.Job)
  return target;
}

size_t Job::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:open_vector_format.Job)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .open_vector_format.WorkPlane work_planes = 1;
  total_size += 1UL * this->_internal_work_planes_size();
  for (const auto& msg : this->work_planes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<int32, .open_vector_format.MarkingParams> marking_params_map = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_marking_params_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::MarkingParams >::const_iterator
      it = this->_internal_marking_params_map().begin();
      it != this->_internal_marking_params_map().end(); ++it) {
    total_size += Job_MarkingParamsMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .open_vector_format.Part> parts_map = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_parts_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::Part >::const_iterator
      it = this->_internal_parts_map().begin();
      it != this->_internal_parts_map().end(); ++it) {
    total_size += Job_PartsMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .open_vector_format.Job.JobMetaData job_meta_data = 2;
  if (this->has_job_meta_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *job_meta_data_);
  }

  // .open_vector_format.JobParameters job_parameters = 5;
  if (this->has_job_parameters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *job_parameters_);
  }

  // int32 num_work_planes = 6;
  if (this->num_work_planes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_work_planes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Job::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:open_vector_format.Job)
  GOOGLE_DCHECK_NE(&from, this);
  const Job* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Job>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:open_vector_format.Job)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:open_vector_format.Job)
    MergeFrom(*source);
  }
}

void Job::MergeFrom(const Job& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.Job)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  work_planes_.MergeFrom(from.work_planes_);
  marking_params_map_.MergeFrom(from.marking_params_map_);
  parts_map_.MergeFrom(from.parts_map_);
  if (from.has_job_meta_data()) {
    _internal_mutable_job_meta_data()->::open_vector_format::Job_JobMetaData::MergeFrom(from._internal_job_meta_data());
  }
  if (from.has_job_parameters()) {
    _internal_mutable_job_parameters()->::open_vector_format::JobParameters::MergeFrom(from._internal_job_parameters());
  }
  if (from.num_work_planes() != 0) {
    _internal_set_num_work_planes(from._internal_num_work_planes());
  }
}

void Job::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:open_vector_format.Job)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Job::CopyFrom(const Job& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.Job)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Job::IsInitialized() const {
  return true;
}

void Job::InternalSwap(Job* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  work_planes_.InternalSwap(&other->work_planes_);
  marking_params_map_.Swap(&other->marking_params_map_);
  parts_map_.Swap(&other->parts_map_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Job, num_work_planes_)
      + sizeof(Job::num_work_planes_)
      - PROTOBUF_FIELD_OFFSET(Job, job_meta_data_)>(
          reinterpret_cast<char*>(&job_meta_data_),
          reinterpret_cast<char*>(&other->job_meta_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Job::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class JobParameters::_Internal {
 public:
};

JobParameters::JobParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  shielding_gas_directions_(arena),
  material_feed_directions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.JobParameters)
}
JobParameters::JobParameters(const JobParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shielding_gas_directions_(from.shielding_gas_directions_),
      material_feed_directions_(from.material_feed_directions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  preheating_temperatur_in_dg_c_ = from.preheating_temperatur_in_dg_c_;
  // @@protoc_insertion_point(copy_constructor:open_vector_format.JobParameters)
}

void JobParameters::SharedCtor() {
preheating_temperatur_in_dg_c_ = 0;
}

JobParameters::~JobParameters() {
  // @@protoc_insertion_point(destructor:open_vector_format.JobParameters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JobParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void JobParameters::ArenaDtor(void* object) {
  JobParameters* _this = reinterpret_cast< JobParameters* >(object);
  (void)_this;
}
void JobParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JobParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JobParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.JobParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shielding_gas_directions_.Clear();
  material_feed_directions_.Clear();
  preheating_temperatur_in_dg_c_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JobParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double preheating_temperatur_in_dg_c = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          preheating_temperatur_in_dg_c_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double shielding_gas_directions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_shielding_gas_directions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_shielding_gas_directions(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double material_feed_directions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_material_feed_directions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25) {
          _internal_add_material_feed_directions(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JobParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.JobParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double preheating_temperatur_in_dg_c = 1;
  if (!(this->preheating_temperatur_in_dg_c() <= 0 && this->preheating_temperatur_in_dg_c() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_preheating_temperatur_in_dg_c(), target);
  }

  // repeated double shielding_gas_directions = 2;
  if (this->_internal_shielding_gas_directions_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_shielding_gas_directions(), target);
  }

  // repeated double material_feed_directions = 3;
  if (this->_internal_material_feed_directions_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_material_feed_directions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.JobParameters)
  return target;
}

size_t JobParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:open_vector_format.JobParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double shielding_gas_directions = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_shielding_gas_directions_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _shielding_gas_directions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double material_feed_directions = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_material_feed_directions_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _material_feed_directions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // double preheating_temperatur_in_dg_c = 1;
  if (!(this->preheating_temperatur_in_dg_c() <= 0 && this->preheating_temperatur_in_dg_c() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobParameters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:open_vector_format.JobParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const JobParameters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobParameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:open_vector_format.JobParameters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:open_vector_format.JobParameters)
    MergeFrom(*source);
  }
}

void JobParameters::MergeFrom(const JobParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.JobParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shielding_gas_directions_.MergeFrom(from.shielding_gas_directions_);
  material_feed_directions_.MergeFrom(from.material_feed_directions_);
  if (!(from.preheating_temperatur_in_dg_c() <= 0 && from.preheating_temperatur_in_dg_c() >= 0)) {
    _internal_set_preheating_temperatur_in_dg_c(from._internal_preheating_temperatur_in_dg_c());
  }
}

void JobParameters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:open_vector_format.JobParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobParameters::CopyFrom(const JobParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.JobParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobParameters::IsInitialized() const {
  return true;
}

void JobParameters::InternalSwap(JobParameters* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  shielding_gas_directions_.InternalSwap(&other->shielding_gas_directions_);
  material_feed_directions_.InternalSwap(&other->material_feed_directions_);
  swap(preheating_temperatur_in_dg_c_, other->preheating_temperatur_in_dg_c_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobParameters::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarkingParams::_Internal {
 public:
  static const ::open_vector_format::PowerGradientParams& powergradient(const MarkingParams* msg);
};

const ::open_vector_format::PowerGradientParams&
MarkingParams::_Internal::powergradient(const MarkingParams* msg) {
  return *msg->powergradient_;
}
MarkingParams::MarkingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.MarkingParams)
}
MarkingParams::MarkingParams(const MarkingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_powergradient()) {
    powergradient_ = new ::open_vector_format::PowerGradientParams(*from.powergradient_);
  } else {
    powergradient_ = nullptr;
  }
  ::memcpy(&laser_power_in_w_, &from.laser_power_in_w_,
    static_cast<size_t>(reinterpret_cast<char*>(&wobble_mode_) -
    reinterpret_cast<char*>(&laser_power_in_w_)) + sizeof(wobble_mode_));
  // @@protoc_insertion_point(copy_constructor:open_vector_format.MarkingParams)
}

void MarkingParams::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&powergradient_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&wobble_mode_) -
    reinterpret_cast<char*>(&powergradient_)) + sizeof(wobble_mode_));
}

MarkingParams::~MarkingParams() {
  // @@protoc_insertion_point(destructor:open_vector_format.MarkingParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarkingParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete powergradient_;
}

void MarkingParams::ArenaDtor(void* object) {
  MarkingParams* _this = reinterpret_cast< MarkingParams* >(object);
  (void)_this;
}
void MarkingParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarkingParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MarkingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.MarkingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArena() == nullptr && powergradient_ != nullptr) {
    delete powergradient_;
  }
  powergradient_ = nullptr;
  ::memset(&laser_power_in_w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wobble_mode_) -
      reinterpret_cast<char*>(&laser_power_in_w_)) + sizeof(wobble_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarkingParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float laser_power_in_w = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          laser_power_in_w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float laser_speed_in_mm_per_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          laser_speed_in_mm_per_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float laser_focus_shift_in_mm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          laser_focus_shift_in_mm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float point_exposure_time_in_us = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          point_exposure_time_in_us_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float jump_speed_in_mm_s = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          jump_speed_in_mm_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float point_exposure_repetitions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          point_exposure_repetitions_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 repetition_rate_in_hz = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          repetition_rate_in_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 laser_pulses_per_burst = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          laser_pulses_per_burst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 pulseDurationInFemtoseconds = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          pulsedurationinfemtoseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .open_vector_format.MarkingParams.MarkingMode marking_mode = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_marking_mode(static_cast<::open_vector_format::MarkingParams_MarkingMode>(val));
        } else goto handle_unusual;
        continue;
      // float jump_delay_in_us = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          jump_delay_in_us_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float laser_off_delay_in_us = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          laser_off_delay_in_us_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float laser_on_delay_in_us = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          laser_on_delay_in_us_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float mark_delay_in_us = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          mark_delay_in_us_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float polygon_delay_in_us = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          polygon_delay_in_us_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float time_lag_in_us = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          time_lag_in_us_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float laser_on_shift_in_us = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          laser_on_shift_in_us_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float limit = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float n_prev_in_us = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          n_prev_in_us_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float n_post_in_us = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          n_post_in_us_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float wob_frequency_in_hz = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          wob_frequency_in_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float wob_amp_long_in_mm = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          wob_amp_long_in_mm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float wob_amp_trans_in_mm = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          wob_amp_trans_in_mm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .open_vector_format.MarkingParams.WobbleMode wobble_mode = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_wobble_mode(static_cast<::open_vector_format::MarkingParams_WobbleMode>(val));
        } else goto handle_unusual;
        continue;
      // .open_vector_format.PowerGradientParams powerGradient = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_powergradient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "open_vector_format.MarkingParams.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarkingParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.MarkingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float laser_power_in_w = 1;
  if (!(this->laser_power_in_w() <= 0 && this->laser_power_in_w() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_laser_power_in_w(), target);
  }

  // float laser_speed_in_mm_per_s = 2;
  if (!(this->laser_speed_in_mm_per_s() <= 0 && this->laser_speed_in_mm_per_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_laser_speed_in_mm_per_s(), target);
  }

  // float laser_focus_shift_in_mm = 3;
  if (!(this->laser_focus_shift_in_mm() <= 0 && this->laser_focus_shift_in_mm() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_laser_focus_shift_in_mm(), target);
  }

  // float point_exposure_time_in_us = 4;
  if (!(this->point_exposure_time_in_us() <= 0 && this->point_exposure_time_in_us() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_point_exposure_time_in_us(), target);
  }

  // float jump_speed_in_mm_s = 5;
  if (!(this->jump_speed_in_mm_s() <= 0 && this->jump_speed_in_mm_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_jump_speed_in_mm_s(), target);
  }

  // float point_exposure_repetitions = 6;
  if (!(this->point_exposure_repetitions() <= 0 && this->point_exposure_repetitions() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_point_exposure_repetitions(), target);
  }

  // uint64 repetition_rate_in_hz = 7;
  if (this->repetition_rate_in_hz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_repetition_rate_in_hz(), target);
  }

  // uint64 laser_pulses_per_burst = 8;
  if (this->laser_pulses_per_burst() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_laser_pulses_per_burst(), target);
  }

  // uint64 pulseDurationInFemtoseconds = 9;
  if (this->pulsedurationinfemtoseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_pulsedurationinfemtoseconds(), target);
  }

  // .open_vector_format.MarkingParams.MarkingMode marking_mode = 10;
  if (this->marking_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_marking_mode(), target);
  }

  // float jump_delay_in_us = 11;
  if (!(this->jump_delay_in_us() <= 0 && this->jump_delay_in_us() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_jump_delay_in_us(), target);
  }

  // float laser_off_delay_in_us = 12;
  if (!(this->laser_off_delay_in_us() <= 0 && this->laser_off_delay_in_us() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_laser_off_delay_in_us(), target);
  }

  // float laser_on_delay_in_us = 13;
  if (!(this->laser_on_delay_in_us() <= 0 && this->laser_on_delay_in_us() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_laser_on_delay_in_us(), target);
  }

  // float mark_delay_in_us = 14;
  if (!(this->mark_delay_in_us() <= 0 && this->mark_delay_in_us() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_mark_delay_in_us(), target);
  }

  // float polygon_delay_in_us = 15;
  if (!(this->polygon_delay_in_us() <= 0 && this->polygon_delay_in_us() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_polygon_delay_in_us(), target);
  }

  // float time_lag_in_us = 16;
  if (!(this->time_lag_in_us() <= 0 && this->time_lag_in_us() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_time_lag_in_us(), target);
  }

  // float laser_on_shift_in_us = 17;
  if (!(this->laser_on_shift_in_us() <= 0 && this->laser_on_shift_in_us() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_laser_on_shift_in_us(), target);
  }

  // float limit = 18;
  if (!(this->limit() <= 0 && this->limit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_limit(), target);
  }

  // float n_prev_in_us = 19;
  if (!(this->n_prev_in_us() <= 0 && this->n_prev_in_us() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_n_prev_in_us(), target);
  }

  // float n_post_in_us = 20;
  if (!(this->n_post_in_us() <= 0 && this->n_post_in_us() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_n_post_in_us(), target);
  }

  // float wob_frequency_in_hz = 21;
  if (!(this->wob_frequency_in_hz() <= 0 && this->wob_frequency_in_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->_internal_wob_frequency_in_hz(), target);
  }

  // float wob_amp_long_in_mm = 22;
  if (!(this->wob_amp_long_in_mm() <= 0 && this->wob_amp_long_in_mm() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->_internal_wob_amp_long_in_mm(), target);
  }

  // float wob_amp_trans_in_mm = 23;
  if (!(this->wob_amp_trans_in_mm() <= 0 && this->wob_amp_trans_in_mm() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(23, this->_internal_wob_amp_trans_in_mm(), target);
  }

  // .open_vector_format.MarkingParams.WobbleMode wobble_mode = 24;
  if (this->wobble_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      24, this->_internal_wobble_mode(), target);
  }

  // .open_vector_format.PowerGradientParams powerGradient = 25;
  if (this->has_powergradient()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::powergradient(this), target, stream);
  }

  // string name = 26;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "open_vector_format.MarkingParams.name");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.MarkingParams)
  return target;
}

size_t MarkingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:open_vector_format.MarkingParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 26;
  if (this->name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .open_vector_format.PowerGradientParams powerGradient = 25;
  if (this->has_powergradient()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *powergradient_);
  }

  // float laser_power_in_w = 1;
  if (!(this->laser_power_in_w() <= 0 && this->laser_power_in_w() >= 0)) {
    total_size += 1 + 4;
  }

  // float laser_speed_in_mm_per_s = 2;
  if (!(this->laser_speed_in_mm_per_s() <= 0 && this->laser_speed_in_mm_per_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float laser_focus_shift_in_mm = 3;
  if (!(this->laser_focus_shift_in_mm() <= 0 && this->laser_focus_shift_in_mm() >= 0)) {
    total_size += 1 + 4;
  }

  // float point_exposure_time_in_us = 4;
  if (!(this->point_exposure_time_in_us() <= 0 && this->point_exposure_time_in_us() >= 0)) {
    total_size += 1 + 4;
  }

  // float jump_speed_in_mm_s = 5;
  if (!(this->jump_speed_in_mm_s() <= 0 && this->jump_speed_in_mm_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float point_exposure_repetitions = 6;
  if (!(this->point_exposure_repetitions() <= 0 && this->point_exposure_repetitions() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 repetition_rate_in_hz = 7;
  if (this->repetition_rate_in_hz() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_repetition_rate_in_hz());
  }

  // uint64 laser_pulses_per_burst = 8;
  if (this->laser_pulses_per_burst() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_laser_pulses_per_burst());
  }

  // uint64 pulseDurationInFemtoseconds = 9;
  if (this->pulsedurationinfemtoseconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pulsedurationinfemtoseconds());
  }

  // .open_vector_format.MarkingParams.MarkingMode marking_mode = 10;
  if (this->marking_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_marking_mode());
  }

  // float jump_delay_in_us = 11;
  if (!(this->jump_delay_in_us() <= 0 && this->jump_delay_in_us() >= 0)) {
    total_size += 1 + 4;
  }

  // float laser_off_delay_in_us = 12;
  if (!(this->laser_off_delay_in_us() <= 0 && this->laser_off_delay_in_us() >= 0)) {
    total_size += 1 + 4;
  }

  // float laser_on_delay_in_us = 13;
  if (!(this->laser_on_delay_in_us() <= 0 && this->laser_on_delay_in_us() >= 0)) {
    total_size += 1 + 4;
  }

  // float mark_delay_in_us = 14;
  if (!(this->mark_delay_in_us() <= 0 && this->mark_delay_in_us() >= 0)) {
    total_size += 1 + 4;
  }

  // float polygon_delay_in_us = 15;
  if (!(this->polygon_delay_in_us() <= 0 && this->polygon_delay_in_us() >= 0)) {
    total_size += 1 + 4;
  }

  // float time_lag_in_us = 16;
  if (!(this->time_lag_in_us() <= 0 && this->time_lag_in_us() >= 0)) {
    total_size += 2 + 4;
  }

  // float laser_on_shift_in_us = 17;
  if (!(this->laser_on_shift_in_us() <= 0 && this->laser_on_shift_in_us() >= 0)) {
    total_size += 2 + 4;
  }

  // float limit = 18;
  if (!(this->limit() <= 0 && this->limit() >= 0)) {
    total_size += 2 + 4;
  }

  // float n_prev_in_us = 19;
  if (!(this->n_prev_in_us() <= 0 && this->n_prev_in_us() >= 0)) {
    total_size += 2 + 4;
  }

  // float n_post_in_us = 20;
  if (!(this->n_post_in_us() <= 0 && this->n_post_in_us() >= 0)) {
    total_size += 2 + 4;
  }

  // float wob_frequency_in_hz = 21;
  if (!(this->wob_frequency_in_hz() <= 0 && this->wob_frequency_in_hz() >= 0)) {
    total_size += 2 + 4;
  }

  // float wob_amp_long_in_mm = 22;
  if (!(this->wob_amp_long_in_mm() <= 0 && this->wob_amp_long_in_mm() >= 0)) {
    total_size += 2 + 4;
  }

  // float wob_amp_trans_in_mm = 23;
  if (!(this->wob_amp_trans_in_mm() <= 0 && this->wob_amp_trans_in_mm() >= 0)) {
    total_size += 2 + 4;
  }

  // .open_vector_format.MarkingParams.WobbleMode wobble_mode = 24;
  if (this->wobble_mode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_wobble_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarkingParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:open_vector_format.MarkingParams)
  GOOGLE_DCHECK_NE(&from, this);
  const MarkingParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarkingParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:open_vector_format.MarkingParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:open_vector_format.MarkingParams)
    MergeFrom(*source);
  }
}

void MarkingParams::MergeFrom(const MarkingParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.MarkingParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_powergradient()) {
    _internal_mutable_powergradient()->::open_vector_format::PowerGradientParams::MergeFrom(from._internal_powergradient());
  }
  if (!(from.laser_power_in_w() <= 0 && from.laser_power_in_w() >= 0)) {
    _internal_set_laser_power_in_w(from._internal_laser_power_in_w());
  }
  if (!(from.laser_speed_in_mm_per_s() <= 0 && from.laser_speed_in_mm_per_s() >= 0)) {
    _internal_set_laser_speed_in_mm_per_s(from._internal_laser_speed_in_mm_per_s());
  }
  if (!(from.laser_focus_shift_in_mm() <= 0 && from.laser_focus_shift_in_mm() >= 0)) {
    _internal_set_laser_focus_shift_in_mm(from._internal_laser_focus_shift_in_mm());
  }
  if (!(from.point_exposure_time_in_us() <= 0 && from.point_exposure_time_in_us() >= 0)) {
    _internal_set_point_exposure_time_in_us(from._internal_point_exposure_time_in_us());
  }
  if (!(from.jump_speed_in_mm_s() <= 0 && from.jump_speed_in_mm_s() >= 0)) {
    _internal_set_jump_speed_in_mm_s(from._internal_jump_speed_in_mm_s());
  }
  if (!(from.point_exposure_repetitions() <= 0 && from.point_exposure_repetitions() >= 0)) {
    _internal_set_point_exposure_repetitions(from._internal_point_exposure_repetitions());
  }
  if (from.repetition_rate_in_hz() != 0) {
    _internal_set_repetition_rate_in_hz(from._internal_repetition_rate_in_hz());
  }
  if (from.laser_pulses_per_burst() != 0) {
    _internal_set_laser_pulses_per_burst(from._internal_laser_pulses_per_burst());
  }
  if (from.pulsedurationinfemtoseconds() != 0) {
    _internal_set_pulsedurationinfemtoseconds(from._internal_pulsedurationinfemtoseconds());
  }
  if (from.marking_mode() != 0) {
    _internal_set_marking_mode(from._internal_marking_mode());
  }
  if (!(from.jump_delay_in_us() <= 0 && from.jump_delay_in_us() >= 0)) {
    _internal_set_jump_delay_in_us(from._internal_jump_delay_in_us());
  }
  if (!(from.laser_off_delay_in_us() <= 0 && from.laser_off_delay_in_us() >= 0)) {
    _internal_set_laser_off_delay_in_us(from._internal_laser_off_delay_in_us());
  }
  if (!(from.laser_on_delay_in_us() <= 0 && from.laser_on_delay_in_us() >= 0)) {
    _internal_set_laser_on_delay_in_us(from._internal_laser_on_delay_in_us());
  }
  if (!(from.mark_delay_in_us() <= 0 && from.mark_delay_in_us() >= 0)) {
    _internal_set_mark_delay_in_us(from._internal_mark_delay_in_us());
  }
  if (!(from.polygon_delay_in_us() <= 0 && from.polygon_delay_in_us() >= 0)) {
    _internal_set_polygon_delay_in_us(from._internal_polygon_delay_in_us());
  }
  if (!(from.time_lag_in_us() <= 0 && from.time_lag_in_us() >= 0)) {
    _internal_set_time_lag_in_us(from._internal_time_lag_in_us());
  }
  if (!(from.laser_on_shift_in_us() <= 0 && from.laser_on_shift_in_us() >= 0)) {
    _internal_set_laser_on_shift_in_us(from._internal_laser_on_shift_in_us());
  }
  if (!(from.limit() <= 0 && from.limit() >= 0)) {
    _internal_set_limit(from._internal_limit());
  }
  if (!(from.n_prev_in_us() <= 0 && from.n_prev_in_us() >= 0)) {
    _internal_set_n_prev_in_us(from._internal_n_prev_in_us());
  }
  if (!(from.n_post_in_us() <= 0 && from.n_post_in_us() >= 0)) {
    _internal_set_n_post_in_us(from._internal_n_post_in_us());
  }
  if (!(from.wob_frequency_in_hz() <= 0 && from.wob_frequency_in_hz() >= 0)) {
    _internal_set_wob_frequency_in_hz(from._internal_wob_frequency_in_hz());
  }
  if (!(from.wob_amp_long_in_mm() <= 0 && from.wob_amp_long_in_mm() >= 0)) {
    _internal_set_wob_amp_long_in_mm(from._internal_wob_amp_long_in_mm());
  }
  if (!(from.wob_amp_trans_in_mm() <= 0 && from.wob_amp_trans_in_mm() >= 0)) {
    _internal_set_wob_amp_trans_in_mm(from._internal_wob_amp_trans_in_mm());
  }
  if (from.wobble_mode() != 0) {
    _internal_set_wobble_mode(from._internal_wobble_mode());
  }
}

void MarkingParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:open_vector_format.MarkingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarkingParams::CopyFrom(const MarkingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.MarkingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkingParams::IsInitialized() const {
  return true;
}

void MarkingParams::InternalSwap(MarkingParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarkingParams, wobble_mode_)
      + sizeof(MarkingParams::wobble_mode_)
      - PROTOBUF_FIELD_OFFSET(MarkingParams, powergradient_)>(
          reinterpret_cast<char*>(&powergradient_),
          reinterpret_cast<char*>(&other->powergradient_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarkingParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PowerGradientParams::_Internal {
 public:
};

PowerGradientParams::PowerGradientParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.PowerGradientParams)
}
PowerGradientParams::PowerGradientParams(const PowerGradientParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&minpowerinw_, &from.minpowerinw_,
    static_cast<size_t>(reinterpret_cast<char*>(&gradientinwpers_) -
    reinterpret_cast<char*>(&minpowerinw_)) + sizeof(gradientinwpers_));
  // @@protoc_insertion_point(copy_constructor:open_vector_format.PowerGradientParams)
}

void PowerGradientParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&minpowerinw_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gradientinwpers_) -
    reinterpret_cast<char*>(&minpowerinw_)) + sizeof(gradientinwpers_));
}

PowerGradientParams::~PowerGradientParams() {
  // @@protoc_insertion_point(destructor:open_vector_format.PowerGradientParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PowerGradientParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PowerGradientParams::ArenaDtor(void* object) {
  PowerGradientParams* _this = reinterpret_cast< PowerGradientParams* >(object);
  (void)_this;
}
void PowerGradientParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PowerGradientParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PowerGradientParams::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.PowerGradientParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&minpowerinw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gradientinwpers_) -
      reinterpret_cast<char*>(&minpowerinw_)) + sizeof(gradientinwpers_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PowerGradientParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float minPowerInW = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          minpowerinw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gradientInWPerS = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          gradientinwpers_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PowerGradientParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.PowerGradientParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float minPowerInW = 1;
  if (!(this->minpowerinw() <= 0 && this->minpowerinw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_minpowerinw(), target);
  }

  // float gradientInWPerS = 2;
  if (!(this->gradientinwpers() <= 0 && this->gradientinwpers() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_gradientinwpers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.PowerGradientParams)
  return target;
}

size_t PowerGradientParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:open_vector_format.PowerGradientParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float minPowerInW = 1;
  if (!(this->minpowerinw() <= 0 && this->minpowerinw() >= 0)) {
    total_size += 1 + 4;
  }

  // float gradientInWPerS = 2;
  if (!(this->gradientinwpers() <= 0 && this->gradientinwpers() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PowerGradientParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:open_vector_format.PowerGradientParams)
  GOOGLE_DCHECK_NE(&from, this);
  const PowerGradientParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PowerGradientParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:open_vector_format.PowerGradientParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:open_vector_format.PowerGradientParams)
    MergeFrom(*source);
  }
}

void PowerGradientParams::MergeFrom(const PowerGradientParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.PowerGradientParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.minpowerinw() <= 0 && from.minpowerinw() >= 0)) {
    _internal_set_minpowerinw(from._internal_minpowerinw());
  }
  if (!(from.gradientinwpers() <= 0 && from.gradientinwpers() >= 0)) {
    _internal_set_gradientinwpers(from._internal_gradientinwpers());
  }
}

void PowerGradientParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:open_vector_format.PowerGradientParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerGradientParams::CopyFrom(const PowerGradientParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.PowerGradientParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerGradientParams::IsInitialized() const {
  return true;
}

void PowerGradientParams::InternalSwap(PowerGradientParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PowerGradientParams, gradientinwpers_)
      + sizeof(PowerGradientParams::gradientinwpers_)
      - PROTOBUF_FIELD_OFFSET(PowerGradientParams, minpowerinw_)>(
          reinterpret_cast<char*>(&minpowerinw_),
          reinterpret_cast<char*>(&other->minpowerinw_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PowerGradientParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Part_GeometryInfo::_Internal {
 public:
};

Part_GeometryInfo::Part_GeometryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.Part.GeometryInfo)
}
Part_GeometryInfo::Part_GeometryInfo(const Part_GeometryInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&volume_in_mm3_, &from.volume_in_mm3_,
    static_cast<size_t>(reinterpret_cast<char*>(&projected_surface_in_mm2_) -
    reinterpret_cast<char*>(&volume_in_mm3_)) + sizeof(projected_surface_in_mm2_));
  // @@protoc_insertion_point(copy_constructor:open_vector_format.Part.GeometryInfo)
}

void Part_GeometryInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&volume_in_mm3_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&projected_surface_in_mm2_) -
    reinterpret_cast<char*>(&volume_in_mm3_)) + sizeof(projected_surface_in_mm2_));
}

Part_GeometryInfo::~Part_GeometryInfo() {
  // @@protoc_insertion_point(destructor:open_vector_format.Part.GeometryInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Part_GeometryInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Part_GeometryInfo::ArenaDtor(void* object) {
  Part_GeometryInfo* _this = reinterpret_cast< Part_GeometryInfo* >(object);
  (void)_this;
}
void Part_GeometryInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Part_GeometryInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Part_GeometryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.Part.GeometryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&volume_in_mm3_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&projected_surface_in_mm2_) -
      reinterpret_cast<char*>(&volume_in_mm3_)) + sizeof(projected_surface_in_mm2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Part_GeometryInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double volume_in_mm3 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          volume_in_mm3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double support_volume_in_mm3 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          support_volume_in_mm3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double build_height_in_mm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          build_height_in_mm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double surface_area_in_mm2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          surface_area_in_mm2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double projected_surface_in_mm2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          projected_surface_in_mm2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Part_GeometryInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.Part.GeometryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double volume_in_mm3 = 1;
  if (!(this->volume_in_mm3() <= 0 && this->volume_in_mm3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_volume_in_mm3(), target);
  }

  // double support_volume_in_mm3 = 2;
  if (!(this->support_volume_in_mm3() <= 0 && this->support_volume_in_mm3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_support_volume_in_mm3(), target);
  }

  // double build_height_in_mm = 3;
  if (!(this->build_height_in_mm() <= 0 && this->build_height_in_mm() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_build_height_in_mm(), target);
  }

  // double surface_area_in_mm2 = 4;
  if (!(this->surface_area_in_mm2() <= 0 && this->surface_area_in_mm2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_surface_area_in_mm2(), target);
  }

  // double projected_surface_in_mm2 = 5;
  if (!(this->projected_surface_in_mm2() <= 0 && this->projected_surface_in_mm2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_projected_surface_in_mm2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.Part.GeometryInfo)
  return target;
}

size_t Part_GeometryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:open_vector_format.Part.GeometryInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double volume_in_mm3 = 1;
  if (!(this->volume_in_mm3() <= 0 && this->volume_in_mm3() >= 0)) {
    total_size += 1 + 8;
  }

  // double support_volume_in_mm3 = 2;
  if (!(this->support_volume_in_mm3() <= 0 && this->support_volume_in_mm3() >= 0)) {
    total_size += 1 + 8;
  }

  // double build_height_in_mm = 3;
  if (!(this->build_height_in_mm() <= 0 && this->build_height_in_mm() >= 0)) {
    total_size += 1 + 8;
  }

  // double surface_area_in_mm2 = 4;
  if (!(this->surface_area_in_mm2() <= 0 && this->surface_area_in_mm2() >= 0)) {
    total_size += 1 + 8;
  }

  // double projected_surface_in_mm2 = 5;
  if (!(this->projected_surface_in_mm2() <= 0 && this->projected_surface_in_mm2() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Part_GeometryInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:open_vector_format.Part.GeometryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const Part_GeometryInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Part_GeometryInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:open_vector_format.Part.GeometryInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:open_vector_format.Part.GeometryInfo)
    MergeFrom(*source);
  }
}

void Part_GeometryInfo::MergeFrom(const Part_GeometryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.Part.GeometryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.volume_in_mm3() <= 0 && from.volume_in_mm3() >= 0)) {
    _internal_set_volume_in_mm3(from._internal_volume_in_mm3());
  }
  if (!(from.support_volume_in_mm3() <= 0 && from.support_volume_in_mm3() >= 0)) {
    _internal_set_support_volume_in_mm3(from._internal_support_volume_in_mm3());
  }
  if (!(from.build_height_in_mm() <= 0 && from.build_height_in_mm() >= 0)) {
    _internal_set_build_height_in_mm(from._internal_build_height_in_mm());
  }
  if (!(from.surface_area_in_mm2() <= 0 && from.surface_area_in_mm2() >= 0)) {
    _internal_set_surface_area_in_mm2(from._internal_surface_area_in_mm2());
  }
  if (!(from.projected_surface_in_mm2() <= 0 && from.projected_surface_in_mm2() >= 0)) {
    _internal_set_projected_surface_in_mm2(from._internal_projected_surface_in_mm2());
  }
}

void Part_GeometryInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:open_vector_format.Part.GeometryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Part_GeometryInfo::CopyFrom(const Part_GeometryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.Part.GeometryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Part_GeometryInfo::IsInitialized() const {
  return true;
}

void Part_GeometryInfo::InternalSwap(Part_GeometryInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Part_GeometryInfo, projected_surface_in_mm2_)
      + sizeof(Part_GeometryInfo::projected_surface_in_mm2_)
      - PROTOBUF_FIELD_OFFSET(Part_GeometryInfo, volume_in_mm3_)>(
          reinterpret_cast<char*>(&volume_in_mm3_),
          reinterpret_cast<char*>(&other->volume_in_mm3_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Part_GeometryInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Part_Material::_Internal {
 public:
};

Part_Material::Part_Material(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.Part.Material)
}
Part_Material::Part_Material(const Part_Material& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:open_vector_format.Part.Material)
}

void Part_Material::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_ = PROTOBUF_ULONGLONG(0);
}

Part_Material::~Part_Material() {
  // @@protoc_insertion_point(destructor:open_vector_format.Part.Material)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Part_Material::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Part_Material::ArenaDtor(void* object) {
  Part_Material* _this = reinterpret_cast< Part_Material* >(object);
  (void)_this;
}
void Part_Material::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Part_Material::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Part_Material::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.Part.Material)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Part_Material::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "open_vector_format.Part.Material.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Part_Material::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.Part.Material)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "open_vector_format.Part.Material.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.Part.Material)
  return target;
}

size_t Part_Material::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:open_vector_format.Part.Material)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Part_Material::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:open_vector_format.Part.Material)
  GOOGLE_DCHECK_NE(&from, this);
  const Part_Material* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Part_Material>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:open_vector_format.Part.Material)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:open_vector_format.Part.Material)
    MergeFrom(*source);
  }
}

void Part_Material::MergeFrom(const Part_Material& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.Part.Material)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void Part_Material::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:open_vector_format.Part.Material)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Part_Material::CopyFrom(const Part_Material& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.Part.Material)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Part_Material::IsInitialized() const {
  return true;
}

void Part_Material::InternalSwap(Part_Material* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Part_Material::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Part_ProcessStrategy_ProprietaryParam::_Internal {
 public:
};

Part_ProcessStrategy_ProprietaryParam::Part_ProcessStrategy_ProprietaryParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.Part.ProcessStrategy.ProprietaryParam)
}
Part_ProcessStrategy_ProprietaryParam::Part_ProcessStrategy_ProprietaryParam(const Part_ProcessStrategy_ProprietaryParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  param_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_param_name().empty()) {
    param_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_param_name(), 
      GetArena());
  }
  param_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_param_description().empty()) {
    param_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_param_description(), 
      GetArena());
  }
  param_value_ = from.param_value_;
  // @@protoc_insertion_point(copy_constructor:open_vector_format.Part.ProcessStrategy.ProprietaryParam)
}

void Part_ProcessStrategy_ProprietaryParam::SharedCtor() {
param_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
param_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
param_value_ = 0;
}

Part_ProcessStrategy_ProprietaryParam::~Part_ProcessStrategy_ProprietaryParam() {
  // @@protoc_insertion_point(destructor:open_vector_format.Part.ProcessStrategy.ProprietaryParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Part_ProcessStrategy_ProprietaryParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  param_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Part_ProcessStrategy_ProprietaryParam::ArenaDtor(void* object) {
  Part_ProcessStrategy_ProprietaryParam* _this = reinterpret_cast< Part_ProcessStrategy_ProprietaryParam* >(object);
  (void)_this;
}
void Part_ProcessStrategy_ProprietaryParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Part_ProcessStrategy_ProprietaryParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Part_ProcessStrategy_ProprietaryParam::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.Part.ProcessStrategy.ProprietaryParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  param_name_.ClearToEmpty();
  param_description_.ClearToEmpty();
  param_value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Part_ProcessStrategy_ProprietaryParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string param_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_param_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "open_vector_format.Part.ProcessStrategy.ProprietaryParam.param_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double param_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          param_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string param_description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_param_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "open_vector_format.Part.ProcessStrategy.ProprietaryParam.param_description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Part_ProcessStrategy_ProprietaryParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.Part.ProcessStrategy.ProprietaryParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string param_name = 1;
  if (this->param_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_param_name().data(), static_cast<int>(this->_internal_param_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "open_vector_format.Part.ProcessStrategy.ProprietaryParam.param_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_param_name(), target);
  }

  // double param_value = 2;
  if (!(this->param_value() <= 0 && this->param_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_param_value(), target);
  }

  // string param_description = 3;
  if (this->param_description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_param_description().data(), static_cast<int>(this->_internal_param_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "open_vector_format.Part.ProcessStrategy.ProprietaryParam.param_description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_param_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.Part.ProcessStrategy.ProprietaryParam)
  return target;
}

size_t Part_ProcessStrategy_ProprietaryParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:open_vector_format.Part.ProcessStrategy.ProprietaryParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string param_name = 1;
  if (this->param_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_param_name());
  }

  // string param_description = 3;
  if (this->param_description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_param_description());
  }

  // double param_value = 2;
  if (!(this->param_value() <= 0 && this->param_value() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Part_ProcessStrategy_ProprietaryParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:open_vector_format.Part.ProcessStrategy.ProprietaryParam)
  GOOGLE_DCHECK_NE(&from, this);
  const Part_ProcessStrategy_ProprietaryParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Part_ProcessStrategy_ProprietaryParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:open_vector_format.Part.ProcessStrategy.ProprietaryParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:open_vector_format.Part.ProcessStrategy.ProprietaryParam)
    MergeFrom(*source);
  }
}

void Part_ProcessStrategy_ProprietaryParam::MergeFrom(const Part_ProcessStrategy_ProprietaryParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.Part.ProcessStrategy.ProprietaryParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.param_name().size() > 0) {
    _internal_set_param_name(from._internal_param_name());
  }
  if (from.param_description().size() > 0) {
    _internal_set_param_description(from._internal_param_description());
  }
  if (!(from.param_value() <= 0 && from.param_value() >= 0)) {
    _internal_set_param_value(from._internal_param_value());
  }
}

void Part_ProcessStrategy_ProprietaryParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:open_vector_format.Part.ProcessStrategy.ProprietaryParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Part_ProcessStrategy_ProprietaryParam::CopyFrom(const Part_ProcessStrategy_ProprietaryParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.Part.ProcessStrategy.ProprietaryParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Part_ProcessStrategy_ProprietaryParam::IsInitialized() const {
  return true;
}

void Part_ProcessStrategy_ProprietaryParam::InternalSwap(Part_ProcessStrategy_ProprietaryParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  param_name_.Swap(&other->param_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  param_description_.Swap(&other->param_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(param_value_, other->param_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Part_ProcessStrategy_ProprietaryParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Part_ProcessStrategy::_Internal {
 public:
};

Part_ProcessStrategy::Part_ProcessStrategy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  additional_parameters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.Part.ProcessStrategy)
}
Part_ProcessStrategy::Part_ProcessStrategy(const Part_ProcessStrategy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      additional_parameters_(from.additional_parameters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&rot_angle_in_deg_, &from.rot_angle_in_deg_,
    static_cast<size_t>(reinterpret_cast<char*>(&hatching_pattern_) -
    reinterpret_cast<char*>(&rot_angle_in_deg_)) + sizeof(hatching_pattern_));
  // @@protoc_insertion_point(copy_constructor:open_vector_format.Part.ProcessStrategy)
}

void Part_ProcessStrategy::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rot_angle_in_deg_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hatching_pattern_) -
    reinterpret_cast<char*>(&rot_angle_in_deg_)) + sizeof(hatching_pattern_));
}

Part_ProcessStrategy::~Part_ProcessStrategy() {
  // @@protoc_insertion_point(destructor:open_vector_format.Part.ProcessStrategy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Part_ProcessStrategy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Part_ProcessStrategy::ArenaDtor(void* object) {
  Part_ProcessStrategy* _this = reinterpret_cast< Part_ProcessStrategy* >(object);
  (void)_this;
}
void Part_ProcessStrategy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Part_ProcessStrategy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Part_ProcessStrategy::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.Part.ProcessStrategy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_parameters_.Clear();
  name_.ClearToEmpty();
  ::memset(&rot_angle_in_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hatching_pattern_) -
      reinterpret_cast<char*>(&rot_angle_in_deg_)) + sizeof(hatching_pattern_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Part_ProcessStrategy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float rot_angle_in_deg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          rot_angle_in_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float increment_angle_in_deg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          increment_angle_in_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float shift_in_mm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          shift_in_mm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float extend_into_in_mm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          extend_into_in_mm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float layer_thickness_in_mm = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          layer_thickness_in_mm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float hatch_distance_in_mm = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          hatch_distance_in_mm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float hatch_contour_distance_in_mm = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          hatch_contour_distance_in_mm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float overhang_angle_in_deg = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          overhang_angle_in_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float contour_offset_in_mm = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          contour_offset_in_mm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 number_of_contours = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          number_of_contours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float contour_distance_in_mm = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          contour_distance_in_mm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .open_vector_format.Part.ProcessStrategy.HatchingPattern hatching_pattern = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_hatching_pattern(static_cast<::open_vector_format::Part_ProcessStrategy_HatchingPattern>(val));
        } else goto handle_unusual;
        continue;
      // string name = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "open_vector_format.Part.ProcessStrategy.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .open_vector_format.Part.ProcessStrategy.ProprietaryParam additional_parameters = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_additional_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<802>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Part_ProcessStrategy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.Part.ProcessStrategy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float rot_angle_in_deg = 1;
  if (!(this->rot_angle_in_deg() <= 0 && this->rot_angle_in_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_rot_angle_in_deg(), target);
  }

  // float increment_angle_in_deg = 2;
  if (!(this->increment_angle_in_deg() <= 0 && this->increment_angle_in_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_increment_angle_in_deg(), target);
  }

  // float shift_in_mm = 3;
  if (!(this->shift_in_mm() <= 0 && this->shift_in_mm() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_shift_in_mm(), target);
  }

  // float extend_into_in_mm = 4;
  if (!(this->extend_into_in_mm() <= 0 && this->extend_into_in_mm() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_extend_into_in_mm(), target);
  }

  // float layer_thickness_in_mm = 5;
  if (!(this->layer_thickness_in_mm() <= 0 && this->layer_thickness_in_mm() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_layer_thickness_in_mm(), target);
  }

  // float hatch_distance_in_mm = 6;
  if (!(this->hatch_distance_in_mm() <= 0 && this->hatch_distance_in_mm() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_hatch_distance_in_mm(), target);
  }

  // float hatch_contour_distance_in_mm = 7;
  if (!(this->hatch_contour_distance_in_mm() <= 0 && this->hatch_contour_distance_in_mm() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_hatch_contour_distance_in_mm(), target);
  }

  // float overhang_angle_in_deg = 8;
  if (!(this->overhang_angle_in_deg() <= 0 && this->overhang_angle_in_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_overhang_angle_in_deg(), target);
  }

  // float contour_offset_in_mm = 9;
  if (!(this->contour_offset_in_mm() <= 0 && this->contour_offset_in_mm() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_contour_offset_in_mm(), target);
  }

  // int32 number_of_contours = 10;
  if (this->number_of_contours() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_number_of_contours(), target);
  }

  // float contour_distance_in_mm = 11;
  if (!(this->contour_distance_in_mm() <= 0 && this->contour_distance_in_mm() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_contour_distance_in_mm(), target);
  }

  // .open_vector_format.Part.ProcessStrategy.HatchingPattern hatching_pattern = 12;
  if (this->hatching_pattern() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_hatching_pattern(), target);
  }

  // string name = 90;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "open_vector_format.Part.ProcessStrategy.name");
    target = stream->WriteStringMaybeAliased(
        90, this->_internal_name(), target);
  }

  // repeated .open_vector_format.Part.ProcessStrategy.ProprietaryParam additional_parameters = 100;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_parameters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(100, this->_internal_additional_parameters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.Part.ProcessStrategy)
  return target;
}

size_t Part_ProcessStrategy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:open_vector_format.Part.ProcessStrategy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .open_vector_format.Part.ProcessStrategy.ProprietaryParam additional_parameters = 100;
  total_size += 2UL * this->_internal_additional_parameters_size();
  for (const auto& msg : this->additional_parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 90;
  if (this->name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // float rot_angle_in_deg = 1;
  if (!(this->rot_angle_in_deg() <= 0 && this->rot_angle_in_deg() >= 0)) {
    total_size += 1 + 4;
  }

  // float increment_angle_in_deg = 2;
  if (!(this->increment_angle_in_deg() <= 0 && this->increment_angle_in_deg() >= 0)) {
    total_size += 1 + 4;
  }

  // float shift_in_mm = 3;
  if (!(this->shift_in_mm() <= 0 && this->shift_in_mm() >= 0)) {
    total_size += 1 + 4;
  }

  // float extend_into_in_mm = 4;
  if (!(this->extend_into_in_mm() <= 0 && this->extend_into_in_mm() >= 0)) {
    total_size += 1 + 4;
  }

  // float layer_thickness_in_mm = 5;
  if (!(this->layer_thickness_in_mm() <= 0 && this->layer_thickness_in_mm() >= 0)) {
    total_size += 1 + 4;
  }

  // float hatch_distance_in_mm = 6;
  if (!(this->hatch_distance_in_mm() <= 0 && this->hatch_distance_in_mm() >= 0)) {
    total_size += 1 + 4;
  }

  // float hatch_contour_distance_in_mm = 7;
  if (!(this->hatch_contour_distance_in_mm() <= 0 && this->hatch_contour_distance_in_mm() >= 0)) {
    total_size += 1 + 4;
  }

  // float overhang_angle_in_deg = 8;
  if (!(this->overhang_angle_in_deg() <= 0 && this->overhang_angle_in_deg() >= 0)) {
    total_size += 1 + 4;
  }

  // float contour_offset_in_mm = 9;
  if (!(this->contour_offset_in_mm() <= 0 && this->contour_offset_in_mm() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 number_of_contours = 10;
  if (this->number_of_contours() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number_of_contours());
  }

  // float contour_distance_in_mm = 11;
  if (!(this->contour_distance_in_mm() <= 0 && this->contour_distance_in_mm() >= 0)) {
    total_size += 1 + 4;
  }

  // .open_vector_format.Part.ProcessStrategy.HatchingPattern hatching_pattern = 12;
  if (this->hatching_pattern() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_hatching_pattern());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Part_ProcessStrategy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:open_vector_format.Part.ProcessStrategy)
  GOOGLE_DCHECK_NE(&from, this);
  const Part_ProcessStrategy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Part_ProcessStrategy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:open_vector_format.Part.ProcessStrategy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:open_vector_format.Part.ProcessStrategy)
    MergeFrom(*source);
  }
}

void Part_ProcessStrategy::MergeFrom(const Part_ProcessStrategy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.Part.ProcessStrategy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_parameters_.MergeFrom(from.additional_parameters_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (!(from.rot_angle_in_deg() <= 0 && from.rot_angle_in_deg() >= 0)) {
    _internal_set_rot_angle_in_deg(from._internal_rot_angle_in_deg());
  }
  if (!(from.increment_angle_in_deg() <= 0 && from.increment_angle_in_deg() >= 0)) {
    _internal_set_increment_angle_in_deg(from._internal_increment_angle_in_deg());
  }
  if (!(from.shift_in_mm() <= 0 && from.shift_in_mm() >= 0)) {
    _internal_set_shift_in_mm(from._internal_shift_in_mm());
  }
  if (!(from.extend_into_in_mm() <= 0 && from.extend_into_in_mm() >= 0)) {
    _internal_set_extend_into_in_mm(from._internal_extend_into_in_mm());
  }
  if (!(from.layer_thickness_in_mm() <= 0 && from.layer_thickness_in_mm() >= 0)) {
    _internal_set_layer_thickness_in_mm(from._internal_layer_thickness_in_mm());
  }
  if (!(from.hatch_distance_in_mm() <= 0 && from.hatch_distance_in_mm() >= 0)) {
    _internal_set_hatch_distance_in_mm(from._internal_hatch_distance_in_mm());
  }
  if (!(from.hatch_contour_distance_in_mm() <= 0 && from.hatch_contour_distance_in_mm() >= 0)) {
    _internal_set_hatch_contour_distance_in_mm(from._internal_hatch_contour_distance_in_mm());
  }
  if (!(from.overhang_angle_in_deg() <= 0 && from.overhang_angle_in_deg() >= 0)) {
    _internal_set_overhang_angle_in_deg(from._internal_overhang_angle_in_deg());
  }
  if (!(from.contour_offset_in_mm() <= 0 && from.contour_offset_in_mm() >= 0)) {
    _internal_set_contour_offset_in_mm(from._internal_contour_offset_in_mm());
  }
  if (from.number_of_contours() != 0) {
    _internal_set_number_of_contours(from._internal_number_of_contours());
  }
  if (!(from.contour_distance_in_mm() <= 0 && from.contour_distance_in_mm() >= 0)) {
    _internal_set_contour_distance_in_mm(from._internal_contour_distance_in_mm());
  }
  if (from.hatching_pattern() != 0) {
    _internal_set_hatching_pattern(from._internal_hatching_pattern());
  }
}

void Part_ProcessStrategy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:open_vector_format.Part.ProcessStrategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Part_ProcessStrategy::CopyFrom(const Part_ProcessStrategy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.Part.ProcessStrategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Part_ProcessStrategy::IsInitialized() const {
  return true;
}

void Part_ProcessStrategy::InternalSwap(Part_ProcessStrategy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  additional_parameters_.InternalSwap(&other->additional_parameters_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy, hatching_pattern_)
      + sizeof(Part_ProcessStrategy::hatching_pattern_)
      - PROTOBUF_FIELD_OFFSET(Part_ProcessStrategy, rot_angle_in_deg_)>(
          reinterpret_cast<char*>(&rot_angle_in_deg_),
          reinterpret_cast<char*>(&other->rot_angle_in_deg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Part_ProcessStrategy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Part::_Internal {
 public:
  static const ::open_vector_format::Part_GeometryInfo& geometry_info(const Part* msg);
  static const ::open_vector_format::Part_Material& material(const Part* msg);
  static const ::open_vector_format::Part_ProcessStrategy& process_strategy(const Part* msg);
};

const ::open_vector_format::Part_GeometryInfo&
Part::_Internal::geometry_info(const Part* msg) {
  return *msg->geometry_info_;
}
const ::open_vector_format::Part_Material&
Part::_Internal::material(const Part* msg) {
  return *msg->material_;
}
const ::open_vector_format::Part_ProcessStrategy&
Part::_Internal::process_strategy(const Part* msg) {
  return *msg->process_strategy_;
}
Part::Part(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.Part)
}
Part::Part(const Part& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_geometry_info()) {
    geometry_info_ = new ::open_vector_format::Part_GeometryInfo(*from.geometry_info_);
  } else {
    geometry_info_ = nullptr;
  }
  if (from._internal_has_material()) {
    material_ = new ::open_vector_format::Part_Material(*from.material_);
  } else {
    material_ = nullptr;
  }
  if (from._internal_has_process_strategy()) {
    process_strategy_ = new ::open_vector_format::Part_ProcessStrategy(*from.process_strategy_);
  } else {
    process_strategy_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:open_vector_format.Part)
}

void Part::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&geometry_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&process_strategy_) -
    reinterpret_cast<char*>(&geometry_info_)) + sizeof(process_strategy_));
}

Part::~Part() {
  // @@protoc_insertion_point(destructor:open_vector_format.Part)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Part::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete geometry_info_;
  if (this != internal_default_instance()) delete material_;
  if (this != internal_default_instance()) delete process_strategy_;
}

void Part::ArenaDtor(void* object) {
  Part* _this = reinterpret_cast< Part* >(object);
  (void)_this;
}
void Part::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Part::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Part::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.Part)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArena() == nullptr && geometry_info_ != nullptr) {
    delete geometry_info_;
  }
  geometry_info_ = nullptr;
  if (GetArena() == nullptr && material_ != nullptr) {
    delete material_;
  }
  material_ = nullptr;
  if (GetArena() == nullptr && process_strategy_ != nullptr) {
    delete process_strategy_;
  }
  process_strategy_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Part::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "open_vector_format.Part.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .open_vector_format.Part.GeometryInfo geometry_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_geometry_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .open_vector_format.Part.Material material = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_material(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .open_vector_format.Part.ProcessStrategy process_strategy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_process_strategy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Part::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.Part)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "open_vector_format.Part.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .open_vector_format.Part.GeometryInfo geometry_info = 2;
  if (this->has_geometry_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::geometry_info(this), target, stream);
  }

  // .open_vector_format.Part.Material material = 3;
  if (this->has_material()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::material(this), target, stream);
  }

  // .open_vector_format.Part.ProcessStrategy process_strategy = 4;
  if (this->has_process_strategy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::process_strategy(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.Part)
  return target;
}

size_t Part::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:open_vector_format.Part)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .open_vector_format.Part.GeometryInfo geometry_info = 2;
  if (this->has_geometry_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *geometry_info_);
  }

  // .open_vector_format.Part.Material material = 3;
  if (this->has_material()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *material_);
  }

  // .open_vector_format.Part.ProcessStrategy process_strategy = 4;
  if (this->has_process_strategy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *process_strategy_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Part::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:open_vector_format.Part)
  GOOGLE_DCHECK_NE(&from, this);
  const Part* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Part>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:open_vector_format.Part)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:open_vector_format.Part)
    MergeFrom(*source);
  }
}

void Part::MergeFrom(const Part& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.Part)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_geometry_info()) {
    _internal_mutable_geometry_info()->::open_vector_format::Part_GeometryInfo::MergeFrom(from._internal_geometry_info());
  }
  if (from.has_material()) {
    _internal_mutable_material()->::open_vector_format::Part_Material::MergeFrom(from._internal_material());
  }
  if (from.has_process_strategy()) {
    _internal_mutable_process_strategy()->::open_vector_format::Part_ProcessStrategy::MergeFrom(from._internal_process_strategy());
  }
}

void Part::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:open_vector_format.Part)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Part::CopyFrom(const Part& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.Part)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Part::IsInitialized() const {
  return true;
}

void Part::InternalSwap(Part* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Part, process_strategy_)
      + sizeof(Part::process_strategy_)
      - PROTOBUF_FIELD_OFFSET(Part, geometry_info_)>(
          reinterpret_cast<char*>(&geometry_info_),
          reinterpret_cast<char*>(&other->geometry_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Part::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse::WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse() {}
WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse::WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse::MergeFrom(const WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class WorkPlane_WorkPlaneMetaData_closedContour::_Internal {
 public:
};

WorkPlane_WorkPlaneMetaData_closedContour::WorkPlane_WorkPlaneMetaData_closedContour(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  contour_section_vector_block_indices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour)
}
WorkPlane_WorkPlaneMetaData_closedContour::WorkPlane_WorkPlaneMetaData_closedContour(const WorkPlane_WorkPlaneMetaData_closedContour& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      contour_section_vector_block_indices_(from.contour_section_vector_block_indices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&area_in_mm_2_, &from.area_in_mm_2_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_in_mm_) -
    reinterpret_cast<char*>(&area_in_mm_2_)) + sizeof(length_in_mm_));
  // @@protoc_insertion_point(copy_constructor:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour)
}

void WorkPlane_WorkPlaneMetaData_closedContour::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&area_in_mm_2_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&length_in_mm_) -
    reinterpret_cast<char*>(&area_in_mm_2_)) + sizeof(length_in_mm_));
}

WorkPlane_WorkPlaneMetaData_closedContour::~WorkPlane_WorkPlaneMetaData_closedContour() {
  // @@protoc_insertion_point(destructor:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkPlane_WorkPlaneMetaData_closedContour::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WorkPlane_WorkPlaneMetaData_closedContour::ArenaDtor(void* object) {
  WorkPlane_WorkPlaneMetaData_closedContour* _this = reinterpret_cast< WorkPlane_WorkPlaneMetaData_closedContour* >(object);
  (void)_this;
}
void WorkPlane_WorkPlaneMetaData_closedContour::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkPlane_WorkPlaneMetaData_closedContour::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkPlane_WorkPlaneMetaData_closedContour::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contour_section_vector_block_indices_.Clear();
  ::memset(&area_in_mm_2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_in_mm_) -
      reinterpret_cast<char*>(&area_in_mm_2_)) + sizeof(length_in_mm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkPlane_WorkPlaneMetaData_closedContour::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 contour_section_vector_block_indices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_contour_section_vector_block_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_contour_section_vector_block_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float area_in_mm_2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          area_in_mm_2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float length_in_mm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          length_in_mm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkPlane_WorkPlaneMetaData_closedContour::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 contour_section_vector_block_indices = 1;
  {
    int byte_size = _contour_section_vector_block_indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_contour_section_vector_block_indices(), byte_size, target);
    }
  }

  // float area_in_mm_2 = 2;
  if (!(this->area_in_mm_2() <= 0 && this->area_in_mm_2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_area_in_mm_2(), target);
  }

  // float length_in_mm = 3;
  if (!(this->length_in_mm() <= 0 && this->length_in_mm() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_length_in_mm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour)
  return target;
}

size_t WorkPlane_WorkPlaneMetaData_closedContour::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 contour_section_vector_block_indices = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->contour_section_vector_block_indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _contour_section_vector_block_indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // float area_in_mm_2 = 2;
  if (!(this->area_in_mm_2() <= 0 && this->area_in_mm_2() >= 0)) {
    total_size += 1 + 4;
  }

  // float length_in_mm = 3;
  if (!(this->length_in_mm() <= 0 && this->length_in_mm() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkPlane_WorkPlaneMetaData_closedContour::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkPlane_WorkPlaneMetaData_closedContour* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkPlane_WorkPlaneMetaData_closedContour>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour)
    MergeFrom(*source);
  }
}

void WorkPlane_WorkPlaneMetaData_closedContour::MergeFrom(const WorkPlane_WorkPlaneMetaData_closedContour& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contour_section_vector_block_indices_.MergeFrom(from.contour_section_vector_block_indices_);
  if (!(from.area_in_mm_2() <= 0 && from.area_in_mm_2() >= 0)) {
    _internal_set_area_in_mm_2(from._internal_area_in_mm_2());
  }
  if (!(from.length_in_mm() <= 0 && from.length_in_mm() >= 0)) {
    _internal_set_length_in_mm(from._internal_length_in_mm());
  }
}

void WorkPlane_WorkPlaneMetaData_closedContour::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkPlane_WorkPlaneMetaData_closedContour::CopyFrom(const WorkPlane_WorkPlaneMetaData_closedContour& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkPlane_WorkPlaneMetaData_closedContour::IsInitialized() const {
  return true;
}

void WorkPlane_WorkPlaneMetaData_closedContour::InternalSwap(WorkPlane_WorkPlaneMetaData_closedContour* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  contour_section_vector_block_indices_.InternalSwap(&other->contour_section_vector_block_indices_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData_closedContour, length_in_mm_)
      + sizeof(WorkPlane_WorkPlaneMetaData_closedContour::length_in_mm_)
      - PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData_closedContour, area_in_mm_2_)>(
          reinterpret_cast<char*>(&area_in_mm_2_),
          reinterpret_cast<char*>(&other->area_in_mm_2_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkPlane_WorkPlaneMetaData_closedContour::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WorkPlane_WorkPlaneMetaData::_Internal {
 public:
};

WorkPlane_WorkPlaneMetaData::WorkPlane_WorkPlaneMetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  patches_map_(arena),
  contours_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.WorkPlane.WorkPlaneMetaData)
}
WorkPlane_WorkPlaneMetaData::WorkPlane_WorkPlaneMetaData(const WorkPlane_WorkPlaneMetaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      contours_(from.contours_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  patches_map_.MergeFrom(from.patches_map_);
  ::memcpy(&total_scan_distance_in_mm_, &from.total_scan_distance_in_mm_,
    static_cast<size_t>(reinterpret_cast<char*>(&minpower_) -
    reinterpret_cast<char*>(&total_scan_distance_in_mm_)) + sizeof(minpower_));
  // @@protoc_insertion_point(copy_constructor:open_vector_format.WorkPlane.WorkPlaneMetaData)
}

void WorkPlane_WorkPlaneMetaData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_scan_distance_in_mm_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&minpower_) -
    reinterpret_cast<char*>(&total_scan_distance_in_mm_)) + sizeof(minpower_));
}

WorkPlane_WorkPlaneMetaData::~WorkPlane_WorkPlaneMetaData() {
  // @@protoc_insertion_point(destructor:open_vector_format.WorkPlane.WorkPlaneMetaData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkPlane_WorkPlaneMetaData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WorkPlane_WorkPlaneMetaData::ArenaDtor(void* object) {
  WorkPlane_WorkPlaneMetaData* _this = reinterpret_cast< WorkPlane_WorkPlaneMetaData* >(object);
  (void)_this;
}
void WorkPlane_WorkPlaneMetaData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkPlane_WorkPlaneMetaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkPlane_WorkPlaneMetaData::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.WorkPlane.WorkPlaneMetaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  patches_map_.Clear();
  contours_.Clear();
  ::memset(&total_scan_distance_in_mm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minpower_) -
      reinterpret_cast<char*>(&total_scan_distance_in_mm_)) + sizeof(minpower_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkPlane_WorkPlaneMetaData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double total_scan_distance_in_mm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          total_scan_distance_in_mm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double total_jump_distance_in_mm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          total_jump_distance_in_mm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // map<int32, .open_vector_format.WorkPlane.Patch> patches_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&patches_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // float maxPower = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          maxpower_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float minPower = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          minpower_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour contours = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contours(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkPlane_WorkPlaneMetaData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.WorkPlane.WorkPlaneMetaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double total_scan_distance_in_mm = 1;
  if (!(this->total_scan_distance_in_mm() <= 0 && this->total_scan_distance_in_mm() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_total_scan_distance_in_mm(), target);
  }

  // double total_jump_distance_in_mm = 2;
  if (!(this->total_jump_distance_in_mm() <= 0 && this->total_jump_distance_in_mm() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_total_jump_distance_in_mm(), target);
  }

  // map<int32, .open_vector_format.WorkPlane.Patch> patches_map = 3;
  if (!this->_internal_patches_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::WorkPlane_Patch >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_patches_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_patches_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::WorkPlane_Patch >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::WorkPlane_Patch >::const_iterator
          it = this->_internal_patches_map().begin();
          it != this->_internal_patches_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::WorkPlane_Patch >::const_iterator
          it = this->_internal_patches_map().begin();
          it != this->_internal_patches_map().end(); ++it) {
        target = WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
      }
    }
  }

  // float maxPower = 4;
  if (!(this->maxpower() <= 0 && this->maxpower() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_maxpower(), target);
  }

  // float minPower = 5;
  if (!(this->minpower() <= 0 && this->minpower() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_minpower(), target);
  }

  // repeated .open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour contours = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contours_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_contours(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.WorkPlane.WorkPlaneMetaData)
  return target;
}

size_t WorkPlane_WorkPlaneMetaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:open_vector_format.WorkPlane.WorkPlaneMetaData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .open_vector_format.WorkPlane.Patch> patches_map = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_patches_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::WorkPlane_Patch >::const_iterator
      it = this->_internal_patches_map().begin();
      it != this->_internal_patches_map().end(); ++it) {
    total_size += WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour contours = 6;
  total_size += 1UL * this->_internal_contours_size();
  for (const auto& msg : this->contours_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // double total_scan_distance_in_mm = 1;
  if (!(this->total_scan_distance_in_mm() <= 0 && this->total_scan_distance_in_mm() >= 0)) {
    total_size += 1 + 8;
  }

  // double total_jump_distance_in_mm = 2;
  if (!(this->total_jump_distance_in_mm() <= 0 && this->total_jump_distance_in_mm() >= 0)) {
    total_size += 1 + 8;
  }

  // float maxPower = 4;
  if (!(this->maxpower() <= 0 && this->maxpower() >= 0)) {
    total_size += 1 + 4;
  }

  // float minPower = 5;
  if (!(this->minpower() <= 0 && this->minpower() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkPlane_WorkPlaneMetaData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:open_vector_format.WorkPlane.WorkPlaneMetaData)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkPlane_WorkPlaneMetaData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkPlane_WorkPlaneMetaData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:open_vector_format.WorkPlane.WorkPlaneMetaData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:open_vector_format.WorkPlane.WorkPlaneMetaData)
    MergeFrom(*source);
  }
}

void WorkPlane_WorkPlaneMetaData::MergeFrom(const WorkPlane_WorkPlaneMetaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.WorkPlane.WorkPlaneMetaData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  patches_map_.MergeFrom(from.patches_map_);
  contours_.MergeFrom(from.contours_);
  if (!(from.total_scan_distance_in_mm() <= 0 && from.total_scan_distance_in_mm() >= 0)) {
    _internal_set_total_scan_distance_in_mm(from._internal_total_scan_distance_in_mm());
  }
  if (!(from.total_jump_distance_in_mm() <= 0 && from.total_jump_distance_in_mm() >= 0)) {
    _internal_set_total_jump_distance_in_mm(from._internal_total_jump_distance_in_mm());
  }
  if (!(from.maxpower() <= 0 && from.maxpower() >= 0)) {
    _internal_set_maxpower(from._internal_maxpower());
  }
  if (!(from.minpower() <= 0 && from.minpower() >= 0)) {
    _internal_set_minpower(from._internal_minpower());
  }
}

void WorkPlane_WorkPlaneMetaData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:open_vector_format.WorkPlane.WorkPlaneMetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkPlane_WorkPlaneMetaData::CopyFrom(const WorkPlane_WorkPlaneMetaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.WorkPlane.WorkPlaneMetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkPlane_WorkPlaneMetaData::IsInitialized() const {
  return true;
}

void WorkPlane_WorkPlaneMetaData::InternalSwap(WorkPlane_WorkPlaneMetaData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  patches_map_.Swap(&other->patches_map_);
  contours_.InternalSwap(&other->contours_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData, minpower_)
      + sizeof(WorkPlane_WorkPlaneMetaData::minpower_)
      - PROTOBUF_FIELD_OFFSET(WorkPlane_WorkPlaneMetaData, total_scan_distance_in_mm_)>(
          reinterpret_cast<char*>(&total_scan_distance_in_mm_),
          reinterpret_cast<char*>(&other->total_scan_distance_in_mm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkPlane_WorkPlaneMetaData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WorkPlane_Patch::_Internal {
 public:
  static const ::open_vector_format::VectorBlock_LineSequence& outer_contour(const WorkPlane_Patch* msg);
};

const ::open_vector_format::VectorBlock_LineSequence&
WorkPlane_Patch::_Internal::outer_contour(const WorkPlane_Patch* msg) {
  return *msg->outer_contour_;
}
WorkPlane_Patch::WorkPlane_Patch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.WorkPlane.Patch)
}
WorkPlane_Patch::WorkPlane_Patch(const WorkPlane_Patch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_outer_contour()) {
    outer_contour_ = new ::open_vector_format::VectorBlock_LineSequence(*from.outer_contour_);
  } else {
    outer_contour_ = nullptr;
  }
  ::memcpy(&u_, &from.u_,
    static_cast<size_t>(reinterpret_cast<char*>(&layer_id_) -
    reinterpret_cast<char*>(&u_)) + sizeof(layer_id_));
  // @@protoc_insertion_point(copy_constructor:open_vector_format.WorkPlane.Patch)
}

void WorkPlane_Patch::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&outer_contour_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&layer_id_) -
    reinterpret_cast<char*>(&outer_contour_)) + sizeof(layer_id_));
}

WorkPlane_Patch::~WorkPlane_Patch() {
  // @@protoc_insertion_point(destructor:open_vector_format.WorkPlane.Patch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkPlane_Patch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete outer_contour_;
}

void WorkPlane_Patch::ArenaDtor(void* object) {
  WorkPlane_Patch* _this = reinterpret_cast< WorkPlane_Patch* >(object);
  (void)_this;
}
void WorkPlane_Patch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkPlane_Patch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkPlane_Patch::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.WorkPlane.Patch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && outer_contour_ != nullptr) {
    delete outer_contour_;
  }
  outer_contour_ = nullptr;
  ::memset(&u_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&layer_id_) -
      reinterpret_cast<char*>(&u_)) + sizeof(layer_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkPlane_Patch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .open_vector_format.VectorBlock.LineSequence outer_contour = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_outer_contour(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float u = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          u_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float v = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 layer_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          layer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkPlane_Patch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.WorkPlane.Patch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .open_vector_format.VectorBlock.LineSequence outer_contour = 1;
  if (this->has_outer_contour()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::outer_contour(this), target, stream);
  }

  // float u = 2;
  if (!(this->u() <= 0 && this->u() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_u(), target);
  }

  // float v = 3;
  if (!(this->v() <= 0 && this->v() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_v(), target);
  }

  // int32 layer_id = 4;
  if (this->layer_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_layer_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.WorkPlane.Patch)
  return target;
}

size_t WorkPlane_Patch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:open_vector_format.WorkPlane.Patch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .open_vector_format.VectorBlock.LineSequence outer_contour = 1;
  if (this->has_outer_contour()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *outer_contour_);
  }

  // float u = 2;
  if (!(this->u() <= 0 && this->u() >= 0)) {
    total_size += 1 + 4;
  }

  // float v = 3;
  if (!(this->v() <= 0 && this->v() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 layer_id = 4;
  if (this->layer_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_layer_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkPlane_Patch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:open_vector_format.WorkPlane.Patch)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkPlane_Patch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkPlane_Patch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:open_vector_format.WorkPlane.Patch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:open_vector_format.WorkPlane.Patch)
    MergeFrom(*source);
  }
}

void WorkPlane_Patch::MergeFrom(const WorkPlane_Patch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.WorkPlane.Patch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_outer_contour()) {
    _internal_mutable_outer_contour()->::open_vector_format::VectorBlock_LineSequence::MergeFrom(from._internal_outer_contour());
  }
  if (!(from.u() <= 0 && from.u() >= 0)) {
    _internal_set_u(from._internal_u());
  }
  if (!(from.v() <= 0 && from.v() >= 0)) {
    _internal_set_v(from._internal_v());
  }
  if (from.layer_id() != 0) {
    _internal_set_layer_id(from._internal_layer_id());
  }
}

void WorkPlane_Patch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:open_vector_format.WorkPlane.Patch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkPlane_Patch::CopyFrom(const WorkPlane_Patch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.WorkPlane.Patch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkPlane_Patch::IsInitialized() const {
  return true;
}

void WorkPlane_Patch::InternalSwap(WorkPlane_Patch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkPlane_Patch, layer_id_)
      + sizeof(WorkPlane_Patch::layer_id_)
      - PROTOBUF_FIELD_OFFSET(WorkPlane_Patch, outer_contour_)>(
          reinterpret_cast<char*>(&outer_contour_),
          reinterpret_cast<char*>(&other->outer_contour_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkPlane_Patch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WorkPlane::_Internal {
 public:
  static const ::open_vector_format::WorkPlane_WorkPlaneMetaData& meta_data(const WorkPlane* msg);
};

const ::open_vector_format::WorkPlane_WorkPlaneMetaData&
WorkPlane::_Internal::meta_data(const WorkPlane* msg) {
  return *msg->meta_data_;
}
WorkPlane::WorkPlane(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vector_blocks_(arena),
  additional_axis_positions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.WorkPlane)
}
WorkPlane::WorkPlane(const WorkPlane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vector_blocks_(from.vector_blocks_),
      additional_axis_positions_(from.additional_axis_positions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  machine_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_machine_type().empty()) {
    machine_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_machine_type(), 
      GetArena());
  }
  if (from._internal_has_meta_data()) {
    meta_data_ = new ::open_vector_format::WorkPlane_WorkPlaneMetaData(*from.meta_data_);
  } else {
    meta_data_ = nullptr;
  }
  ::memcpy(&x_pos_in_mm_, &from.x_pos_in_mm_,
    static_cast<size_t>(reinterpret_cast<char*>(&work_plane_number_) -
    reinterpret_cast<char*>(&x_pos_in_mm_)) + sizeof(work_plane_number_));
  // @@protoc_insertion_point(copy_constructor:open_vector_format.WorkPlane)
}

void WorkPlane::SharedCtor() {
machine_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&meta_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&work_plane_number_) -
    reinterpret_cast<char*>(&meta_data_)) + sizeof(work_plane_number_));
}

WorkPlane::~WorkPlane() {
  // @@protoc_insertion_point(destructor:open_vector_format.WorkPlane)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkPlane::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  machine_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete meta_data_;
}

void WorkPlane::ArenaDtor(void* object) {
  WorkPlane* _this = reinterpret_cast< WorkPlane* >(object);
  (void)_this;
}
void WorkPlane::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkPlane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkPlane::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.WorkPlane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vector_blocks_.Clear();
  additional_axis_positions_.Clear();
  machine_type_.ClearToEmpty();
  if (GetArena() == nullptr && meta_data_ != nullptr) {
    delete meta_data_;
  }
  meta_data_ = nullptr;
  ::memset(&x_pos_in_mm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&work_plane_number_) -
      reinterpret_cast<char*>(&x_pos_in_mm_)) + sizeof(work_plane_number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkPlane::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .open_vector_format.VectorBlock vector_blocks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vector_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // float x_pos_in_mm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_pos_in_mm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y_pos_in_mm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_pos_in_mm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z_pos_in_mm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          z_pos_in_mm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float x_rot_in_deg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          x_rot_in_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y_rot_in_deg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          y_rot_in_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z_rot_in_deg = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          z_rot_in_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 num_blocks = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          num_blocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 repeats = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          repeats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 work_plane_number = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          work_plane_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string machine_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_machine_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "open_vector_format.WorkPlane.machine_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float additional_axis_positions = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_additional_axis_positions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101) {
          _internal_add_additional_axis_positions(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .open_vector_format.WorkPlane.WorkPlaneMetaData meta_data = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkPlane::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.WorkPlane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .open_vector_format.VectorBlock vector_blocks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vector_blocks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vector_blocks(i), target, stream);
  }

  // float x_pos_in_mm = 2;
  if (!(this->x_pos_in_mm() <= 0 && this->x_pos_in_mm() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x_pos_in_mm(), target);
  }

  // float y_pos_in_mm = 3;
  if (!(this->y_pos_in_mm() <= 0 && this->y_pos_in_mm() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y_pos_in_mm(), target);
  }

  // float z_pos_in_mm = 4;
  if (!(this->z_pos_in_mm() <= 0 && this->z_pos_in_mm() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_z_pos_in_mm(), target);
  }

  // float x_rot_in_deg = 5;
  if (!(this->x_rot_in_deg() <= 0 && this->x_rot_in_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_x_rot_in_deg(), target);
  }

  // float y_rot_in_deg = 6;
  if (!(this->y_rot_in_deg() <= 0 && this->y_rot_in_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_y_rot_in_deg(), target);
  }

  // float z_rot_in_deg = 7;
  if (!(this->z_rot_in_deg() <= 0 && this->z_rot_in_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_z_rot_in_deg(), target);
  }

  // int32 num_blocks = 8;
  if (this->num_blocks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_num_blocks(), target);
  }

  // uint32 repeats = 9;
  if (this->repeats() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_repeats(), target);
  }

  // int32 work_plane_number = 10;
  if (this->work_plane_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_work_plane_number(), target);
  }

  // string machine_type = 11;
  if (this->machine_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_machine_type().data(), static_cast<int>(this->_internal_machine_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "open_vector_format.WorkPlane.machine_type");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_machine_type(), target);
  }

  // repeated float additional_axis_positions = 12;
  if (this->_internal_additional_axis_positions_size() > 0) {
    target = stream->WriteFixedPacked(12, _internal_additional_axis_positions(), target);
  }

  // .open_vector_format.WorkPlane.WorkPlaneMetaData meta_data = 13;
  if (this->has_meta_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::meta_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.WorkPlane)
  return target;
}

size_t WorkPlane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:open_vector_format.WorkPlane)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .open_vector_format.VectorBlock vector_blocks = 1;
  total_size += 1UL * this->_internal_vector_blocks_size();
  for (const auto& msg : this->vector_blocks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float additional_axis_positions = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_additional_axis_positions_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _additional_axis_positions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string machine_type = 11;
  if (this->machine_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_machine_type());
  }

  // .open_vector_format.WorkPlane.WorkPlaneMetaData meta_data = 13;
  if (this->has_meta_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_data_);
  }

  // float x_pos_in_mm = 2;
  if (!(this->x_pos_in_mm() <= 0 && this->x_pos_in_mm() >= 0)) {
    total_size += 1 + 4;
  }

  // float y_pos_in_mm = 3;
  if (!(this->y_pos_in_mm() <= 0 && this->y_pos_in_mm() >= 0)) {
    total_size += 1 + 4;
  }

  // float z_pos_in_mm = 4;
  if (!(this->z_pos_in_mm() <= 0 && this->z_pos_in_mm() >= 0)) {
    total_size += 1 + 4;
  }

  // float x_rot_in_deg = 5;
  if (!(this->x_rot_in_deg() <= 0 && this->x_rot_in_deg() >= 0)) {
    total_size += 1 + 4;
  }

  // float y_rot_in_deg = 6;
  if (!(this->y_rot_in_deg() <= 0 && this->y_rot_in_deg() >= 0)) {
    total_size += 1 + 4;
  }

  // float z_rot_in_deg = 7;
  if (!(this->z_rot_in_deg() <= 0 && this->z_rot_in_deg() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 num_blocks = 8;
  if (this->num_blocks() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_blocks());
  }

  // uint32 repeats = 9;
  if (this->repeats() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_repeats());
  }

  // int32 work_plane_number = 10;
  if (this->work_plane_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_work_plane_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkPlane::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:open_vector_format.WorkPlane)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkPlane* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkPlane>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:open_vector_format.WorkPlane)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:open_vector_format.WorkPlane)
    MergeFrom(*source);
  }
}

void WorkPlane::MergeFrom(const WorkPlane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.WorkPlane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vector_blocks_.MergeFrom(from.vector_blocks_);
  additional_axis_positions_.MergeFrom(from.additional_axis_positions_);
  if (from.machine_type().size() > 0) {
    _internal_set_machine_type(from._internal_machine_type());
  }
  if (from.has_meta_data()) {
    _internal_mutable_meta_data()->::open_vector_format::WorkPlane_WorkPlaneMetaData::MergeFrom(from._internal_meta_data());
  }
  if (!(from.x_pos_in_mm() <= 0 && from.x_pos_in_mm() >= 0)) {
    _internal_set_x_pos_in_mm(from._internal_x_pos_in_mm());
  }
  if (!(from.y_pos_in_mm() <= 0 && from.y_pos_in_mm() >= 0)) {
    _internal_set_y_pos_in_mm(from._internal_y_pos_in_mm());
  }
  if (!(from.z_pos_in_mm() <= 0 && from.z_pos_in_mm() >= 0)) {
    _internal_set_z_pos_in_mm(from._internal_z_pos_in_mm());
  }
  if (!(from.x_rot_in_deg() <= 0 && from.x_rot_in_deg() >= 0)) {
    _internal_set_x_rot_in_deg(from._internal_x_rot_in_deg());
  }
  if (!(from.y_rot_in_deg() <= 0 && from.y_rot_in_deg() >= 0)) {
    _internal_set_y_rot_in_deg(from._internal_y_rot_in_deg());
  }
  if (!(from.z_rot_in_deg() <= 0 && from.z_rot_in_deg() >= 0)) {
    _internal_set_z_rot_in_deg(from._internal_z_rot_in_deg());
  }
  if (from.num_blocks() != 0) {
    _internal_set_num_blocks(from._internal_num_blocks());
  }
  if (from.repeats() != 0) {
    _internal_set_repeats(from._internal_repeats());
  }
  if (from.work_plane_number() != 0) {
    _internal_set_work_plane_number(from._internal_work_plane_number());
  }
}

void WorkPlane::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:open_vector_format.WorkPlane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkPlane::CopyFrom(const WorkPlane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.WorkPlane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkPlane::IsInitialized() const {
  return true;
}

void WorkPlane::InternalSwap(WorkPlane* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vector_blocks_.InternalSwap(&other->vector_blocks_);
  additional_axis_positions_.InternalSwap(&other->additional_axis_positions_);
  machine_type_.Swap(&other->machine_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkPlane, work_plane_number_)
      + sizeof(WorkPlane::work_plane_number_)
      - PROTOBUF_FIELD_OFFSET(WorkPlane, meta_data_)>(
          reinterpret_cast<char*>(&meta_data_),
          reinterpret_cast<char*>(&other->meta_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkPlane::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VectorBlock_VectorBlockMetaData::_Internal {
 public:
};

VectorBlock_VectorBlockMetaData::VectorBlock_VectorBlockMetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.VectorBlock.VectorBlockMetaData)
}
VectorBlock_VectorBlockMetaData::VectorBlock_VectorBlockMetaData(const VectorBlock_VectorBlockMetaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_scan_distance_in_mm_, &from.total_scan_distance_in_mm_,
    static_cast<size_t>(reinterpret_cast<char*>(&contour_index_) -
    reinterpret_cast<char*>(&total_scan_distance_in_mm_)) + sizeof(contour_index_));
  // @@protoc_insertion_point(copy_constructor:open_vector_format.VectorBlock.VectorBlockMetaData)
}

void VectorBlock_VectorBlockMetaData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_scan_distance_in_mm_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&contour_index_) -
    reinterpret_cast<char*>(&total_scan_distance_in_mm_)) + sizeof(contour_index_));
}

VectorBlock_VectorBlockMetaData::~VectorBlock_VectorBlockMetaData() {
  // @@protoc_insertion_point(destructor:open_vector_format.VectorBlock.VectorBlockMetaData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VectorBlock_VectorBlockMetaData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VectorBlock_VectorBlockMetaData::ArenaDtor(void* object) {
  VectorBlock_VectorBlockMetaData* _this = reinterpret_cast< VectorBlock_VectorBlockMetaData* >(object);
  (void)_this;
}
void VectorBlock_VectorBlockMetaData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorBlock_VectorBlockMetaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorBlock_VectorBlockMetaData::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.VectorBlock.VectorBlockMetaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&total_scan_distance_in_mm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&contour_index_) -
      reinterpret_cast<char*>(&total_scan_distance_in_mm_)) + sizeof(contour_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorBlock_VectorBlockMetaData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double total_scan_distance_in_mm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          total_scan_distance_in_mm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double total_jump_distance_in_mm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          total_jump_distance_in_mm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 part_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          part_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 patch_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          patch_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 contour_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          contour_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VectorBlock_VectorBlockMetaData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.VectorBlock.VectorBlockMetaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double total_scan_distance_in_mm = 1;
  if (!(this->total_scan_distance_in_mm() <= 0 && this->total_scan_distance_in_mm() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_total_scan_distance_in_mm(), target);
  }

  // double total_jump_distance_in_mm = 2;
  if (!(this->total_jump_distance_in_mm() <= 0 && this->total_jump_distance_in_mm() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_total_jump_distance_in_mm(), target);
  }

  // int32 part_key = 3;
  if (this->part_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_part_key(), target);
  }

  // int32 patch_key = 4;
  if (this->patch_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_patch_key(), target);
  }

  // int32 contour_index = 5;
  if (this->contour_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_contour_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.VectorBlock.VectorBlockMetaData)
  return target;
}

size_t VectorBlock_VectorBlockMetaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:open_vector_format.VectorBlock.VectorBlockMetaData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double total_scan_distance_in_mm = 1;
  if (!(this->total_scan_distance_in_mm() <= 0 && this->total_scan_distance_in_mm() >= 0)) {
    total_size += 1 + 8;
  }

  // double total_jump_distance_in_mm = 2;
  if (!(this->total_jump_distance_in_mm() <= 0 && this->total_jump_distance_in_mm() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 part_key = 3;
  if (this->part_key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_part_key());
  }

  // int32 patch_key = 4;
  if (this->patch_key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_patch_key());
  }

  // int32 contour_index = 5;
  if (this->contour_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_contour_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorBlock_VectorBlockMetaData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:open_vector_format.VectorBlock.VectorBlockMetaData)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorBlock_VectorBlockMetaData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VectorBlock_VectorBlockMetaData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:open_vector_format.VectorBlock.VectorBlockMetaData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:open_vector_format.VectorBlock.VectorBlockMetaData)
    MergeFrom(*source);
  }
}

void VectorBlock_VectorBlockMetaData::MergeFrom(const VectorBlock_VectorBlockMetaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.VectorBlock.VectorBlockMetaData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.total_scan_distance_in_mm() <= 0 && from.total_scan_distance_in_mm() >= 0)) {
    _internal_set_total_scan_distance_in_mm(from._internal_total_scan_distance_in_mm());
  }
  if (!(from.total_jump_distance_in_mm() <= 0 && from.total_jump_distance_in_mm() >= 0)) {
    _internal_set_total_jump_distance_in_mm(from._internal_total_jump_distance_in_mm());
  }
  if (from.part_key() != 0) {
    _internal_set_part_key(from._internal_part_key());
  }
  if (from.patch_key() != 0) {
    _internal_set_patch_key(from._internal_patch_key());
  }
  if (from.contour_index() != 0) {
    _internal_set_contour_index(from._internal_contour_index());
  }
}

void VectorBlock_VectorBlockMetaData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:open_vector_format.VectorBlock.VectorBlockMetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorBlock_VectorBlockMetaData::CopyFrom(const VectorBlock_VectorBlockMetaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.VectorBlock.VectorBlockMetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorBlock_VectorBlockMetaData::IsInitialized() const {
  return true;
}

void VectorBlock_VectorBlockMetaData::InternalSwap(VectorBlock_VectorBlockMetaData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VectorBlock_VectorBlockMetaData, contour_index_)
      + sizeof(VectorBlock_VectorBlockMetaData::contour_index_)
      - PROTOBUF_FIELD_OFFSET(VectorBlock_VectorBlockMetaData, total_scan_distance_in_mm_)>(
          reinterpret_cast<char*>(&total_scan_distance_in_mm_),
          reinterpret_cast<char*>(&other->total_scan_distance_in_mm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorBlock_VectorBlockMetaData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VectorBlock_LPBFMetadata::_Internal {
 public:
};

VectorBlock_LPBFMetadata::VectorBlock_LPBFMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.VectorBlock.LPBFMetadata)
}
VectorBlock_LPBFMetadata::VectorBlock_LPBFMetadata(const VectorBlock_LPBFMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&part_area_, &from.part_area_,
    static_cast<size_t>(reinterpret_cast<char*>(&reexposure_) -
    reinterpret_cast<char*>(&part_area_)) + sizeof(reexposure_));
  // @@protoc_insertion_point(copy_constructor:open_vector_format.VectorBlock.LPBFMetadata)
}

void VectorBlock_LPBFMetadata::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&part_area_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reexposure_) -
    reinterpret_cast<char*>(&part_area_)) + sizeof(reexposure_));
}

VectorBlock_LPBFMetadata::~VectorBlock_LPBFMetadata() {
  // @@protoc_insertion_point(destructor:open_vector_format.VectorBlock.LPBFMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VectorBlock_LPBFMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VectorBlock_LPBFMetadata::ArenaDtor(void* object) {
  VectorBlock_LPBFMetadata* _this = reinterpret_cast< VectorBlock_LPBFMetadata* >(object);
  (void)_this;
}
void VectorBlock_LPBFMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorBlock_LPBFMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorBlock_LPBFMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.VectorBlock.LPBFMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&part_area_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reexposure_) -
      reinterpret_cast<char*>(&part_area_)) + sizeof(reexposure_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorBlock_LPBFMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .open_vector_format.VectorBlock.PartArea part_area = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_part_area(static_cast<::open_vector_format::VectorBlock_PartArea>(val));
        } else goto handle_unusual;
        continue;
      // .open_vector_format.VectorBlock.LPBFMetadata.SkinType skin_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_skin_type(static_cast<::open_vector_format::VectorBlock_LPBFMetadata_SkinType>(val));
        } else goto handle_unusual;
        continue;
      // .open_vector_format.VectorBlock.LPBFMetadata.SkinCoreStrategyArea skin_core_strategy_area = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_skin_core_strategy_area(static_cast<::open_vector_format::VectorBlock_LPBFMetadata_SkinCoreStrategyArea>(val));
        } else goto handle_unusual;
        continue;
      // .open_vector_format.VectorBlock.StructureType structure_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_structure_type(static_cast<::open_vector_format::VectorBlock_StructureType>(val));
        } else goto handle_unusual;
        continue;
      // bool reexposure = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          reexposure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VectorBlock_LPBFMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.VectorBlock.LPBFMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .open_vector_format.VectorBlock.PartArea part_area = 1;
  if (this->part_area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_part_area(), target);
  }

  // .open_vector_format.VectorBlock.LPBFMetadata.SkinType skin_type = 2;
  if (this->skin_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_skin_type(), target);
  }

  // .open_vector_format.VectorBlock.LPBFMetadata.SkinCoreStrategyArea skin_core_strategy_area = 3;
  if (this->skin_core_strategy_area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_skin_core_strategy_area(), target);
  }

  // .open_vector_format.VectorBlock.StructureType structure_type = 4;
  if (this->structure_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_structure_type(), target);
  }

  // bool reexposure = 5;
  if (this->reexposure() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_reexposure(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.VectorBlock.LPBFMetadata)
  return target;
}

size_t VectorBlock_LPBFMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:open_vector_format.VectorBlock.LPBFMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .open_vector_format.VectorBlock.PartArea part_area = 1;
  if (this->part_area() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_part_area());
  }

  // .open_vector_format.VectorBlock.LPBFMetadata.SkinType skin_type = 2;
  if (this->skin_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_skin_type());
  }

  // .open_vector_format.VectorBlock.LPBFMetadata.SkinCoreStrategyArea skin_core_strategy_area = 3;
  if (this->skin_core_strategy_area() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_skin_core_strategy_area());
  }

  // .open_vector_format.VectorBlock.StructureType structure_type = 4;
  if (this->structure_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_structure_type());
  }

  // bool reexposure = 5;
  if (this->reexposure() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorBlock_LPBFMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:open_vector_format.VectorBlock.LPBFMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorBlock_LPBFMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VectorBlock_LPBFMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:open_vector_format.VectorBlock.LPBFMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:open_vector_format.VectorBlock.LPBFMetadata)
    MergeFrom(*source);
  }
}

void VectorBlock_LPBFMetadata::MergeFrom(const VectorBlock_LPBFMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.VectorBlock.LPBFMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.part_area() != 0) {
    _internal_set_part_area(from._internal_part_area());
  }
  if (from.skin_type() != 0) {
    _internal_set_skin_type(from._internal_skin_type());
  }
  if (from.skin_core_strategy_area() != 0) {
    _internal_set_skin_core_strategy_area(from._internal_skin_core_strategy_area());
  }
  if (from.structure_type() != 0) {
    _internal_set_structure_type(from._internal_structure_type());
  }
  if (from.reexposure() != 0) {
    _internal_set_reexposure(from._internal_reexposure());
  }
}

void VectorBlock_LPBFMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:open_vector_format.VectorBlock.LPBFMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorBlock_LPBFMetadata::CopyFrom(const VectorBlock_LPBFMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.VectorBlock.LPBFMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorBlock_LPBFMetadata::IsInitialized() const {
  return true;
}

void VectorBlock_LPBFMetadata::InternalSwap(VectorBlock_LPBFMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VectorBlock_LPBFMetadata, reexposure_)
      + sizeof(VectorBlock_LPBFMetadata::reexposure_)
      - PROTOBUF_FIELD_OFFSET(VectorBlock_LPBFMetadata, part_area_)>(
          reinterpret_cast<char*>(&part_area_),
          reinterpret_cast<char*>(&other->part_area_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorBlock_LPBFMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VectorBlock_MicroStructuringMetadata::_Internal {
 public:
};

VectorBlock_MicroStructuringMetadata::VectorBlock_MicroStructuringMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.VectorBlock.MicroStructuringMetadata)
}
VectorBlock_MicroStructuringMetadata::VectorBlock_MicroStructuringMetadata(const VectorBlock_MicroStructuringMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&part_area_, &from.part_area_,
    static_cast<size_t>(reinterpret_cast<char*>(&structure_type_) -
    reinterpret_cast<char*>(&part_area_)) + sizeof(structure_type_));
  // @@protoc_insertion_point(copy_constructor:open_vector_format.VectorBlock.MicroStructuringMetadata)
}

void VectorBlock_MicroStructuringMetadata::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&part_area_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&structure_type_) -
    reinterpret_cast<char*>(&part_area_)) + sizeof(structure_type_));
}

VectorBlock_MicroStructuringMetadata::~VectorBlock_MicroStructuringMetadata() {
  // @@protoc_insertion_point(destructor:open_vector_format.VectorBlock.MicroStructuringMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VectorBlock_MicroStructuringMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VectorBlock_MicroStructuringMetadata::ArenaDtor(void* object) {
  VectorBlock_MicroStructuringMetadata* _this = reinterpret_cast< VectorBlock_MicroStructuringMetadata* >(object);
  (void)_this;
}
void VectorBlock_MicroStructuringMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorBlock_MicroStructuringMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorBlock_MicroStructuringMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.VectorBlock.MicroStructuringMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&part_area_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&structure_type_) -
      reinterpret_cast<char*>(&part_area_)) + sizeof(structure_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorBlock_MicroStructuringMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .open_vector_format.VectorBlock.PartArea part_area = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_part_area(static_cast<::open_vector_format::VectorBlock_PartArea>(val));
        } else goto handle_unusual;
        continue;
      // .open_vector_format.VectorBlock.StructureType structure_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_structure_type(static_cast<::open_vector_format::VectorBlock_StructureType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VectorBlock_MicroStructuringMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.VectorBlock.MicroStructuringMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .open_vector_format.VectorBlock.PartArea part_area = 1;
  if (this->part_area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_part_area(), target);
  }

  // .open_vector_format.VectorBlock.StructureType structure_type = 2;
  if (this->structure_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_structure_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.VectorBlock.MicroStructuringMetadata)
  return target;
}

size_t VectorBlock_MicroStructuringMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:open_vector_format.VectorBlock.MicroStructuringMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .open_vector_format.VectorBlock.PartArea part_area = 1;
  if (this->part_area() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_part_area());
  }

  // .open_vector_format.VectorBlock.StructureType structure_type = 2;
  if (this->structure_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_structure_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorBlock_MicroStructuringMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:open_vector_format.VectorBlock.MicroStructuringMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorBlock_MicroStructuringMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VectorBlock_MicroStructuringMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:open_vector_format.VectorBlock.MicroStructuringMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:open_vector_format.VectorBlock.MicroStructuringMetadata)
    MergeFrom(*source);
  }
}

void VectorBlock_MicroStructuringMetadata::MergeFrom(const VectorBlock_MicroStructuringMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.VectorBlock.MicroStructuringMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.part_area() != 0) {
    _internal_set_part_area(from._internal_part_area());
  }
  if (from.structure_type() != 0) {
    _internal_set_structure_type(from._internal_structure_type());
  }
}

void VectorBlock_MicroStructuringMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:open_vector_format.VectorBlock.MicroStructuringMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorBlock_MicroStructuringMetadata::CopyFrom(const VectorBlock_MicroStructuringMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.VectorBlock.MicroStructuringMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorBlock_MicroStructuringMetadata::IsInitialized() const {
  return true;
}

void VectorBlock_MicroStructuringMetadata::InternalSwap(VectorBlock_MicroStructuringMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VectorBlock_MicroStructuringMetadata, structure_type_)
      + sizeof(VectorBlock_MicroStructuringMetadata::structure_type_)
      - PROTOBUF_FIELD_OFFSET(VectorBlock_MicroStructuringMetadata, part_area_)>(
          reinterpret_cast<char*>(&part_area_),
          reinterpret_cast<char*>(&other->part_area_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorBlock_MicroStructuringMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VectorBlock_PolishingMetadata::_Internal {
 public:
};

VectorBlock_PolishingMetadata::VectorBlock_PolishingMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.VectorBlock.PolishingMetadata)
}
VectorBlock_PolishingMetadata::VectorBlock_PolishingMetadata(const VectorBlock_PolishingMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:open_vector_format.VectorBlock.PolishingMetadata)
}

void VectorBlock_PolishingMetadata::SharedCtor() {
}

VectorBlock_PolishingMetadata::~VectorBlock_PolishingMetadata() {
  // @@protoc_insertion_point(destructor:open_vector_format.VectorBlock.PolishingMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VectorBlock_PolishingMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VectorBlock_PolishingMetadata::ArenaDtor(void* object) {
  VectorBlock_PolishingMetadata* _this = reinterpret_cast< VectorBlock_PolishingMetadata* >(object);
  (void)_this;
}
void VectorBlock_PolishingMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorBlock_PolishingMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorBlock_PolishingMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.VectorBlock.PolishingMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorBlock_PolishingMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VectorBlock_PolishingMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.VectorBlock.PolishingMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.VectorBlock.PolishingMetadata)
  return target;
}

size_t VectorBlock_PolishingMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:open_vector_format.VectorBlock.PolishingMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorBlock_PolishingMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:open_vector_format.VectorBlock.PolishingMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorBlock_PolishingMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VectorBlock_PolishingMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:open_vector_format.VectorBlock.PolishingMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:open_vector_format.VectorBlock.PolishingMetadata)
    MergeFrom(*source);
  }
}

void VectorBlock_PolishingMetadata::MergeFrom(const VectorBlock_PolishingMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.VectorBlock.PolishingMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void VectorBlock_PolishingMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:open_vector_format.VectorBlock.PolishingMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorBlock_PolishingMetadata::CopyFrom(const VectorBlock_PolishingMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.VectorBlock.PolishingMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorBlock_PolishingMetadata::IsInitialized() const {
  return true;
}

void VectorBlock_PolishingMetadata::InternalSwap(VectorBlock_PolishingMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorBlock_PolishingMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VectorBlock_LineSequence::_Internal {
 public:
};

VectorBlock_LineSequence::VectorBlock_LineSequence(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.VectorBlock.LineSequence)
}
VectorBlock_LineSequence::VectorBlock_LineSequence(const VectorBlock_LineSequence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:open_vector_format.VectorBlock.LineSequence)
}

void VectorBlock_LineSequence::SharedCtor() {
}

VectorBlock_LineSequence::~VectorBlock_LineSequence() {
  // @@protoc_insertion_point(destructor:open_vector_format.VectorBlock.LineSequence)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VectorBlock_LineSequence::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VectorBlock_LineSequence::ArenaDtor(void* object) {
  VectorBlock_LineSequence* _this = reinterpret_cast< VectorBlock_LineSequence* >(object);
  (void)_this;
}
void VectorBlock_LineSequence::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorBlock_LineSequence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorBlock_LineSequence::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.VectorBlock.LineSequence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorBlock_LineSequence::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_points(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_points(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VectorBlock_LineSequence::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.VectorBlock.LineSequence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float points = 1;
  if (this->_internal_points_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_points(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.VectorBlock.LineSequence)
  return target;
}

size_t VectorBlock_LineSequence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:open_vector_format.VectorBlock.LineSequence)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_points_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _points_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorBlock_LineSequence::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:open_vector_format.VectorBlock.LineSequence)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorBlock_LineSequence* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VectorBlock_LineSequence>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:open_vector_format.VectorBlock.LineSequence)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:open_vector_format.VectorBlock.LineSequence)
    MergeFrom(*source);
  }
}

void VectorBlock_LineSequence::MergeFrom(const VectorBlock_LineSequence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.VectorBlock.LineSequence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
}

void VectorBlock_LineSequence::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:open_vector_format.VectorBlock.LineSequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorBlock_LineSequence::CopyFrom(const VectorBlock_LineSequence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.VectorBlock.LineSequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorBlock_LineSequence::IsInitialized() const {
  return true;
}

void VectorBlock_LineSequence::InternalSwap(VectorBlock_LineSequence* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorBlock_LineSequence::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VectorBlock_LineSequence3D::_Internal {
 public:
};

VectorBlock_LineSequence3D::VectorBlock_LineSequence3D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.VectorBlock.LineSequence3D)
}
VectorBlock_LineSequence3D::VectorBlock_LineSequence3D(const VectorBlock_LineSequence3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:open_vector_format.VectorBlock.LineSequence3D)
}

void VectorBlock_LineSequence3D::SharedCtor() {
}

VectorBlock_LineSequence3D::~VectorBlock_LineSequence3D() {
  // @@protoc_insertion_point(destructor:open_vector_format.VectorBlock.LineSequence3D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VectorBlock_LineSequence3D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VectorBlock_LineSequence3D::ArenaDtor(void* object) {
  VectorBlock_LineSequence3D* _this = reinterpret_cast< VectorBlock_LineSequence3D* >(object);
  (void)_this;
}
void VectorBlock_LineSequence3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorBlock_LineSequence3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorBlock_LineSequence3D::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.VectorBlock.LineSequence3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorBlock_LineSequence3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_points(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_points(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VectorBlock_LineSequence3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.VectorBlock.LineSequence3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float points = 1;
  if (this->_internal_points_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_points(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.VectorBlock.LineSequence3D)
  return target;
}

size_t VectorBlock_LineSequence3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:open_vector_format.VectorBlock.LineSequence3D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_points_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _points_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorBlock_LineSequence3D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:open_vector_format.VectorBlock.LineSequence3D)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorBlock_LineSequence3D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VectorBlock_LineSequence3D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:open_vector_format.VectorBlock.LineSequence3D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:open_vector_format.VectorBlock.LineSequence3D)
    MergeFrom(*source);
  }
}

void VectorBlock_LineSequence3D::MergeFrom(const VectorBlock_LineSequence3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.VectorBlock.LineSequence3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
}

void VectorBlock_LineSequence3D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:open_vector_format.VectorBlock.LineSequence3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorBlock_LineSequence3D::CopyFrom(const VectorBlock_LineSequence3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.VectorBlock.LineSequence3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorBlock_LineSequence3D::IsInitialized() const {
  return true;
}

void VectorBlock_LineSequence3D::InternalSwap(VectorBlock_LineSequence3D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorBlock_LineSequence3D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VectorBlock_Hatches::_Internal {
 public:
};

VectorBlock_Hatches::VectorBlock_Hatches(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.VectorBlock.Hatches)
}
VectorBlock_Hatches::VectorBlock_Hatches(const VectorBlock_Hatches& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:open_vector_format.VectorBlock.Hatches)
}

void VectorBlock_Hatches::SharedCtor() {
}

VectorBlock_Hatches::~VectorBlock_Hatches() {
  // @@protoc_insertion_point(destructor:open_vector_format.VectorBlock.Hatches)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VectorBlock_Hatches::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VectorBlock_Hatches::ArenaDtor(void* object) {
  VectorBlock_Hatches* _this = reinterpret_cast< VectorBlock_Hatches* >(object);
  (void)_this;
}
void VectorBlock_Hatches::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorBlock_Hatches::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorBlock_Hatches::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.VectorBlock.Hatches)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorBlock_Hatches::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_points(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_points(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VectorBlock_Hatches::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.VectorBlock.Hatches)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float points = 1;
  if (this->_internal_points_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_points(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.VectorBlock.Hatches)
  return target;
}

size_t VectorBlock_Hatches::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:open_vector_format.VectorBlock.Hatches)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_points_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _points_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorBlock_Hatches::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:open_vector_format.VectorBlock.Hatches)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorBlock_Hatches* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VectorBlock_Hatches>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:open_vector_format.VectorBlock.Hatches)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:open_vector_format.VectorBlock.Hatches)
    MergeFrom(*source);
  }
}

void VectorBlock_Hatches::MergeFrom(const VectorBlock_Hatches& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.VectorBlock.Hatches)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
}

void VectorBlock_Hatches::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:open_vector_format.VectorBlock.Hatches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorBlock_Hatches::CopyFrom(const VectorBlock_Hatches& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.VectorBlock.Hatches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorBlock_Hatches::IsInitialized() const {
  return true;
}

void VectorBlock_Hatches::InternalSwap(VectorBlock_Hatches* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorBlock_Hatches::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VectorBlock_Hatches3D::_Internal {
 public:
};

VectorBlock_Hatches3D::VectorBlock_Hatches3D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.VectorBlock.Hatches3D)
}
VectorBlock_Hatches3D::VectorBlock_Hatches3D(const VectorBlock_Hatches3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:open_vector_format.VectorBlock.Hatches3D)
}

void VectorBlock_Hatches3D::SharedCtor() {
}

VectorBlock_Hatches3D::~VectorBlock_Hatches3D() {
  // @@protoc_insertion_point(destructor:open_vector_format.VectorBlock.Hatches3D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VectorBlock_Hatches3D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VectorBlock_Hatches3D::ArenaDtor(void* object) {
  VectorBlock_Hatches3D* _this = reinterpret_cast< VectorBlock_Hatches3D* >(object);
  (void)_this;
}
void VectorBlock_Hatches3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorBlock_Hatches3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorBlock_Hatches3D::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.VectorBlock.Hatches3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorBlock_Hatches3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_points(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_points(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VectorBlock_Hatches3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.VectorBlock.Hatches3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float points = 1;
  if (this->_internal_points_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_points(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.VectorBlock.Hatches3D)
  return target;
}

size_t VectorBlock_Hatches3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:open_vector_format.VectorBlock.Hatches3D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_points_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _points_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorBlock_Hatches3D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:open_vector_format.VectorBlock.Hatches3D)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorBlock_Hatches3D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VectorBlock_Hatches3D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:open_vector_format.VectorBlock.Hatches3D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:open_vector_format.VectorBlock.Hatches3D)
    MergeFrom(*source);
  }
}

void VectorBlock_Hatches3D::MergeFrom(const VectorBlock_Hatches3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.VectorBlock.Hatches3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
}

void VectorBlock_Hatches3D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:open_vector_format.VectorBlock.Hatches3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorBlock_Hatches3D::CopyFrom(const VectorBlock_Hatches3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.VectorBlock.Hatches3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorBlock_Hatches3D::IsInitialized() const {
  return true;
}

void VectorBlock_Hatches3D::InternalSwap(VectorBlock_Hatches3D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorBlock_Hatches3D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VectorBlock_PointSequence::_Internal {
 public:
};

VectorBlock_PointSequence::VectorBlock_PointSequence(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.VectorBlock.PointSequence)
}
VectorBlock_PointSequence::VectorBlock_PointSequence(const VectorBlock_PointSequence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:open_vector_format.VectorBlock.PointSequence)
}

void VectorBlock_PointSequence::SharedCtor() {
}

VectorBlock_PointSequence::~VectorBlock_PointSequence() {
  // @@protoc_insertion_point(destructor:open_vector_format.VectorBlock.PointSequence)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VectorBlock_PointSequence::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VectorBlock_PointSequence::ArenaDtor(void* object) {
  VectorBlock_PointSequence* _this = reinterpret_cast< VectorBlock_PointSequence* >(object);
  (void)_this;
}
void VectorBlock_PointSequence::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorBlock_PointSequence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorBlock_PointSequence::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.VectorBlock.PointSequence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorBlock_PointSequence::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_points(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_points(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VectorBlock_PointSequence::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.VectorBlock.PointSequence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float points = 1;
  if (this->_internal_points_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_points(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.VectorBlock.PointSequence)
  return target;
}

size_t VectorBlock_PointSequence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:open_vector_format.VectorBlock.PointSequence)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_points_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _points_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorBlock_PointSequence::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:open_vector_format.VectorBlock.PointSequence)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorBlock_PointSequence* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VectorBlock_PointSequence>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:open_vector_format.VectorBlock.PointSequence)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:open_vector_format.VectorBlock.PointSequence)
    MergeFrom(*source);
  }
}

void VectorBlock_PointSequence::MergeFrom(const VectorBlock_PointSequence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.VectorBlock.PointSequence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
}

void VectorBlock_PointSequence::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:open_vector_format.VectorBlock.PointSequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorBlock_PointSequence::CopyFrom(const VectorBlock_PointSequence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.VectorBlock.PointSequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorBlock_PointSequence::IsInitialized() const {
  return true;
}

void VectorBlock_PointSequence::InternalSwap(VectorBlock_PointSequence* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorBlock_PointSequence::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VectorBlock_PointSequence3D::_Internal {
 public:
};

VectorBlock_PointSequence3D::VectorBlock_PointSequence3D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.VectorBlock.PointSequence3D)
}
VectorBlock_PointSequence3D::VectorBlock_PointSequence3D(const VectorBlock_PointSequence3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:open_vector_format.VectorBlock.PointSequence3D)
}

void VectorBlock_PointSequence3D::SharedCtor() {
}

VectorBlock_PointSequence3D::~VectorBlock_PointSequence3D() {
  // @@protoc_insertion_point(destructor:open_vector_format.VectorBlock.PointSequence3D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VectorBlock_PointSequence3D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VectorBlock_PointSequence3D::ArenaDtor(void* object) {
  VectorBlock_PointSequence3D* _this = reinterpret_cast< VectorBlock_PointSequence3D* >(object);
  (void)_this;
}
void VectorBlock_PointSequence3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorBlock_PointSequence3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorBlock_PointSequence3D::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.VectorBlock.PointSequence3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorBlock_PointSequence3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_points(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_points(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VectorBlock_PointSequence3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.VectorBlock.PointSequence3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float points = 1;
  if (this->_internal_points_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_points(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.VectorBlock.PointSequence3D)
  return target;
}

size_t VectorBlock_PointSequence3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:open_vector_format.VectorBlock.PointSequence3D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_points_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _points_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorBlock_PointSequence3D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:open_vector_format.VectorBlock.PointSequence3D)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorBlock_PointSequence3D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VectorBlock_PointSequence3D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:open_vector_format.VectorBlock.PointSequence3D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:open_vector_format.VectorBlock.PointSequence3D)
    MergeFrom(*source);
  }
}

void VectorBlock_PointSequence3D::MergeFrom(const VectorBlock_PointSequence3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.VectorBlock.PointSequence3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
}

void VectorBlock_PointSequence3D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:open_vector_format.VectorBlock.PointSequence3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorBlock_PointSequence3D::CopyFrom(const VectorBlock_PointSequence3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.VectorBlock.PointSequence3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorBlock_PointSequence3D::IsInitialized() const {
  return true;
}

void VectorBlock_PointSequence3D::InternalSwap(VectorBlock_PointSequence3D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorBlock_PointSequence3D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VectorBlock_Arcs::_Internal {
 public:
};

VectorBlock_Arcs::VectorBlock_Arcs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  centers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.VectorBlock.Arcs)
}
VectorBlock_Arcs::VectorBlock_Arcs(const VectorBlock_Arcs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      centers_(from.centers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&angle_, &from.angle_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_dy_) -
    reinterpret_cast<char*>(&angle_)) + sizeof(start_dy_));
  // @@protoc_insertion_point(copy_constructor:open_vector_format.VectorBlock.Arcs)
}

void VectorBlock_Arcs::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&angle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&start_dy_) -
    reinterpret_cast<char*>(&angle_)) + sizeof(start_dy_));
}

VectorBlock_Arcs::~VectorBlock_Arcs() {
  // @@protoc_insertion_point(destructor:open_vector_format.VectorBlock.Arcs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VectorBlock_Arcs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VectorBlock_Arcs::ArenaDtor(void* object) {
  VectorBlock_Arcs* _this = reinterpret_cast< VectorBlock_Arcs* >(object);
  (void)_this;
}
void VectorBlock_Arcs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorBlock_Arcs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorBlock_Arcs::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.VectorBlock.Arcs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  centers_.Clear();
  ::memset(&angle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_dy_) -
      reinterpret_cast<char*>(&angle_)) + sizeof(start_dy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorBlock_Arcs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double angle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float start_dx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          start_dx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float start_dy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          start_dy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float centers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_centers(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          _internal_add_centers(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VectorBlock_Arcs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.VectorBlock.Arcs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double angle = 1;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_angle(), target);
  }

  // float start_dx = 2;
  if (!(this->start_dx() <= 0 && this->start_dx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_start_dx(), target);
  }

  // float start_dy = 3;
  if (!(this->start_dy() <= 0 && this->start_dy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_start_dy(), target);
  }

  // repeated float centers = 4;
  if (this->_internal_centers_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_centers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.VectorBlock.Arcs)
  return target;
}

size_t VectorBlock_Arcs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:open_vector_format.VectorBlock.Arcs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float centers = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_centers_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _centers_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // double angle = 1;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    total_size += 1 + 8;
  }

  // float start_dx = 2;
  if (!(this->start_dx() <= 0 && this->start_dx() >= 0)) {
    total_size += 1 + 4;
  }

  // float start_dy = 3;
  if (!(this->start_dy() <= 0 && this->start_dy() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorBlock_Arcs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:open_vector_format.VectorBlock.Arcs)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorBlock_Arcs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VectorBlock_Arcs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:open_vector_format.VectorBlock.Arcs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:open_vector_format.VectorBlock.Arcs)
    MergeFrom(*source);
  }
}

void VectorBlock_Arcs::MergeFrom(const VectorBlock_Arcs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.VectorBlock.Arcs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  centers_.MergeFrom(from.centers_);
  if (!(from.angle() <= 0 && from.angle() >= 0)) {
    _internal_set_angle(from._internal_angle());
  }
  if (!(from.start_dx() <= 0 && from.start_dx() >= 0)) {
    _internal_set_start_dx(from._internal_start_dx());
  }
  if (!(from.start_dy() <= 0 && from.start_dy() >= 0)) {
    _internal_set_start_dy(from._internal_start_dy());
  }
}

void VectorBlock_Arcs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:open_vector_format.VectorBlock.Arcs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorBlock_Arcs::CopyFrom(const VectorBlock_Arcs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.VectorBlock.Arcs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorBlock_Arcs::IsInitialized() const {
  return true;
}

void VectorBlock_Arcs::InternalSwap(VectorBlock_Arcs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  centers_.InternalSwap(&other->centers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VectorBlock_Arcs, start_dy_)
      + sizeof(VectorBlock_Arcs::start_dy_)
      - PROTOBUF_FIELD_OFFSET(VectorBlock_Arcs, angle_)>(
          reinterpret_cast<char*>(&angle_),
          reinterpret_cast<char*>(&other->angle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorBlock_Arcs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VectorBlock_Arcs3D::_Internal {
 public:
};

VectorBlock_Arcs3D::VectorBlock_Arcs3D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  centers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.VectorBlock.Arcs3D)
}
VectorBlock_Arcs3D::VectorBlock_Arcs3D(const VectorBlock_Arcs3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      centers_(from.centers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&angle_, &from.angle_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_dz_) -
    reinterpret_cast<char*>(&angle_)) + sizeof(start_dz_));
  // @@protoc_insertion_point(copy_constructor:open_vector_format.VectorBlock.Arcs3D)
}

void VectorBlock_Arcs3D::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&angle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&start_dz_) -
    reinterpret_cast<char*>(&angle_)) + sizeof(start_dz_));
}

VectorBlock_Arcs3D::~VectorBlock_Arcs3D() {
  // @@protoc_insertion_point(destructor:open_vector_format.VectorBlock.Arcs3D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VectorBlock_Arcs3D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VectorBlock_Arcs3D::ArenaDtor(void* object) {
  VectorBlock_Arcs3D* _this = reinterpret_cast< VectorBlock_Arcs3D* >(object);
  (void)_this;
}
void VectorBlock_Arcs3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorBlock_Arcs3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorBlock_Arcs3D::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.VectorBlock.Arcs3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  centers_.Clear();
  ::memset(&angle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_dz_) -
      reinterpret_cast<char*>(&angle_)) + sizeof(start_dz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorBlock_Arcs3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double angle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float start_dx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          start_dx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float start_dy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          start_dy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float start_dz = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          start_dz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float centers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_centers(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          _internal_add_centers(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VectorBlock_Arcs3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.VectorBlock.Arcs3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double angle = 1;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_angle(), target);
  }

  // float start_dx = 2;
  if (!(this->start_dx() <= 0 && this->start_dx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_start_dx(), target);
  }

  // float start_dy = 3;
  if (!(this->start_dy() <= 0 && this->start_dy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_start_dy(), target);
  }

  // float start_dz = 4;
  if (!(this->start_dz() <= 0 && this->start_dz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_start_dz(), target);
  }

  // repeated float centers = 5;
  if (this->_internal_centers_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_centers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.VectorBlock.Arcs3D)
  return target;
}

size_t VectorBlock_Arcs3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:open_vector_format.VectorBlock.Arcs3D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float centers = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_centers_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _centers_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // double angle = 1;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    total_size += 1 + 8;
  }

  // float start_dx = 2;
  if (!(this->start_dx() <= 0 && this->start_dx() >= 0)) {
    total_size += 1 + 4;
  }

  // float start_dy = 3;
  if (!(this->start_dy() <= 0 && this->start_dy() >= 0)) {
    total_size += 1 + 4;
  }

  // float start_dz = 4;
  if (!(this->start_dz() <= 0 && this->start_dz() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorBlock_Arcs3D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:open_vector_format.VectorBlock.Arcs3D)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorBlock_Arcs3D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VectorBlock_Arcs3D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:open_vector_format.VectorBlock.Arcs3D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:open_vector_format.VectorBlock.Arcs3D)
    MergeFrom(*source);
  }
}

void VectorBlock_Arcs3D::MergeFrom(const VectorBlock_Arcs3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.VectorBlock.Arcs3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  centers_.MergeFrom(from.centers_);
  if (!(from.angle() <= 0 && from.angle() >= 0)) {
    _internal_set_angle(from._internal_angle());
  }
  if (!(from.start_dx() <= 0 && from.start_dx() >= 0)) {
    _internal_set_start_dx(from._internal_start_dx());
  }
  if (!(from.start_dy() <= 0 && from.start_dy() >= 0)) {
    _internal_set_start_dy(from._internal_start_dy());
  }
  if (!(from.start_dz() <= 0 && from.start_dz() >= 0)) {
    _internal_set_start_dz(from._internal_start_dz());
  }
}

void VectorBlock_Arcs3D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:open_vector_format.VectorBlock.Arcs3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorBlock_Arcs3D::CopyFrom(const VectorBlock_Arcs3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.VectorBlock.Arcs3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorBlock_Arcs3D::IsInitialized() const {
  return true;
}

void VectorBlock_Arcs3D::InternalSwap(VectorBlock_Arcs3D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  centers_.InternalSwap(&other->centers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VectorBlock_Arcs3D, start_dz_)
      + sizeof(VectorBlock_Arcs3D::start_dz_)
      - PROTOBUF_FIELD_OFFSET(VectorBlock_Arcs3D, angle_)>(
          reinterpret_cast<char*>(&angle_),
          reinterpret_cast<char*>(&other->angle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorBlock_Arcs3D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VectorBlock_Ellipses::_Internal {
 public:
  static const ::open_vector_format::VectorBlock_Arcs& ellipses_arcs(const VectorBlock_Ellipses* msg);
};

const ::open_vector_format::VectorBlock_Arcs&
VectorBlock_Ellipses::_Internal::ellipses_arcs(const VectorBlock_Ellipses* msg) {
  return *msg->ellipses_arcs_;
}
VectorBlock_Ellipses::VectorBlock_Ellipses(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.VectorBlock.Ellipses)
}
VectorBlock_Ellipses::VectorBlock_Ellipses(const VectorBlock_Ellipses& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ellipses_arcs()) {
    ellipses_arcs_ = new ::open_vector_format::VectorBlock_Arcs(*from.ellipses_arcs_);
  } else {
    ellipses_arcs_ = nullptr;
  }
  ::memcpy(&a_, &from.a_,
    static_cast<size_t>(reinterpret_cast<char*>(&phi0_) -
    reinterpret_cast<char*>(&a_)) + sizeof(phi0_));
  // @@protoc_insertion_point(copy_constructor:open_vector_format.VectorBlock.Ellipses)
}

void VectorBlock_Ellipses::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ellipses_arcs_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&phi0_) -
    reinterpret_cast<char*>(&ellipses_arcs_)) + sizeof(phi0_));
}

VectorBlock_Ellipses::~VectorBlock_Ellipses() {
  // @@protoc_insertion_point(destructor:open_vector_format.VectorBlock.Ellipses)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VectorBlock_Ellipses::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ellipses_arcs_;
}

void VectorBlock_Ellipses::ArenaDtor(void* object) {
  VectorBlock_Ellipses* _this = reinterpret_cast< VectorBlock_Ellipses* >(object);
  (void)_this;
}
void VectorBlock_Ellipses::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorBlock_Ellipses::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorBlock_Ellipses::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.VectorBlock.Ellipses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && ellipses_arcs_ != nullptr) {
    delete ellipses_arcs_;
  }
  ellipses_arcs_ = nullptr;
  ::memset(&a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phi0_) -
      reinterpret_cast<char*>(&a_)) + sizeof(phi0_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorBlock_Ellipses::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float b = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double phi0 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          phi0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .open_vector_format.VectorBlock.Arcs ellipses_arcs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ellipses_arcs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VectorBlock_Ellipses::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.VectorBlock.Ellipses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float a = 1;
  if (!(this->a() <= 0 && this->a() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_a(), target);
  }

  // float b = 2;
  if (!(this->b() <= 0 && this->b() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_b(), target);
  }

  // double phi0 = 3;
  if (!(this->phi0() <= 0 && this->phi0() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_phi0(), target);
  }

  // .open_vector_format.VectorBlock.Arcs ellipses_arcs = 4;
  if (this->has_ellipses_arcs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ellipses_arcs(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.VectorBlock.Ellipses)
  return target;
}

size_t VectorBlock_Ellipses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:open_vector_format.VectorBlock.Ellipses)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .open_vector_format.VectorBlock.Arcs ellipses_arcs = 4;
  if (this->has_ellipses_arcs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ellipses_arcs_);
  }

  // float a = 1;
  if (!(this->a() <= 0 && this->a() >= 0)) {
    total_size += 1 + 4;
  }

  // float b = 2;
  if (!(this->b() <= 0 && this->b() >= 0)) {
    total_size += 1 + 4;
  }

  // double phi0 = 3;
  if (!(this->phi0() <= 0 && this->phi0() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorBlock_Ellipses::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:open_vector_format.VectorBlock.Ellipses)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorBlock_Ellipses* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VectorBlock_Ellipses>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:open_vector_format.VectorBlock.Ellipses)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:open_vector_format.VectorBlock.Ellipses)
    MergeFrom(*source);
  }
}

void VectorBlock_Ellipses::MergeFrom(const VectorBlock_Ellipses& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.VectorBlock.Ellipses)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ellipses_arcs()) {
    _internal_mutable_ellipses_arcs()->::open_vector_format::VectorBlock_Arcs::MergeFrom(from._internal_ellipses_arcs());
  }
  if (!(from.a() <= 0 && from.a() >= 0)) {
    _internal_set_a(from._internal_a());
  }
  if (!(from.b() <= 0 && from.b() >= 0)) {
    _internal_set_b(from._internal_b());
  }
  if (!(from.phi0() <= 0 && from.phi0() >= 0)) {
    _internal_set_phi0(from._internal_phi0());
  }
}

void VectorBlock_Ellipses::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:open_vector_format.VectorBlock.Ellipses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorBlock_Ellipses::CopyFrom(const VectorBlock_Ellipses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.VectorBlock.Ellipses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorBlock_Ellipses::IsInitialized() const {
  return true;
}

void VectorBlock_Ellipses::InternalSwap(VectorBlock_Ellipses* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VectorBlock_Ellipses, phi0_)
      + sizeof(VectorBlock_Ellipses::phi0_)
      - PROTOBUF_FIELD_OFFSET(VectorBlock_Ellipses, ellipses_arcs_)>(
          reinterpret_cast<char*>(&ellipses_arcs_),
          reinterpret_cast<char*>(&other->ellipses_arcs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorBlock_Ellipses::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VectorBlock_ExposurePause::_Internal {
 public:
};

VectorBlock_ExposurePause::VectorBlock_ExposurePause(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.VectorBlock.ExposurePause)
}
VectorBlock_ExposurePause::VectorBlock_ExposurePause(const VectorBlock_ExposurePause& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pause_in_us_ = from.pause_in_us_;
  // @@protoc_insertion_point(copy_constructor:open_vector_format.VectorBlock.ExposurePause)
}

void VectorBlock_ExposurePause::SharedCtor() {
pause_in_us_ = PROTOBUF_ULONGLONG(0);
}

VectorBlock_ExposurePause::~VectorBlock_ExposurePause() {
  // @@protoc_insertion_point(destructor:open_vector_format.VectorBlock.ExposurePause)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VectorBlock_ExposurePause::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VectorBlock_ExposurePause::ArenaDtor(void* object) {
  VectorBlock_ExposurePause* _this = reinterpret_cast< VectorBlock_ExposurePause* >(object);
  (void)_this;
}
void VectorBlock_ExposurePause::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorBlock_ExposurePause::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorBlock_ExposurePause::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.VectorBlock.ExposurePause)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pause_in_us_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorBlock_ExposurePause::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 pause_in_us = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pause_in_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VectorBlock_ExposurePause::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.VectorBlock.ExposurePause)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pause_in_us = 1;
  if (this->pause_in_us() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pause_in_us(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.VectorBlock.ExposurePause)
  return target;
}

size_t VectorBlock_ExposurePause::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:open_vector_format.VectorBlock.ExposurePause)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 pause_in_us = 1;
  if (this->pause_in_us() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pause_in_us());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorBlock_ExposurePause::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:open_vector_format.VectorBlock.ExposurePause)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorBlock_ExposurePause* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VectorBlock_ExposurePause>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:open_vector_format.VectorBlock.ExposurePause)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:open_vector_format.VectorBlock.ExposurePause)
    MergeFrom(*source);
  }
}

void VectorBlock_ExposurePause::MergeFrom(const VectorBlock_ExposurePause& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.VectorBlock.ExposurePause)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pause_in_us() != 0) {
    _internal_set_pause_in_us(from._internal_pause_in_us());
  }
}

void VectorBlock_ExposurePause::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:open_vector_format.VectorBlock.ExposurePause)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorBlock_ExposurePause::CopyFrom(const VectorBlock_ExposurePause& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.VectorBlock.ExposurePause)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorBlock_ExposurePause::IsInitialized() const {
  return true;
}

void VectorBlock_ExposurePause::InternalSwap(VectorBlock_ExposurePause* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(pause_in_us_, other->pause_in_us_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorBlock_ExposurePause::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VectorBlock_LineSequenceParaAdapt::_Internal {
 public:
};

VectorBlock_LineSequenceParaAdapt::VectorBlock_LineSequenceParaAdapt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_with_paras_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.VectorBlock.LineSequenceParaAdapt)
}
VectorBlock_LineSequenceParaAdapt::VectorBlock_LineSequenceParaAdapt(const VectorBlock_LineSequenceParaAdapt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_with_paras_(from.points_with_paras_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parameter_ = from.parameter_;
  // @@protoc_insertion_point(copy_constructor:open_vector_format.VectorBlock.LineSequenceParaAdapt)
}

void VectorBlock_LineSequenceParaAdapt::SharedCtor() {
parameter_ = 0;
}

VectorBlock_LineSequenceParaAdapt::~VectorBlock_LineSequenceParaAdapt() {
  // @@protoc_insertion_point(destructor:open_vector_format.VectorBlock.LineSequenceParaAdapt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VectorBlock_LineSequenceParaAdapt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VectorBlock_LineSequenceParaAdapt::ArenaDtor(void* object) {
  VectorBlock_LineSequenceParaAdapt* _this = reinterpret_cast< VectorBlock_LineSequenceParaAdapt* >(object);
  (void)_this;
}
void VectorBlock_LineSequenceParaAdapt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorBlock_LineSequenceParaAdapt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorBlock_LineSequenceParaAdapt::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.VectorBlock.LineSequenceParaAdapt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_with_paras_.Clear();
  parameter_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorBlock_LineSequenceParaAdapt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float points_with_paras = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_points_with_paras(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_points_with_paras(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .open_vector_format.VectorBlock.LineSequenceParaAdapt.AdaptedParameter parameter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_parameter(static_cast<::open_vector_format::VectorBlock_LineSequenceParaAdapt_AdaptedParameter>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VectorBlock_LineSequenceParaAdapt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.VectorBlock.LineSequenceParaAdapt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float points_with_paras = 1;
  if (this->_internal_points_with_paras_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_points_with_paras(), target);
  }

  // .open_vector_format.VectorBlock.LineSequenceParaAdapt.AdaptedParameter parameter = 2;
  if (this->parameter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_parameter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.VectorBlock.LineSequenceParaAdapt)
  return target;
}

size_t VectorBlock_LineSequenceParaAdapt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:open_vector_format.VectorBlock.LineSequenceParaAdapt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float points_with_paras = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_points_with_paras_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _points_with_paras_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .open_vector_format.VectorBlock.LineSequenceParaAdapt.AdaptedParameter parameter = 2;
  if (this->parameter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_parameter());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorBlock_LineSequenceParaAdapt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:open_vector_format.VectorBlock.LineSequenceParaAdapt)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorBlock_LineSequenceParaAdapt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VectorBlock_LineSequenceParaAdapt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:open_vector_format.VectorBlock.LineSequenceParaAdapt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:open_vector_format.VectorBlock.LineSequenceParaAdapt)
    MergeFrom(*source);
  }
}

void VectorBlock_LineSequenceParaAdapt::MergeFrom(const VectorBlock_LineSequenceParaAdapt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.VectorBlock.LineSequenceParaAdapt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_with_paras_.MergeFrom(from.points_with_paras_);
  if (from.parameter() != 0) {
    _internal_set_parameter(from._internal_parameter());
  }
}

void VectorBlock_LineSequenceParaAdapt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:open_vector_format.VectorBlock.LineSequenceParaAdapt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorBlock_LineSequenceParaAdapt::CopyFrom(const VectorBlock_LineSequenceParaAdapt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.VectorBlock.LineSequenceParaAdapt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorBlock_LineSequenceParaAdapt::IsInitialized() const {
  return true;
}

void VectorBlock_LineSequenceParaAdapt::InternalSwap(VectorBlock_LineSequenceParaAdapt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  points_with_paras_.InternalSwap(&other->points_with_paras_);
  swap(parameter_, other->parameter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorBlock_LineSequenceParaAdapt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VectorBlock_HatchesParaAdapt::_Internal {
 public:
};

VectorBlock_HatchesParaAdapt::VectorBlock_HatchesParaAdapt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hatchaslinesequence_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.VectorBlock.HatchesParaAdapt)
}
VectorBlock_HatchesParaAdapt::VectorBlock_HatchesParaAdapt(const VectorBlock_HatchesParaAdapt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hatchaslinesequence_(from.hatchaslinesequence_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:open_vector_format.VectorBlock.HatchesParaAdapt)
}

void VectorBlock_HatchesParaAdapt::SharedCtor() {
}

VectorBlock_HatchesParaAdapt::~VectorBlock_HatchesParaAdapt() {
  // @@protoc_insertion_point(destructor:open_vector_format.VectorBlock.HatchesParaAdapt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VectorBlock_HatchesParaAdapt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VectorBlock_HatchesParaAdapt::ArenaDtor(void* object) {
  VectorBlock_HatchesParaAdapt* _this = reinterpret_cast< VectorBlock_HatchesParaAdapt* >(object);
  (void)_this;
}
void VectorBlock_HatchesParaAdapt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorBlock_HatchesParaAdapt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorBlock_HatchesParaAdapt::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.VectorBlock.HatchesParaAdapt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hatchaslinesequence_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorBlock_HatchesParaAdapt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .open_vector_format.VectorBlock.LineSequenceParaAdapt hatchAsLinesequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hatchaslinesequence(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VectorBlock_HatchesParaAdapt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.VectorBlock.HatchesParaAdapt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .open_vector_format.VectorBlock.LineSequenceParaAdapt hatchAsLinesequence = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hatchaslinesequence_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_hatchaslinesequence(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.VectorBlock.HatchesParaAdapt)
  return target;
}

size_t VectorBlock_HatchesParaAdapt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:open_vector_format.VectorBlock.HatchesParaAdapt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .open_vector_format.VectorBlock.LineSequenceParaAdapt hatchAsLinesequence = 1;
  total_size += 1UL * this->_internal_hatchaslinesequence_size();
  for (const auto& msg : this->hatchaslinesequence_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorBlock_HatchesParaAdapt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:open_vector_format.VectorBlock.HatchesParaAdapt)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorBlock_HatchesParaAdapt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VectorBlock_HatchesParaAdapt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:open_vector_format.VectorBlock.HatchesParaAdapt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:open_vector_format.VectorBlock.HatchesParaAdapt)
    MergeFrom(*source);
  }
}

void VectorBlock_HatchesParaAdapt::MergeFrom(const VectorBlock_HatchesParaAdapt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.VectorBlock.HatchesParaAdapt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hatchaslinesequence_.MergeFrom(from.hatchaslinesequence_);
}

void VectorBlock_HatchesParaAdapt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:open_vector_format.VectorBlock.HatchesParaAdapt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorBlock_HatchesParaAdapt::CopyFrom(const VectorBlock_HatchesParaAdapt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.VectorBlock.HatchesParaAdapt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorBlock_HatchesParaAdapt::IsInitialized() const {
  return true;
}

void VectorBlock_HatchesParaAdapt::InternalSwap(VectorBlock_HatchesParaAdapt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hatchaslinesequence_.InternalSwap(&other->hatchaslinesequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorBlock_HatchesParaAdapt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VectorBlock::_Internal {
 public:
  static const ::open_vector_format::VectorBlock_LineSequence& line_sequence(const VectorBlock* msg);
  static const ::open_vector_format::VectorBlock_Hatches& _hatches(const VectorBlock* msg);
  static const ::open_vector_format::VectorBlock_PointSequence& point_sequence(const VectorBlock* msg);
  static const ::open_vector_format::VectorBlock_Arcs& _arcs(const VectorBlock* msg);
  static const ::open_vector_format::VectorBlock_Ellipses& ellipses(const VectorBlock* msg);
  static const ::open_vector_format::VectorBlock_LineSequence3D& line_sequence_3d(const VectorBlock* msg);
  static const ::open_vector_format::VectorBlock_Hatches3D& hatches_3d(const VectorBlock* msg);
  static const ::open_vector_format::VectorBlock_PointSequence3D& point_sequence_3d(const VectorBlock* msg);
  static const ::open_vector_format::VectorBlock_Arcs3D& arcs_3d(const VectorBlock* msg);
  static const ::open_vector_format::VectorBlock_ExposurePause& exposure_pause(const VectorBlock* msg);
  static const ::open_vector_format::VectorBlock_LineSequenceParaAdapt& line_sequence_para_adapt(const VectorBlock* msg);
  static const ::open_vector_format::VectorBlock_HatchesParaAdapt& _hatchparaadapt(const VectorBlock* msg);
  static const ::open_vector_format::VectorBlock_VectorBlockMetaData& meta_data(const VectorBlock* msg);
  static const ::open_vector_format::VectorBlock_LPBFMetadata& lpbf_metadata(const VectorBlock* msg);
  static const ::open_vector_format::VectorBlock_MicroStructuringMetadata& micro_structuring_metadata(const VectorBlock* msg);
  static const ::open_vector_format::VectorBlock_PolishingMetadata& polishing_metadata(const VectorBlock* msg);
};

const ::open_vector_format::VectorBlock_LineSequence&
VectorBlock::_Internal::line_sequence(const VectorBlock* msg) {
  return *msg->vector_data_.line_sequence_;
}
const ::open_vector_format::VectorBlock_Hatches&
VectorBlock::_Internal::_hatches(const VectorBlock* msg) {
  return *msg->vector_data_._hatches_;
}
const ::open_vector_format::VectorBlock_PointSequence&
VectorBlock::_Internal::point_sequence(const VectorBlock* msg) {
  return *msg->vector_data_.point_sequence_;
}
const ::open_vector_format::VectorBlock_Arcs&
VectorBlock::_Internal::_arcs(const VectorBlock* msg) {
  return *msg->vector_data_._arcs_;
}
const ::open_vector_format::VectorBlock_Ellipses&
VectorBlock::_Internal::ellipses(const VectorBlock* msg) {
  return *msg->vector_data_.ellipses_;
}
const ::open_vector_format::VectorBlock_LineSequence3D&
VectorBlock::_Internal::line_sequence_3d(const VectorBlock* msg) {
  return *msg->vector_data_.line_sequence_3d_;
}
const ::open_vector_format::VectorBlock_Hatches3D&
VectorBlock::_Internal::hatches_3d(const VectorBlock* msg) {
  return *msg->vector_data_.hatches_3d_;
}
const ::open_vector_format::VectorBlock_PointSequence3D&
VectorBlock::_Internal::point_sequence_3d(const VectorBlock* msg) {
  return *msg->vector_data_.point_sequence_3d_;
}
const ::open_vector_format::VectorBlock_Arcs3D&
VectorBlock::_Internal::arcs_3d(const VectorBlock* msg) {
  return *msg->vector_data_.arcs_3d_;
}
const ::open_vector_format::VectorBlock_ExposurePause&
VectorBlock::_Internal::exposure_pause(const VectorBlock* msg) {
  return *msg->vector_data_.exposure_pause_;
}
const ::open_vector_format::VectorBlock_LineSequenceParaAdapt&
VectorBlock::_Internal::line_sequence_para_adapt(const VectorBlock* msg) {
  return *msg->vector_data_.line_sequence_para_adapt_;
}
const ::open_vector_format::VectorBlock_HatchesParaAdapt&
VectorBlock::_Internal::_hatchparaadapt(const VectorBlock* msg) {
  return *msg->vector_data_._hatchparaadapt_;
}
const ::open_vector_format::VectorBlock_VectorBlockMetaData&
VectorBlock::_Internal::meta_data(const VectorBlock* msg) {
  return *msg->meta_data_;
}
const ::open_vector_format::VectorBlock_LPBFMetadata&
VectorBlock::_Internal::lpbf_metadata(const VectorBlock* msg) {
  return *msg->process_meta_data_.lpbf_metadata_;
}
const ::open_vector_format::VectorBlock_MicroStructuringMetadata&
VectorBlock::_Internal::micro_structuring_metadata(const VectorBlock* msg) {
  return *msg->process_meta_data_.micro_structuring_metadata_;
}
const ::open_vector_format::VectorBlock_PolishingMetadata&
VectorBlock::_Internal::polishing_metadata(const VectorBlock* msg) {
  return *msg->process_meta_data_.polishing_metadata_;
}
void VectorBlock::set_allocated_line_sequence(::open_vector_format::VectorBlock_LineSequence* line_sequence) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_vector_data();
  if (line_sequence) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(line_sequence);
    if (message_arena != submessage_arena) {
      line_sequence = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, line_sequence, submessage_arena);
    }
    set_has_line_sequence();
    vector_data_.line_sequence_ = line_sequence;
  }
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.VectorBlock.line_sequence)
}
void VectorBlock::set_allocated__hatches(::open_vector_format::VectorBlock_Hatches* _hatches) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_vector_data();
  if (_hatches) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(_hatches);
    if (message_arena != submessage_arena) {
      _hatches = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, _hatches, submessage_arena);
    }
    set_has__hatches();
    vector_data_._hatches_ = _hatches;
  }
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.VectorBlock._hatches)
}
void VectorBlock::set_allocated_point_sequence(::open_vector_format::VectorBlock_PointSequence* point_sequence) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_vector_data();
  if (point_sequence) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(point_sequence);
    if (message_arena != submessage_arena) {
      point_sequence = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point_sequence, submessage_arena);
    }
    set_has_point_sequence();
    vector_data_.point_sequence_ = point_sequence;
  }
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.VectorBlock.point_sequence)
}
void VectorBlock::set_allocated__arcs(::open_vector_format::VectorBlock_Arcs* _arcs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_vector_data();
  if (_arcs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(_arcs);
    if (message_arena != submessage_arena) {
      _arcs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, _arcs, submessage_arena);
    }
    set_has__arcs();
    vector_data_._arcs_ = _arcs;
  }
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.VectorBlock._arcs)
}
void VectorBlock::set_allocated_ellipses(::open_vector_format::VectorBlock_Ellipses* ellipses) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_vector_data();
  if (ellipses) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ellipses);
    if (message_arena != submessage_arena) {
      ellipses = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ellipses, submessage_arena);
    }
    set_has_ellipses();
    vector_data_.ellipses_ = ellipses;
  }
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.VectorBlock.ellipses)
}
void VectorBlock::set_allocated_line_sequence_3d(::open_vector_format::VectorBlock_LineSequence3D* line_sequence_3d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_vector_data();
  if (line_sequence_3d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(line_sequence_3d);
    if (message_arena != submessage_arena) {
      line_sequence_3d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, line_sequence_3d, submessage_arena);
    }
    set_has_line_sequence_3d();
    vector_data_.line_sequence_3d_ = line_sequence_3d;
  }
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.VectorBlock.line_sequence_3d)
}
void VectorBlock::set_allocated_hatches_3d(::open_vector_format::VectorBlock_Hatches3D* hatches_3d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_vector_data();
  if (hatches_3d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hatches_3d);
    if (message_arena != submessage_arena) {
      hatches_3d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hatches_3d, submessage_arena);
    }
    set_has_hatches_3d();
    vector_data_.hatches_3d_ = hatches_3d;
  }
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.VectorBlock.hatches_3d)
}
void VectorBlock::set_allocated_point_sequence_3d(::open_vector_format::VectorBlock_PointSequence3D* point_sequence_3d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_vector_data();
  if (point_sequence_3d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(point_sequence_3d);
    if (message_arena != submessage_arena) {
      point_sequence_3d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point_sequence_3d, submessage_arena);
    }
    set_has_point_sequence_3d();
    vector_data_.point_sequence_3d_ = point_sequence_3d;
  }
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.VectorBlock.point_sequence_3d)
}
void VectorBlock::set_allocated_arcs_3d(::open_vector_format::VectorBlock_Arcs3D* arcs_3d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_vector_data();
  if (arcs_3d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(arcs_3d);
    if (message_arena != submessage_arena) {
      arcs_3d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arcs_3d, submessage_arena);
    }
    set_has_arcs_3d();
    vector_data_.arcs_3d_ = arcs_3d;
  }
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.VectorBlock.arcs_3d)
}
void VectorBlock::set_allocated_exposure_pause(::open_vector_format::VectorBlock_ExposurePause* exposure_pause) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_vector_data();
  if (exposure_pause) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(exposure_pause);
    if (message_arena != submessage_arena) {
      exposure_pause = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exposure_pause, submessage_arena);
    }
    set_has_exposure_pause();
    vector_data_.exposure_pause_ = exposure_pause;
  }
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.VectorBlock.exposure_pause)
}
void VectorBlock::set_allocated_line_sequence_para_adapt(::open_vector_format::VectorBlock_LineSequenceParaAdapt* line_sequence_para_adapt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_vector_data();
  if (line_sequence_para_adapt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(line_sequence_para_adapt);
    if (message_arena != submessage_arena) {
      line_sequence_para_adapt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, line_sequence_para_adapt, submessage_arena);
    }
    set_has_line_sequence_para_adapt();
    vector_data_.line_sequence_para_adapt_ = line_sequence_para_adapt;
  }
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.VectorBlock.line_sequence_para_adapt)
}
void VectorBlock::set_allocated__hatchparaadapt(::open_vector_format::VectorBlock_HatchesParaAdapt* _hatchparaadapt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_vector_data();
  if (_hatchparaadapt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(_hatchparaadapt);
    if (message_arena != submessage_arena) {
      _hatchparaadapt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, _hatchparaadapt, submessage_arena);
    }
    set_has__hatchparaadapt();
    vector_data_._hatchparaadapt_ = _hatchparaadapt;
  }
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.VectorBlock._hatchParaAdapt)
}
void VectorBlock::set_allocated_lpbf_metadata(::open_vector_format::VectorBlock_LPBFMetadata* lpbf_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_process_meta_data();
  if (lpbf_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lpbf_metadata);
    if (message_arena != submessage_arena) {
      lpbf_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lpbf_metadata, submessage_arena);
    }
    set_has_lpbf_metadata();
    process_meta_data_.lpbf_metadata_ = lpbf_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.VectorBlock.lpbf_metadata)
}
void VectorBlock::set_allocated_micro_structuring_metadata(::open_vector_format::VectorBlock_MicroStructuringMetadata* micro_structuring_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_process_meta_data();
  if (micro_structuring_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(micro_structuring_metadata);
    if (message_arena != submessage_arena) {
      micro_structuring_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, micro_structuring_metadata, submessage_arena);
    }
    set_has_micro_structuring_metadata();
    process_meta_data_.micro_structuring_metadata_ = micro_structuring_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.VectorBlock.micro_structuring_metadata)
}
void VectorBlock::set_allocated_polishing_metadata(::open_vector_format::VectorBlock_PolishingMetadata* polishing_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_process_meta_data();
  if (polishing_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(polishing_metadata);
    if (message_arena != submessage_arena) {
      polishing_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, polishing_metadata, submessage_arena);
    }
    set_has_polishing_metadata();
    process_meta_data_.polishing_metadata_ = polishing_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.VectorBlock.polishing_metadata)
}
VectorBlock::VectorBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:open_vector_format.VectorBlock)
}
VectorBlock::VectorBlock(const VectorBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_meta_data()) {
    meta_data_ = new ::open_vector_format::VectorBlock_VectorBlockMetaData(*from.meta_data_);
  } else {
    meta_data_ = nullptr;
  }
  ::memcpy(&marking_params_key_, &from.marking_params_key_,
    static_cast<size_t>(reinterpret_cast<char*>(&repeats_) -
    reinterpret_cast<char*>(&marking_params_key_)) + sizeof(repeats_));
  clear_has_vector_data();
  switch (from.vector_data_case()) {
    case kLineSequence: {
      _internal_mutable_line_sequence()->::open_vector_format::VectorBlock_LineSequence::MergeFrom(from._internal_line_sequence());
      break;
    }
    case kHatches: {
      _internal_mutable__hatches()->::open_vector_format::VectorBlock_Hatches::MergeFrom(from._internal__hatches());
      break;
    }
    case kPointSequence: {
      _internal_mutable_point_sequence()->::open_vector_format::VectorBlock_PointSequence::MergeFrom(from._internal_point_sequence());
      break;
    }
    case kArcs: {
      _internal_mutable__arcs()->::open_vector_format::VectorBlock_Arcs::MergeFrom(from._internal__arcs());
      break;
    }
    case kEllipses: {
      _internal_mutable_ellipses()->::open_vector_format::VectorBlock_Ellipses::MergeFrom(from._internal_ellipses());
      break;
    }
    case kLineSequence3D: {
      _internal_mutable_line_sequence_3d()->::open_vector_format::VectorBlock_LineSequence3D::MergeFrom(from._internal_line_sequence_3d());
      break;
    }
    case kHatches3D: {
      _internal_mutable_hatches_3d()->::open_vector_format::VectorBlock_Hatches3D::MergeFrom(from._internal_hatches_3d());
      break;
    }
    case kPointSequence3D: {
      _internal_mutable_point_sequence_3d()->::open_vector_format::VectorBlock_PointSequence3D::MergeFrom(from._internal_point_sequence_3d());
      break;
    }
    case kArcs3D: {
      _internal_mutable_arcs_3d()->::open_vector_format::VectorBlock_Arcs3D::MergeFrom(from._internal_arcs_3d());
      break;
    }
    case kExposurePause: {
      _internal_mutable_exposure_pause()->::open_vector_format::VectorBlock_ExposurePause::MergeFrom(from._internal_exposure_pause());
      break;
    }
    case kLineSequenceParaAdapt: {
      _internal_mutable_line_sequence_para_adapt()->::open_vector_format::VectorBlock_LineSequenceParaAdapt::MergeFrom(from._internal_line_sequence_para_adapt());
      break;
    }
    case kHatchParaAdapt: {
      _internal_mutable__hatchparaadapt()->::open_vector_format::VectorBlock_HatchesParaAdapt::MergeFrom(from._internal__hatchparaadapt());
      break;
    }
    case VECTOR_DATA_NOT_SET: {
      break;
    }
  }
  clear_has_process_meta_data();
  switch (from.process_meta_data_case()) {
    case kLpbfMetadata: {
      _internal_mutable_lpbf_metadata()->::open_vector_format::VectorBlock_LPBFMetadata::MergeFrom(from._internal_lpbf_metadata());
      break;
    }
    case kMicroStructuringMetadata: {
      _internal_mutable_micro_structuring_metadata()->::open_vector_format::VectorBlock_MicroStructuringMetadata::MergeFrom(from._internal_micro_structuring_metadata());
      break;
    }
    case kPolishingMetadata: {
      _internal_mutable_polishing_metadata()->::open_vector_format::VectorBlock_PolishingMetadata::MergeFrom(from._internal_polishing_metadata());
      break;
    }
    case PROCESS_META_DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:open_vector_format.VectorBlock)
}

void VectorBlock::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&meta_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&repeats_) -
    reinterpret_cast<char*>(&meta_data_)) + sizeof(repeats_));
clear_has_vector_data();
clear_has_process_meta_data();
}

VectorBlock::~VectorBlock() {
  // @@protoc_insertion_point(destructor:open_vector_format.VectorBlock)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VectorBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete meta_data_;
  if (has_vector_data()) {
    clear_vector_data();
  }
  if (has_process_meta_data()) {
    clear_process_meta_data();
  }
}

void VectorBlock::ArenaDtor(void* object) {
  VectorBlock* _this = reinterpret_cast< VectorBlock* >(object);
  (void)_this;
}
void VectorBlock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorBlock::clear_vector_data() {
// @@protoc_insertion_point(one_of_clear_start:open_vector_format.VectorBlock)
  switch (vector_data_case()) {
    case kLineSequence: {
      if (GetArena() == nullptr) {
        delete vector_data_.line_sequence_;
      }
      break;
    }
    case kHatches: {
      if (GetArena() == nullptr) {
        delete vector_data_._hatches_;
      }
      break;
    }
    case kPointSequence: {
      if (GetArena() == nullptr) {
        delete vector_data_.point_sequence_;
      }
      break;
    }
    case kArcs: {
      if (GetArena() == nullptr) {
        delete vector_data_._arcs_;
      }
      break;
    }
    case kEllipses: {
      if (GetArena() == nullptr) {
        delete vector_data_.ellipses_;
      }
      break;
    }
    case kLineSequence3D: {
      if (GetArena() == nullptr) {
        delete vector_data_.line_sequence_3d_;
      }
      break;
    }
    case kHatches3D: {
      if (GetArena() == nullptr) {
        delete vector_data_.hatches_3d_;
      }
      break;
    }
    case kPointSequence3D: {
      if (GetArena() == nullptr) {
        delete vector_data_.point_sequence_3d_;
      }
      break;
    }
    case kArcs3D: {
      if (GetArena() == nullptr) {
        delete vector_data_.arcs_3d_;
      }
      break;
    }
    case kExposurePause: {
      if (GetArena() == nullptr) {
        delete vector_data_.exposure_pause_;
      }
      break;
    }
    case kLineSequenceParaAdapt: {
      if (GetArena() == nullptr) {
        delete vector_data_.line_sequence_para_adapt_;
      }
      break;
    }
    case kHatchParaAdapt: {
      if (GetArena() == nullptr) {
        delete vector_data_._hatchparaadapt_;
      }
      break;
    }
    case VECTOR_DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VECTOR_DATA_NOT_SET;
}

void VectorBlock::clear_process_meta_data() {
// @@protoc_insertion_point(one_of_clear_start:open_vector_format.VectorBlock)
  switch (process_meta_data_case()) {
    case kLpbfMetadata: {
      if (GetArena() == nullptr) {
        delete process_meta_data_.lpbf_metadata_;
      }
      break;
    }
    case kMicroStructuringMetadata: {
      if (GetArena() == nullptr) {
        delete process_meta_data_.micro_structuring_metadata_;
      }
      break;
    }
    case kPolishingMetadata: {
      if (GetArena() == nullptr) {
        delete process_meta_data_.polishing_metadata_;
      }
      break;
    }
    case PROCESS_META_DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = PROCESS_META_DATA_NOT_SET;
}


void VectorBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:open_vector_format.VectorBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && meta_data_ != nullptr) {
    delete meta_data_;
  }
  meta_data_ = nullptr;
  ::memset(&marking_params_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&repeats_) -
      reinterpret_cast<char*>(&marking_params_key_)) + sizeof(repeats_));
  clear_vector_data();
  clear_process_meta_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .open_vector_format.VectorBlock.LineSequence line_sequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_line_sequence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .open_vector_format.VectorBlock.Hatches _hatches = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable__hatches(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .open_vector_format.VectorBlock.PointSequence point_sequence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_point_sequence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .open_vector_format.VectorBlock.Arcs _arcs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable__arcs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .open_vector_format.VectorBlock.Ellipses ellipses = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ellipses(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .open_vector_format.VectorBlock.LineSequence3D line_sequence_3d = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_line_sequence_3d(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .open_vector_format.VectorBlock.Hatches3D hatches_3d = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_hatches_3d(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .open_vector_format.VectorBlock.PointSequence3D point_sequence_3d = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_point_sequence_3d(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .open_vector_format.VectorBlock.Arcs3D arcs_3d = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_arcs_3d(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .open_vector_format.VectorBlock.ExposurePause exposure_pause = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_exposure_pause(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .open_vector_format.VectorBlock.LineSequenceParaAdapt line_sequence_para_adapt = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_line_sequence_para_adapt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .open_vector_format.VectorBlock.HatchesParaAdapt _hatchParaAdapt = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable__hatchparaadapt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 marking_params_key = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          marking_params_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 laser_index = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          laser_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 repeats = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          repeats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .open_vector_format.VectorBlock.VectorBlockMetaData meta_data = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .open_vector_format.VectorBlock.LPBFMetadata lpbf_metadata = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_lpbf_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .open_vector_format.VectorBlock.MicroStructuringMetadata micro_structuring_metadata = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_micro_structuring_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .open_vector_format.VectorBlock.PolishingMetadata polishing_metadata = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_polishing_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VectorBlock::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:open_vector_format.VectorBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .open_vector_format.VectorBlock.LineSequence line_sequence = 1;
  if (_internal_has_line_sequence()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::line_sequence(this), target, stream);
  }

  // .open_vector_format.VectorBlock.Hatches _hatches = 2;
  if (_internal_has__hatches()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::_hatches(this), target, stream);
  }

  // .open_vector_format.VectorBlock.PointSequence point_sequence = 3;
  if (_internal_has_point_sequence()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::point_sequence(this), target, stream);
  }

  // .open_vector_format.VectorBlock.Arcs _arcs = 4;
  if (_internal_has__arcs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::_arcs(this), target, stream);
  }

  // .open_vector_format.VectorBlock.Ellipses ellipses = 5;
  if (_internal_has_ellipses()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::ellipses(this), target, stream);
  }

  // .open_vector_format.VectorBlock.LineSequence3D line_sequence_3d = 6;
  if (_internal_has_line_sequence_3d()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::line_sequence_3d(this), target, stream);
  }

  // .open_vector_format.VectorBlock.Hatches3D hatches_3d = 7;
  if (_internal_has_hatches_3d()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::hatches_3d(this), target, stream);
  }

  // .open_vector_format.VectorBlock.PointSequence3D point_sequence_3d = 8;
  if (_internal_has_point_sequence_3d()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::point_sequence_3d(this), target, stream);
  }

  // .open_vector_format.VectorBlock.Arcs3D arcs_3d = 9;
  if (_internal_has_arcs_3d()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::arcs_3d(this), target, stream);
  }

  // .open_vector_format.VectorBlock.ExposurePause exposure_pause = 10;
  if (_internal_has_exposure_pause()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::exposure_pause(this), target, stream);
  }

  // .open_vector_format.VectorBlock.LineSequenceParaAdapt line_sequence_para_adapt = 11;
  if (_internal_has_line_sequence_para_adapt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::line_sequence_para_adapt(this), target, stream);
  }

  // .open_vector_format.VectorBlock.HatchesParaAdapt _hatchParaAdapt = 12;
  if (_internal_has__hatchparaadapt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::_hatchparaadapt(this), target, stream);
  }

  // int32 marking_params_key = 50;
  if (this->marking_params_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(50, this->_internal_marking_params_key(), target);
  }

  // int32 laser_index = 53;
  if (this->laser_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(53, this->_internal_laser_index(), target);
  }

  // uint64 repeats = 54;
  if (this->repeats() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(54, this->_internal_repeats(), target);
  }

  // .open_vector_format.VectorBlock.VectorBlockMetaData meta_data = 100;
  if (this->has_meta_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::meta_data(this), target, stream);
  }

  // .open_vector_format.VectorBlock.LPBFMetadata lpbf_metadata = 101;
  if (_internal_has_lpbf_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::lpbf_metadata(this), target, stream);
  }

  // .open_vector_format.VectorBlock.MicroStructuringMetadata micro_structuring_metadata = 102;
  if (_internal_has_micro_structuring_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        102, _Internal::micro_structuring_metadata(this), target, stream);
  }

  // .open_vector_format.VectorBlock.PolishingMetadata polishing_metadata = 103;
  if (_internal_has_polishing_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        103, _Internal::polishing_metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:open_vector_format.VectorBlock)
  return target;
}

size_t VectorBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:open_vector_format.VectorBlock)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .open_vector_format.VectorBlock.VectorBlockMetaData meta_data = 100;
  if (this->has_meta_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_data_);
  }

  // int32 marking_params_key = 50;
  if (this->marking_params_key() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_marking_params_key());
  }

  // int32 laser_index = 53;
  if (this->laser_index() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_laser_index());
  }

  // uint64 repeats = 54;
  if (this->repeats() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_repeats());
  }

  switch (vector_data_case()) {
    // .open_vector_format.VectorBlock.LineSequence line_sequence = 1;
    case kLineSequence: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vector_data_.line_sequence_);
      break;
    }
    // .open_vector_format.VectorBlock.Hatches _hatches = 2;
    case kHatches: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vector_data_._hatches_);
      break;
    }
    // .open_vector_format.VectorBlock.PointSequence point_sequence = 3;
    case kPointSequence: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vector_data_.point_sequence_);
      break;
    }
    // .open_vector_format.VectorBlock.Arcs _arcs = 4;
    case kArcs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vector_data_._arcs_);
      break;
    }
    // .open_vector_format.VectorBlock.Ellipses ellipses = 5;
    case kEllipses: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vector_data_.ellipses_);
      break;
    }
    // .open_vector_format.VectorBlock.LineSequence3D line_sequence_3d = 6;
    case kLineSequence3D: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vector_data_.line_sequence_3d_);
      break;
    }
    // .open_vector_format.VectorBlock.Hatches3D hatches_3d = 7;
    case kHatches3D: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vector_data_.hatches_3d_);
      break;
    }
    // .open_vector_format.VectorBlock.PointSequence3D point_sequence_3d = 8;
    case kPointSequence3D: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vector_data_.point_sequence_3d_);
      break;
    }
    // .open_vector_format.VectorBlock.Arcs3D arcs_3d = 9;
    case kArcs3D: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vector_data_.arcs_3d_);
      break;
    }
    // .open_vector_format.VectorBlock.ExposurePause exposure_pause = 10;
    case kExposurePause: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vector_data_.exposure_pause_);
      break;
    }
    // .open_vector_format.VectorBlock.LineSequenceParaAdapt line_sequence_para_adapt = 11;
    case kLineSequenceParaAdapt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vector_data_.line_sequence_para_adapt_);
      break;
    }
    // .open_vector_format.VectorBlock.HatchesParaAdapt _hatchParaAdapt = 12;
    case kHatchParaAdapt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vector_data_._hatchparaadapt_);
      break;
    }
    case VECTOR_DATA_NOT_SET: {
      break;
    }
  }
  switch (process_meta_data_case()) {
    // .open_vector_format.VectorBlock.LPBFMetadata lpbf_metadata = 101;
    case kLpbfMetadata: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *process_meta_data_.lpbf_metadata_);
      break;
    }
    // .open_vector_format.VectorBlock.MicroStructuringMetadata micro_structuring_metadata = 102;
    case kMicroStructuringMetadata: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *process_meta_data_.micro_structuring_metadata_);
      break;
    }
    // .open_vector_format.VectorBlock.PolishingMetadata polishing_metadata = 103;
    case kPolishingMetadata: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *process_meta_data_.polishing_metadata_);
      break;
    }
    case PROCESS_META_DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorBlock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:open_vector_format.VectorBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorBlock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VectorBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:open_vector_format.VectorBlock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:open_vector_format.VectorBlock)
    MergeFrom(*source);
  }
}

void VectorBlock::MergeFrom(const VectorBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:open_vector_format.VectorBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_meta_data()) {
    _internal_mutable_meta_data()->::open_vector_format::VectorBlock_VectorBlockMetaData::MergeFrom(from._internal_meta_data());
  }
  if (from.marking_params_key() != 0) {
    _internal_set_marking_params_key(from._internal_marking_params_key());
  }
  if (from.laser_index() != 0) {
    _internal_set_laser_index(from._internal_laser_index());
  }
  if (from.repeats() != 0) {
    _internal_set_repeats(from._internal_repeats());
  }
  switch (from.vector_data_case()) {
    case kLineSequence: {
      _internal_mutable_line_sequence()->::open_vector_format::VectorBlock_LineSequence::MergeFrom(from._internal_line_sequence());
      break;
    }
    case kHatches: {
      _internal_mutable__hatches()->::open_vector_format::VectorBlock_Hatches::MergeFrom(from._internal__hatches());
      break;
    }
    case kPointSequence: {
      _internal_mutable_point_sequence()->::open_vector_format::VectorBlock_PointSequence::MergeFrom(from._internal_point_sequence());
      break;
    }
    case kArcs: {
      _internal_mutable__arcs()->::open_vector_format::VectorBlock_Arcs::MergeFrom(from._internal__arcs());
      break;
    }
    case kEllipses: {
      _internal_mutable_ellipses()->::open_vector_format::VectorBlock_Ellipses::MergeFrom(from._internal_ellipses());
      break;
    }
    case kLineSequence3D: {
      _internal_mutable_line_sequence_3d()->::open_vector_format::VectorBlock_LineSequence3D::MergeFrom(from._internal_line_sequence_3d());
      break;
    }
    case kHatches3D: {
      _internal_mutable_hatches_3d()->::open_vector_format::VectorBlock_Hatches3D::MergeFrom(from._internal_hatches_3d());
      break;
    }
    case kPointSequence3D: {
      _internal_mutable_point_sequence_3d()->::open_vector_format::VectorBlock_PointSequence3D::MergeFrom(from._internal_point_sequence_3d());
      break;
    }
    case kArcs3D: {
      _internal_mutable_arcs_3d()->::open_vector_format::VectorBlock_Arcs3D::MergeFrom(from._internal_arcs_3d());
      break;
    }
    case kExposurePause: {
      _internal_mutable_exposure_pause()->::open_vector_format::VectorBlock_ExposurePause::MergeFrom(from._internal_exposure_pause());
      break;
    }
    case kLineSequenceParaAdapt: {
      _internal_mutable_line_sequence_para_adapt()->::open_vector_format::VectorBlock_LineSequenceParaAdapt::MergeFrom(from._internal_line_sequence_para_adapt());
      break;
    }
    case kHatchParaAdapt: {
      _internal_mutable__hatchparaadapt()->::open_vector_format::VectorBlock_HatchesParaAdapt::MergeFrom(from._internal__hatchparaadapt());
      break;
    }
    case VECTOR_DATA_NOT_SET: {
      break;
    }
  }
  switch (from.process_meta_data_case()) {
    case kLpbfMetadata: {
      _internal_mutable_lpbf_metadata()->::open_vector_format::VectorBlock_LPBFMetadata::MergeFrom(from._internal_lpbf_metadata());
      break;
    }
    case kMicroStructuringMetadata: {
      _internal_mutable_micro_structuring_metadata()->::open_vector_format::VectorBlock_MicroStructuringMetadata::MergeFrom(from._internal_micro_structuring_metadata());
      break;
    }
    case kPolishingMetadata: {
      _internal_mutable_polishing_metadata()->::open_vector_format::VectorBlock_PolishingMetadata::MergeFrom(from._internal_polishing_metadata());
      break;
    }
    case PROCESS_META_DATA_NOT_SET: {
      break;
    }
  }
}

void VectorBlock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:open_vector_format.VectorBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorBlock::CopyFrom(const VectorBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_vector_format.VectorBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorBlock::IsInitialized() const {
  return true;
}

void VectorBlock::InternalSwap(VectorBlock* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VectorBlock, repeats_)
      + sizeof(VectorBlock::repeats_)
      - PROTOBUF_FIELD_OFFSET(VectorBlock, meta_data_)>(
          reinterpret_cast<char*>(&meta_data_),
          reinterpret_cast<char*>(&other->meta_data_));
  swap(vector_data_, other->vector_data_);
  swap(process_meta_data_, other->process_meta_data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorBlock::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace open_vector_format
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::open_vector_format::Job_MarkingParamsMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::open_vector_format::Job_MarkingParamsMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::open_vector_format::Job_MarkingParamsMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::open_vector_format::Job_PartsMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::open_vector_format::Job_PartsMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::open_vector_format::Job_PartsMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::open_vector_format::Job_JobMetaData* Arena::CreateMaybeMessage< ::open_vector_format::Job_JobMetaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::open_vector_format::Job_JobMetaData >(arena);
}
template<> PROTOBUF_NOINLINE ::open_vector_format::Job* Arena::CreateMaybeMessage< ::open_vector_format::Job >(Arena* arena) {
  return Arena::CreateMessageInternal< ::open_vector_format::Job >(arena);
}
template<> PROTOBUF_NOINLINE ::open_vector_format::JobParameters* Arena::CreateMaybeMessage< ::open_vector_format::JobParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::open_vector_format::JobParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::open_vector_format::MarkingParams* Arena::CreateMaybeMessage< ::open_vector_format::MarkingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::open_vector_format::MarkingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::open_vector_format::PowerGradientParams* Arena::CreateMaybeMessage< ::open_vector_format::PowerGradientParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::open_vector_format::PowerGradientParams >(arena);
}
template<> PROTOBUF_NOINLINE ::open_vector_format::Part_GeometryInfo* Arena::CreateMaybeMessage< ::open_vector_format::Part_GeometryInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::open_vector_format::Part_GeometryInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::open_vector_format::Part_Material* Arena::CreateMaybeMessage< ::open_vector_format::Part_Material >(Arena* arena) {
  return Arena::CreateMessageInternal< ::open_vector_format::Part_Material >(arena);
}
template<> PROTOBUF_NOINLINE ::open_vector_format::Part_ProcessStrategy_ProprietaryParam* Arena::CreateMaybeMessage< ::open_vector_format::Part_ProcessStrategy_ProprietaryParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::open_vector_format::Part_ProcessStrategy_ProprietaryParam >(arena);
}
template<> PROTOBUF_NOINLINE ::open_vector_format::Part_ProcessStrategy* Arena::CreateMaybeMessage< ::open_vector_format::Part_ProcessStrategy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::open_vector_format::Part_ProcessStrategy >(arena);
}
template<> PROTOBUF_NOINLINE ::open_vector_format::Part* Arena::CreateMaybeMessage< ::open_vector_format::Part >(Arena* arena) {
  return Arena::CreateMessageInternal< ::open_vector_format::Part >(arena);
}
template<> PROTOBUF_NOINLINE ::open_vector_format::WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::open_vector_format::WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::open_vector_format::WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour* Arena::CreateMaybeMessage< ::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour >(Arena* arena) {
  return Arena::CreateMessageInternal< ::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour >(arena);
}
template<> PROTOBUF_NOINLINE ::open_vector_format::WorkPlane_WorkPlaneMetaData* Arena::CreateMaybeMessage< ::open_vector_format::WorkPlane_WorkPlaneMetaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::open_vector_format::WorkPlane_WorkPlaneMetaData >(arena);
}
template<> PROTOBUF_NOINLINE ::open_vector_format::WorkPlane_Patch* Arena::CreateMaybeMessage< ::open_vector_format::WorkPlane_Patch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::open_vector_format::WorkPlane_Patch >(arena);
}
template<> PROTOBUF_NOINLINE ::open_vector_format::WorkPlane* Arena::CreateMaybeMessage< ::open_vector_format::WorkPlane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::open_vector_format::WorkPlane >(arena);
}
template<> PROTOBUF_NOINLINE ::open_vector_format::VectorBlock_VectorBlockMetaData* Arena::CreateMaybeMessage< ::open_vector_format::VectorBlock_VectorBlockMetaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::open_vector_format::VectorBlock_VectorBlockMetaData >(arena);
}
template<> PROTOBUF_NOINLINE ::open_vector_format::VectorBlock_LPBFMetadata* Arena::CreateMaybeMessage< ::open_vector_format::VectorBlock_LPBFMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::open_vector_format::VectorBlock_LPBFMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::open_vector_format::VectorBlock_MicroStructuringMetadata* Arena::CreateMaybeMessage< ::open_vector_format::VectorBlock_MicroStructuringMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::open_vector_format::VectorBlock_MicroStructuringMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::open_vector_format::VectorBlock_PolishingMetadata* Arena::CreateMaybeMessage< ::open_vector_format::VectorBlock_PolishingMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::open_vector_format::VectorBlock_PolishingMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::open_vector_format::VectorBlock_LineSequence* Arena::CreateMaybeMessage< ::open_vector_format::VectorBlock_LineSequence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::open_vector_format::VectorBlock_LineSequence >(arena);
}
template<> PROTOBUF_NOINLINE ::open_vector_format::VectorBlock_LineSequence3D* Arena::CreateMaybeMessage< ::open_vector_format::VectorBlock_LineSequence3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::open_vector_format::VectorBlock_LineSequence3D >(arena);
}
template<> PROTOBUF_NOINLINE ::open_vector_format::VectorBlock_Hatches* Arena::CreateMaybeMessage< ::open_vector_format::VectorBlock_Hatches >(Arena* arena) {
  return Arena::CreateMessageInternal< ::open_vector_format::VectorBlock_Hatches >(arena);
}
template<> PROTOBUF_NOINLINE ::open_vector_format::VectorBlock_Hatches3D* Arena::CreateMaybeMessage< ::open_vector_format::VectorBlock_Hatches3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::open_vector_format::VectorBlock_Hatches3D >(arena);
}
template<> PROTOBUF_NOINLINE ::open_vector_format::VectorBlock_PointSequence* Arena::CreateMaybeMessage< ::open_vector_format::VectorBlock_PointSequence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::open_vector_format::VectorBlock_PointSequence >(arena);
}
template<> PROTOBUF_NOINLINE ::open_vector_format::VectorBlock_PointSequence3D* Arena::CreateMaybeMessage< ::open_vector_format::VectorBlock_PointSequence3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::open_vector_format::VectorBlock_PointSequence3D >(arena);
}
template<> PROTOBUF_NOINLINE ::open_vector_format::VectorBlock_Arcs* Arena::CreateMaybeMessage< ::open_vector_format::VectorBlock_Arcs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::open_vector_format::VectorBlock_Arcs >(arena);
}
template<> PROTOBUF_NOINLINE ::open_vector_format::VectorBlock_Arcs3D* Arena::CreateMaybeMessage< ::open_vector_format::VectorBlock_Arcs3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::open_vector_format::VectorBlock_Arcs3D >(arena);
}
template<> PROTOBUF_NOINLINE ::open_vector_format::VectorBlock_Ellipses* Arena::CreateMaybeMessage< ::open_vector_format::VectorBlock_Ellipses >(Arena* arena) {
  return Arena::CreateMessageInternal< ::open_vector_format::VectorBlock_Ellipses >(arena);
}
template<> PROTOBUF_NOINLINE ::open_vector_format::VectorBlock_ExposurePause* Arena::CreateMaybeMessage< ::open_vector_format::VectorBlock_ExposurePause >(Arena* arena) {
  return Arena::CreateMessageInternal< ::open_vector_format::VectorBlock_ExposurePause >(arena);
}
template<> PROTOBUF_NOINLINE ::open_vector_format::VectorBlock_LineSequenceParaAdapt* Arena::CreateMaybeMessage< ::open_vector_format::VectorBlock_LineSequenceParaAdapt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::open_vector_format::VectorBlock_LineSequenceParaAdapt >(arena);
}
template<> PROTOBUF_NOINLINE ::open_vector_format::VectorBlock_HatchesParaAdapt* Arena::CreateMaybeMessage< ::open_vector_format::VectorBlock_HatchesParaAdapt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::open_vector_format::VectorBlock_HatchesParaAdapt >(arena);
}
template<> PROTOBUF_NOINLINE ::open_vector_format::VectorBlock* Arena::CreateMaybeMessage< ::open_vector_format::VectorBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::open_vector_format::VectorBlock >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
