// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: open_vector_format.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_open_5fvector_5fformat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_open_5fvector_5fformat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_open_5fvector_5fformat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_open_5fvector_5fformat_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[34]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_open_5fvector_5fformat_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_open_5fvector_5fformat_2eproto_metadata_getter(int index);
namespace open_vector_format {
class Job;
struct JobDefaultTypeInternal;
extern JobDefaultTypeInternal _Job_default_instance_;
class JobParameters;
struct JobParametersDefaultTypeInternal;
extern JobParametersDefaultTypeInternal _JobParameters_default_instance_;
class Job_JobMetaData;
struct Job_JobMetaDataDefaultTypeInternal;
extern Job_JobMetaDataDefaultTypeInternal _Job_JobMetaData_default_instance_;
class Job_MarkingParamsMapEntry_DoNotUse;
struct Job_MarkingParamsMapEntry_DoNotUseDefaultTypeInternal;
extern Job_MarkingParamsMapEntry_DoNotUseDefaultTypeInternal _Job_MarkingParamsMapEntry_DoNotUse_default_instance_;
class Job_PartsMapEntry_DoNotUse;
struct Job_PartsMapEntry_DoNotUseDefaultTypeInternal;
extern Job_PartsMapEntry_DoNotUseDefaultTypeInternal _Job_PartsMapEntry_DoNotUse_default_instance_;
class MarkingParams;
struct MarkingParamsDefaultTypeInternal;
extern MarkingParamsDefaultTypeInternal _MarkingParams_default_instance_;
class Part;
struct PartDefaultTypeInternal;
extern PartDefaultTypeInternal _Part_default_instance_;
class Part_GeometryInfo;
struct Part_GeometryInfoDefaultTypeInternal;
extern Part_GeometryInfoDefaultTypeInternal _Part_GeometryInfo_default_instance_;
class Part_Material;
struct Part_MaterialDefaultTypeInternal;
extern Part_MaterialDefaultTypeInternal _Part_Material_default_instance_;
class Part_ProcessStrategy;
struct Part_ProcessStrategyDefaultTypeInternal;
extern Part_ProcessStrategyDefaultTypeInternal _Part_ProcessStrategy_default_instance_;
class Part_ProcessStrategy_ProprietaryParam;
struct Part_ProcessStrategy_ProprietaryParamDefaultTypeInternal;
extern Part_ProcessStrategy_ProprietaryParamDefaultTypeInternal _Part_ProcessStrategy_ProprietaryParam_default_instance_;
class PowerGradientParams;
struct PowerGradientParamsDefaultTypeInternal;
extern PowerGradientParamsDefaultTypeInternal _PowerGradientParams_default_instance_;
class VectorBlock;
struct VectorBlockDefaultTypeInternal;
extern VectorBlockDefaultTypeInternal _VectorBlock_default_instance_;
class VectorBlock_Arcs;
struct VectorBlock_ArcsDefaultTypeInternal;
extern VectorBlock_ArcsDefaultTypeInternal _VectorBlock_Arcs_default_instance_;
class VectorBlock_Arcs3D;
struct VectorBlock_Arcs3DDefaultTypeInternal;
extern VectorBlock_Arcs3DDefaultTypeInternal _VectorBlock_Arcs3D_default_instance_;
class VectorBlock_Ellipses;
struct VectorBlock_EllipsesDefaultTypeInternal;
extern VectorBlock_EllipsesDefaultTypeInternal _VectorBlock_Ellipses_default_instance_;
class VectorBlock_ExposurePause;
struct VectorBlock_ExposurePauseDefaultTypeInternal;
extern VectorBlock_ExposurePauseDefaultTypeInternal _VectorBlock_ExposurePause_default_instance_;
class VectorBlock_Hatches;
struct VectorBlock_HatchesDefaultTypeInternal;
extern VectorBlock_HatchesDefaultTypeInternal _VectorBlock_Hatches_default_instance_;
class VectorBlock_Hatches3D;
struct VectorBlock_Hatches3DDefaultTypeInternal;
extern VectorBlock_Hatches3DDefaultTypeInternal _VectorBlock_Hatches3D_default_instance_;
class VectorBlock_HatchesParaAdapt;
struct VectorBlock_HatchesParaAdaptDefaultTypeInternal;
extern VectorBlock_HatchesParaAdaptDefaultTypeInternal _VectorBlock_HatchesParaAdapt_default_instance_;
class VectorBlock_LPBFMetadata;
struct VectorBlock_LPBFMetadataDefaultTypeInternal;
extern VectorBlock_LPBFMetadataDefaultTypeInternal _VectorBlock_LPBFMetadata_default_instance_;
class VectorBlock_LineSequence;
struct VectorBlock_LineSequenceDefaultTypeInternal;
extern VectorBlock_LineSequenceDefaultTypeInternal _VectorBlock_LineSequence_default_instance_;
class VectorBlock_LineSequence3D;
struct VectorBlock_LineSequence3DDefaultTypeInternal;
extern VectorBlock_LineSequence3DDefaultTypeInternal _VectorBlock_LineSequence3D_default_instance_;
class VectorBlock_LineSequenceParaAdapt;
struct VectorBlock_LineSequenceParaAdaptDefaultTypeInternal;
extern VectorBlock_LineSequenceParaAdaptDefaultTypeInternal _VectorBlock_LineSequenceParaAdapt_default_instance_;
class VectorBlock_MicroStructuringMetadata;
struct VectorBlock_MicroStructuringMetadataDefaultTypeInternal;
extern VectorBlock_MicroStructuringMetadataDefaultTypeInternal _VectorBlock_MicroStructuringMetadata_default_instance_;
class VectorBlock_PointSequence;
struct VectorBlock_PointSequenceDefaultTypeInternal;
extern VectorBlock_PointSequenceDefaultTypeInternal _VectorBlock_PointSequence_default_instance_;
class VectorBlock_PointSequence3D;
struct VectorBlock_PointSequence3DDefaultTypeInternal;
extern VectorBlock_PointSequence3DDefaultTypeInternal _VectorBlock_PointSequence3D_default_instance_;
class VectorBlock_PolishingMetadata;
struct VectorBlock_PolishingMetadataDefaultTypeInternal;
extern VectorBlock_PolishingMetadataDefaultTypeInternal _VectorBlock_PolishingMetadata_default_instance_;
class VectorBlock_VectorBlockMetaData;
struct VectorBlock_VectorBlockMetaDataDefaultTypeInternal;
extern VectorBlock_VectorBlockMetaDataDefaultTypeInternal _VectorBlock_VectorBlockMetaData_default_instance_;
class WorkPlane;
struct WorkPlaneDefaultTypeInternal;
extern WorkPlaneDefaultTypeInternal _WorkPlane_default_instance_;
class WorkPlane_Patch;
struct WorkPlane_PatchDefaultTypeInternal;
extern WorkPlane_PatchDefaultTypeInternal _WorkPlane_Patch_default_instance_;
class WorkPlane_WorkPlaneMetaData;
struct WorkPlane_WorkPlaneMetaDataDefaultTypeInternal;
extern WorkPlane_WorkPlaneMetaDataDefaultTypeInternal _WorkPlane_WorkPlaneMetaData_default_instance_;
class WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse;
struct WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUseDefaultTypeInternal;
extern WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUseDefaultTypeInternal _WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse_default_instance_;
class WorkPlane_WorkPlaneMetaData_closedContour;
struct WorkPlane_WorkPlaneMetaData_closedContourDefaultTypeInternal;
extern WorkPlane_WorkPlaneMetaData_closedContourDefaultTypeInternal _WorkPlane_WorkPlaneMetaData_closedContour_default_instance_;
}  // namespace open_vector_format
PROTOBUF_NAMESPACE_OPEN
template<> ::open_vector_format::Job* Arena::CreateMaybeMessage<::open_vector_format::Job>(Arena*);
template<> ::open_vector_format::JobParameters* Arena::CreateMaybeMessage<::open_vector_format::JobParameters>(Arena*);
template<> ::open_vector_format::Job_JobMetaData* Arena::CreateMaybeMessage<::open_vector_format::Job_JobMetaData>(Arena*);
template<> ::open_vector_format::Job_MarkingParamsMapEntry_DoNotUse* Arena::CreateMaybeMessage<::open_vector_format::Job_MarkingParamsMapEntry_DoNotUse>(Arena*);
template<> ::open_vector_format::Job_PartsMapEntry_DoNotUse* Arena::CreateMaybeMessage<::open_vector_format::Job_PartsMapEntry_DoNotUse>(Arena*);
template<> ::open_vector_format::MarkingParams* Arena::CreateMaybeMessage<::open_vector_format::MarkingParams>(Arena*);
template<> ::open_vector_format::Part* Arena::CreateMaybeMessage<::open_vector_format::Part>(Arena*);
template<> ::open_vector_format::Part_GeometryInfo* Arena::CreateMaybeMessage<::open_vector_format::Part_GeometryInfo>(Arena*);
template<> ::open_vector_format::Part_Material* Arena::CreateMaybeMessage<::open_vector_format::Part_Material>(Arena*);
template<> ::open_vector_format::Part_ProcessStrategy* Arena::CreateMaybeMessage<::open_vector_format::Part_ProcessStrategy>(Arena*);
template<> ::open_vector_format::Part_ProcessStrategy_ProprietaryParam* Arena::CreateMaybeMessage<::open_vector_format::Part_ProcessStrategy_ProprietaryParam>(Arena*);
template<> ::open_vector_format::PowerGradientParams* Arena::CreateMaybeMessage<::open_vector_format::PowerGradientParams>(Arena*);
template<> ::open_vector_format::VectorBlock* Arena::CreateMaybeMessage<::open_vector_format::VectorBlock>(Arena*);
template<> ::open_vector_format::VectorBlock_Arcs* Arena::CreateMaybeMessage<::open_vector_format::VectorBlock_Arcs>(Arena*);
template<> ::open_vector_format::VectorBlock_Arcs3D* Arena::CreateMaybeMessage<::open_vector_format::VectorBlock_Arcs3D>(Arena*);
template<> ::open_vector_format::VectorBlock_Ellipses* Arena::CreateMaybeMessage<::open_vector_format::VectorBlock_Ellipses>(Arena*);
template<> ::open_vector_format::VectorBlock_ExposurePause* Arena::CreateMaybeMessage<::open_vector_format::VectorBlock_ExposurePause>(Arena*);
template<> ::open_vector_format::VectorBlock_Hatches* Arena::CreateMaybeMessage<::open_vector_format::VectorBlock_Hatches>(Arena*);
template<> ::open_vector_format::VectorBlock_Hatches3D* Arena::CreateMaybeMessage<::open_vector_format::VectorBlock_Hatches3D>(Arena*);
template<> ::open_vector_format::VectorBlock_HatchesParaAdapt* Arena::CreateMaybeMessage<::open_vector_format::VectorBlock_HatchesParaAdapt>(Arena*);
template<> ::open_vector_format::VectorBlock_LPBFMetadata* Arena::CreateMaybeMessage<::open_vector_format::VectorBlock_LPBFMetadata>(Arena*);
template<> ::open_vector_format::VectorBlock_LineSequence* Arena::CreateMaybeMessage<::open_vector_format::VectorBlock_LineSequence>(Arena*);
template<> ::open_vector_format::VectorBlock_LineSequence3D* Arena::CreateMaybeMessage<::open_vector_format::VectorBlock_LineSequence3D>(Arena*);
template<> ::open_vector_format::VectorBlock_LineSequenceParaAdapt* Arena::CreateMaybeMessage<::open_vector_format::VectorBlock_LineSequenceParaAdapt>(Arena*);
template<> ::open_vector_format::VectorBlock_MicroStructuringMetadata* Arena::CreateMaybeMessage<::open_vector_format::VectorBlock_MicroStructuringMetadata>(Arena*);
template<> ::open_vector_format::VectorBlock_PointSequence* Arena::CreateMaybeMessage<::open_vector_format::VectorBlock_PointSequence>(Arena*);
template<> ::open_vector_format::VectorBlock_PointSequence3D* Arena::CreateMaybeMessage<::open_vector_format::VectorBlock_PointSequence3D>(Arena*);
template<> ::open_vector_format::VectorBlock_PolishingMetadata* Arena::CreateMaybeMessage<::open_vector_format::VectorBlock_PolishingMetadata>(Arena*);
template<> ::open_vector_format::VectorBlock_VectorBlockMetaData* Arena::CreateMaybeMessage<::open_vector_format::VectorBlock_VectorBlockMetaData>(Arena*);
template<> ::open_vector_format::WorkPlane* Arena::CreateMaybeMessage<::open_vector_format::WorkPlane>(Arena*);
template<> ::open_vector_format::WorkPlane_Patch* Arena::CreateMaybeMessage<::open_vector_format::WorkPlane_Patch>(Arena*);
template<> ::open_vector_format::WorkPlane_WorkPlaneMetaData* Arena::CreateMaybeMessage<::open_vector_format::WorkPlane_WorkPlaneMetaData>(Arena*);
template<> ::open_vector_format::WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse* Arena::CreateMaybeMessage<::open_vector_format::WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse>(Arena*);
template<> ::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour* Arena::CreateMaybeMessage<::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace open_vector_format {

enum MarkingParams_MarkingMode : int {
  MarkingParams_MarkingMode_NO_SKY = 0,
  MarkingParams_MarkingMode_SKY_1 = 1,
  MarkingParams_MarkingMode_SKY_2 = 2,
  MarkingParams_MarkingMode_SKY_3 = 3,
  MarkingParams_MarkingMode_MarkingParams_MarkingMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MarkingParams_MarkingMode_MarkingParams_MarkingMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MarkingParams_MarkingMode_IsValid(int value);
constexpr MarkingParams_MarkingMode MarkingParams_MarkingMode_MarkingMode_MIN = MarkingParams_MarkingMode_NO_SKY;
constexpr MarkingParams_MarkingMode MarkingParams_MarkingMode_MarkingMode_MAX = MarkingParams_MarkingMode_SKY_3;
constexpr int MarkingParams_MarkingMode_MarkingMode_ARRAYSIZE = MarkingParams_MarkingMode_MarkingMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MarkingParams_MarkingMode_descriptor();
template<typename T>
inline const std::string& MarkingParams_MarkingMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MarkingParams_MarkingMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MarkingParams_MarkingMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MarkingParams_MarkingMode_descriptor(), enum_t_value);
}
inline bool MarkingParams_MarkingMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MarkingParams_MarkingMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MarkingParams_MarkingMode>(
    MarkingParams_MarkingMode_descriptor(), name, value);
}
enum MarkingParams_WobbleMode : int {
  MarkingParams_WobbleMode_NO_WOBBLE = 0,
  MarkingParams_WobbleMode_ELLIPSE_WOBBLE = 1,
  MarkingParams_WobbleMode_STANDING_EIGHT_WOBBLE = 2,
  MarkingParams_WobbleMode_LYING_EIGHT_WOBBLE = 3,
  MarkingParams_WobbleMode_MarkingParams_WobbleMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MarkingParams_WobbleMode_MarkingParams_WobbleMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MarkingParams_WobbleMode_IsValid(int value);
constexpr MarkingParams_WobbleMode MarkingParams_WobbleMode_WobbleMode_MIN = MarkingParams_WobbleMode_NO_WOBBLE;
constexpr MarkingParams_WobbleMode MarkingParams_WobbleMode_WobbleMode_MAX = MarkingParams_WobbleMode_LYING_EIGHT_WOBBLE;
constexpr int MarkingParams_WobbleMode_WobbleMode_ARRAYSIZE = MarkingParams_WobbleMode_WobbleMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MarkingParams_WobbleMode_descriptor();
template<typename T>
inline const std::string& MarkingParams_WobbleMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MarkingParams_WobbleMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MarkingParams_WobbleMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MarkingParams_WobbleMode_descriptor(), enum_t_value);
}
inline bool MarkingParams_WobbleMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MarkingParams_WobbleMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MarkingParams_WobbleMode>(
    MarkingParams_WobbleMode_descriptor(), name, value);
}
enum Part_ProcessStrategy_HatchingPattern : int {
  Part_ProcessStrategy_HatchingPattern_UNIDIRECTIONAL = 0,
  Part_ProcessStrategy_HatchingPattern_BIDIRECTIONAL = 1,
  Part_ProcessStrategy_HatchingPattern_CHECKERBOARD = 2,
  Part_ProcessStrategy_HatchingPattern_Part_ProcessStrategy_HatchingPattern_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Part_ProcessStrategy_HatchingPattern_Part_ProcessStrategy_HatchingPattern_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Part_ProcessStrategy_HatchingPattern_IsValid(int value);
constexpr Part_ProcessStrategy_HatchingPattern Part_ProcessStrategy_HatchingPattern_HatchingPattern_MIN = Part_ProcessStrategy_HatchingPattern_UNIDIRECTIONAL;
constexpr Part_ProcessStrategy_HatchingPattern Part_ProcessStrategy_HatchingPattern_HatchingPattern_MAX = Part_ProcessStrategy_HatchingPattern_CHECKERBOARD;
constexpr int Part_ProcessStrategy_HatchingPattern_HatchingPattern_ARRAYSIZE = Part_ProcessStrategy_HatchingPattern_HatchingPattern_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Part_ProcessStrategy_HatchingPattern_descriptor();
template<typename T>
inline const std::string& Part_ProcessStrategy_HatchingPattern_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Part_ProcessStrategy_HatchingPattern>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Part_ProcessStrategy_HatchingPattern_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Part_ProcessStrategy_HatchingPattern_descriptor(), enum_t_value);
}
inline bool Part_ProcessStrategy_HatchingPattern_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Part_ProcessStrategy_HatchingPattern* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Part_ProcessStrategy_HatchingPattern>(
    Part_ProcessStrategy_HatchingPattern_descriptor(), name, value);
}
enum VectorBlock_LPBFMetadata_SkinType : int {
  VectorBlock_LPBFMetadata_SkinType_IN_SKIN = 0,
  VectorBlock_LPBFMetadata_SkinType_DOWN_SKIN = 1,
  VectorBlock_LPBFMetadata_SkinType_UP_SKIN = 2,
  VectorBlock_LPBFMetadata_SkinType_VectorBlock_LPBFMetadata_SkinType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  VectorBlock_LPBFMetadata_SkinType_VectorBlock_LPBFMetadata_SkinType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool VectorBlock_LPBFMetadata_SkinType_IsValid(int value);
constexpr VectorBlock_LPBFMetadata_SkinType VectorBlock_LPBFMetadata_SkinType_SkinType_MIN = VectorBlock_LPBFMetadata_SkinType_IN_SKIN;
constexpr VectorBlock_LPBFMetadata_SkinType VectorBlock_LPBFMetadata_SkinType_SkinType_MAX = VectorBlock_LPBFMetadata_SkinType_UP_SKIN;
constexpr int VectorBlock_LPBFMetadata_SkinType_SkinType_ARRAYSIZE = VectorBlock_LPBFMetadata_SkinType_SkinType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VectorBlock_LPBFMetadata_SkinType_descriptor();
template<typename T>
inline const std::string& VectorBlock_LPBFMetadata_SkinType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VectorBlock_LPBFMetadata_SkinType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VectorBlock_LPBFMetadata_SkinType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VectorBlock_LPBFMetadata_SkinType_descriptor(), enum_t_value);
}
inline bool VectorBlock_LPBFMetadata_SkinType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VectorBlock_LPBFMetadata_SkinType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VectorBlock_LPBFMetadata_SkinType>(
    VectorBlock_LPBFMetadata_SkinType_descriptor(), name, value);
}
enum VectorBlock_LPBFMetadata_SkinCoreStrategyArea : int {
  VectorBlock_LPBFMetadata_SkinCoreStrategyArea_OUTER_HULL = 0,
  VectorBlock_LPBFMetadata_SkinCoreStrategyArea_CORE = 1,
  VectorBlock_LPBFMetadata_SkinCoreStrategyArea_INBETWEEN_HULL = 2,
  VectorBlock_LPBFMetadata_SkinCoreStrategyArea_VectorBlock_LPBFMetadata_SkinCoreStrategyArea_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  VectorBlock_LPBFMetadata_SkinCoreStrategyArea_VectorBlock_LPBFMetadata_SkinCoreStrategyArea_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool VectorBlock_LPBFMetadata_SkinCoreStrategyArea_IsValid(int value);
constexpr VectorBlock_LPBFMetadata_SkinCoreStrategyArea VectorBlock_LPBFMetadata_SkinCoreStrategyArea_SkinCoreStrategyArea_MIN = VectorBlock_LPBFMetadata_SkinCoreStrategyArea_OUTER_HULL;
constexpr VectorBlock_LPBFMetadata_SkinCoreStrategyArea VectorBlock_LPBFMetadata_SkinCoreStrategyArea_SkinCoreStrategyArea_MAX = VectorBlock_LPBFMetadata_SkinCoreStrategyArea_INBETWEEN_HULL;
constexpr int VectorBlock_LPBFMetadata_SkinCoreStrategyArea_SkinCoreStrategyArea_ARRAYSIZE = VectorBlock_LPBFMetadata_SkinCoreStrategyArea_SkinCoreStrategyArea_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VectorBlock_LPBFMetadata_SkinCoreStrategyArea_descriptor();
template<typename T>
inline const std::string& VectorBlock_LPBFMetadata_SkinCoreStrategyArea_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VectorBlock_LPBFMetadata_SkinCoreStrategyArea>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VectorBlock_LPBFMetadata_SkinCoreStrategyArea_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VectorBlock_LPBFMetadata_SkinCoreStrategyArea_descriptor(), enum_t_value);
}
inline bool VectorBlock_LPBFMetadata_SkinCoreStrategyArea_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VectorBlock_LPBFMetadata_SkinCoreStrategyArea* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VectorBlock_LPBFMetadata_SkinCoreStrategyArea>(
    VectorBlock_LPBFMetadata_SkinCoreStrategyArea_descriptor(), name, value);
}
enum VectorBlock_LineSequenceParaAdapt_AdaptedParameter : int {
  VectorBlock_LineSequenceParaAdapt_AdaptedParameter_LASER_POWER_IN_W = 0,
  VectorBlock_LineSequenceParaAdapt_AdaptedParameter_LASER_FOCUS_SHIFT_IN_MM = 1,
  VectorBlock_LineSequenceParaAdapt_AdaptedParameter_LASER_PULSE_LENGTH_IN_US = 2,
  VectorBlock_LineSequenceParaAdapt_AdaptedParameter_LASER_PULSE_REPITION_RATE_IN_HZ = 3,
  VectorBlock_LineSequenceParaAdapt_AdaptedParameter_VectorBlock_LineSequenceParaAdapt_AdaptedParameter_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  VectorBlock_LineSequenceParaAdapt_AdaptedParameter_VectorBlock_LineSequenceParaAdapt_AdaptedParameter_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool VectorBlock_LineSequenceParaAdapt_AdaptedParameter_IsValid(int value);
constexpr VectorBlock_LineSequenceParaAdapt_AdaptedParameter VectorBlock_LineSequenceParaAdapt_AdaptedParameter_AdaptedParameter_MIN = VectorBlock_LineSequenceParaAdapt_AdaptedParameter_LASER_POWER_IN_W;
constexpr VectorBlock_LineSequenceParaAdapt_AdaptedParameter VectorBlock_LineSequenceParaAdapt_AdaptedParameter_AdaptedParameter_MAX = VectorBlock_LineSequenceParaAdapt_AdaptedParameter_LASER_PULSE_REPITION_RATE_IN_HZ;
constexpr int VectorBlock_LineSequenceParaAdapt_AdaptedParameter_AdaptedParameter_ARRAYSIZE = VectorBlock_LineSequenceParaAdapt_AdaptedParameter_AdaptedParameter_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VectorBlock_LineSequenceParaAdapt_AdaptedParameter_descriptor();
template<typename T>
inline const std::string& VectorBlock_LineSequenceParaAdapt_AdaptedParameter_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VectorBlock_LineSequenceParaAdapt_AdaptedParameter>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VectorBlock_LineSequenceParaAdapt_AdaptedParameter_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VectorBlock_LineSequenceParaAdapt_AdaptedParameter_descriptor(), enum_t_value);
}
inline bool VectorBlock_LineSequenceParaAdapt_AdaptedParameter_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VectorBlock_LineSequenceParaAdapt_AdaptedParameter* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VectorBlock_LineSequenceParaAdapt_AdaptedParameter>(
    VectorBlock_LineSequenceParaAdapt_AdaptedParameter_descriptor(), name, value);
}
enum VectorBlock_PartArea : int {
  VectorBlock_PartArea_VOLUME = 0,
  VectorBlock_PartArea_CONTOUR = 1,
  VectorBlock_PartArea_TRANSITION_CONTOUR = 2,
  VectorBlock_PartArea_VectorBlock_PartArea_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  VectorBlock_PartArea_VectorBlock_PartArea_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool VectorBlock_PartArea_IsValid(int value);
constexpr VectorBlock_PartArea VectorBlock_PartArea_PartArea_MIN = VectorBlock_PartArea_VOLUME;
constexpr VectorBlock_PartArea VectorBlock_PartArea_PartArea_MAX = VectorBlock_PartArea_TRANSITION_CONTOUR;
constexpr int VectorBlock_PartArea_PartArea_ARRAYSIZE = VectorBlock_PartArea_PartArea_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VectorBlock_PartArea_descriptor();
template<typename T>
inline const std::string& VectorBlock_PartArea_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VectorBlock_PartArea>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VectorBlock_PartArea_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VectorBlock_PartArea_descriptor(), enum_t_value);
}
inline bool VectorBlock_PartArea_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VectorBlock_PartArea* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VectorBlock_PartArea>(
    VectorBlock_PartArea_descriptor(), name, value);
}
enum VectorBlock_StructureType : int {
  VectorBlock_StructureType_PART = 0,
  VectorBlock_StructureType_SUPPORT = 1,
  VectorBlock_StructureType_WIRESTRUCTURE = 2,
  VectorBlock_StructureType_POINTS = 3,
  VectorBlock_StructureType_VectorBlock_StructureType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  VectorBlock_StructureType_VectorBlock_StructureType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool VectorBlock_StructureType_IsValid(int value);
constexpr VectorBlock_StructureType VectorBlock_StructureType_StructureType_MIN = VectorBlock_StructureType_PART;
constexpr VectorBlock_StructureType VectorBlock_StructureType_StructureType_MAX = VectorBlock_StructureType_POINTS;
constexpr int VectorBlock_StructureType_StructureType_ARRAYSIZE = VectorBlock_StructureType_StructureType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VectorBlock_StructureType_descriptor();
template<typename T>
inline const std::string& VectorBlock_StructureType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VectorBlock_StructureType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VectorBlock_StructureType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VectorBlock_StructureType_descriptor(), enum_t_value);
}
inline bool VectorBlock_StructureType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VectorBlock_StructureType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VectorBlock_StructureType>(
    VectorBlock_StructureType_descriptor(), name, value);
}
// ===================================================================

class Job_MarkingParamsMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Job_MarkingParamsMapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::MarkingParams,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Job_MarkingParamsMapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::MarkingParams,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Job_MarkingParamsMapEntry_DoNotUse();
  explicit constexpr Job_MarkingParamsMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Job_MarkingParamsMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Job_MarkingParamsMapEntry_DoNotUse& other);
  static const Job_MarkingParamsMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Job_MarkingParamsMapEntry_DoNotUse*>(&_Job_MarkingParamsMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_open_5fvector_5fformat_2eproto);
    return ::descriptor_table_open_5fvector_5fformat_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class Job_PartsMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Job_PartsMapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::Part,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Job_PartsMapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::Part,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Job_PartsMapEntry_DoNotUse();
  explicit constexpr Job_PartsMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Job_PartsMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Job_PartsMapEntry_DoNotUse& other);
  static const Job_PartsMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Job_PartsMapEntry_DoNotUse*>(&_Job_PartsMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_open_5fvector_5fformat_2eproto);
    return ::descriptor_table_open_5fvector_5fformat_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class Job_JobMetaData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:open_vector_format.Job.JobMetaData) */ {
 public:
  inline Job_JobMetaData() : Job_JobMetaData(nullptr) {}
  virtual ~Job_JobMetaData();
  explicit constexpr Job_JobMetaData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Job_JobMetaData(const Job_JobMetaData& from);
  Job_JobMetaData(Job_JobMetaData&& from) noexcept
    : Job_JobMetaData() {
    *this = ::std::move(from);
  }

  inline Job_JobMetaData& operator=(const Job_JobMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline Job_JobMetaData& operator=(Job_JobMetaData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Job_JobMetaData& default_instance() {
    return *internal_default_instance();
  }
  static inline const Job_JobMetaData* internal_default_instance() {
    return reinterpret_cast<const Job_JobMetaData*>(
               &_Job_JobMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Job_JobMetaData& a, Job_JobMetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(Job_JobMetaData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Job_JobMetaData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Job_JobMetaData* New() const final {
    return CreateMaybeMessage<Job_JobMetaData>(nullptr);
  }

  Job_JobMetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Job_JobMetaData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Job_JobMetaData& from);
  void MergeFrom(const Job_JobMetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Job_JobMetaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "open_vector_format.Job.JobMetaData";
  }
  protected:
  explicit Job_JobMetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_open_5fvector_5fformat_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJobNameFieldNumber = 3,
    kAuthorFieldNumber = 4,
    kDescriptionFieldNumber = 5,
    kJobCreationTimeFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // string job_name = 3;
  void clear_job_name();
  const std::string& job_name() const;
  void set_job_name(const std::string& value);
  void set_job_name(std::string&& value);
  void set_job_name(const char* value);
  void set_job_name(const char* value, size_t size);
  std::string* mutable_job_name();
  std::string* release_job_name();
  void set_allocated_job_name(std::string* job_name);
  private:
  const std::string& _internal_job_name() const;
  void _internal_set_job_name(const std::string& value);
  std::string* _internal_mutable_job_name();
  public:

  // string author = 4;
  void clear_author();
  const std::string& author() const;
  void set_author(const std::string& value);
  void set_author(std::string&& value);
  void set_author(const char* value);
  void set_author(const char* value, size_t size);
  std::string* mutable_author();
  std::string* release_author();
  void set_allocated_author(std::string* author);
  private:
  const std::string& _internal_author() const;
  void _internal_set_author(const std::string& value);
  std::string* _internal_mutable_author();
  public:

  // string description = 5;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // int64 job_creation_time = 1;
  void clear_job_creation_time();
  ::PROTOBUF_NAMESPACE_ID::int64 job_creation_time() const;
  void set_job_creation_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_job_creation_time() const;
  void _internal_set_job_creation_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 version = 2;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:open_vector_format.Job.JobMetaData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr job_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr author_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::int64 job_creation_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};
// -------------------------------------------------------------------

class Job PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:open_vector_format.Job) */ {
 public:
  inline Job() : Job(nullptr) {}
  virtual ~Job();
  explicit constexpr Job(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Job(const Job& from);
  Job(Job&& from) noexcept
    : Job() {
    *this = ::std::move(from);
  }

  inline Job& operator=(const Job& from) {
    CopyFrom(from);
    return *this;
  }
  inline Job& operator=(Job&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Job& default_instance() {
    return *internal_default_instance();
  }
  static inline const Job* internal_default_instance() {
    return reinterpret_cast<const Job*>(
               &_Job_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Job& a, Job& b) {
    a.Swap(&b);
  }
  inline void Swap(Job* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Job* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Job* New() const final {
    return CreateMaybeMessage<Job>(nullptr);
  }

  Job* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Job>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Job& from);
  void MergeFrom(const Job& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Job* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "open_vector_format.Job";
  }
  protected:
  explicit Job(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_open_5fvector_5fformat_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Job_JobMetaData JobMetaData;

  // accessors -------------------------------------------------------

  enum : int {
    kWorkPlanesFieldNumber = 1,
    kMarkingParamsMapFieldNumber = 3,
    kPartsMapFieldNumber = 4,
    kJobMetaDataFieldNumber = 2,
    kJobParametersFieldNumber = 5,
    kNumWorkPlanesFieldNumber = 6,
  };
  // repeated .open_vector_format.WorkPlane work_planes = 1;
  int work_planes_size() const;
  private:
  int _internal_work_planes_size() const;
  public:
  void clear_work_planes();
  ::open_vector_format::WorkPlane* mutable_work_planes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::open_vector_format::WorkPlane >*
      mutable_work_planes();
  private:
  const ::open_vector_format::WorkPlane& _internal_work_planes(int index) const;
  ::open_vector_format::WorkPlane* _internal_add_work_planes();
  public:
  const ::open_vector_format::WorkPlane& work_planes(int index) const;
  ::open_vector_format::WorkPlane* add_work_planes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::open_vector_format::WorkPlane >&
      work_planes() const;

  // map<int32, .open_vector_format.MarkingParams> marking_params_map = 3;
  int marking_params_map_size() const;
  private:
  int _internal_marking_params_map_size() const;
  public:
  void clear_marking_params_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::MarkingParams >&
      _internal_marking_params_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::MarkingParams >*
      _internal_mutable_marking_params_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::MarkingParams >&
      marking_params_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::MarkingParams >*
      mutable_marking_params_map();

  // map<int32, .open_vector_format.Part> parts_map = 4;
  int parts_map_size() const;
  private:
  int _internal_parts_map_size() const;
  public:
  void clear_parts_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::Part >&
      _internal_parts_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::Part >*
      _internal_mutable_parts_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::Part >&
      parts_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::Part >*
      mutable_parts_map();

  // .open_vector_format.Job.JobMetaData job_meta_data = 2;
  bool has_job_meta_data() const;
  private:
  bool _internal_has_job_meta_data() const;
  public:
  void clear_job_meta_data();
  const ::open_vector_format::Job_JobMetaData& job_meta_data() const;
  ::open_vector_format::Job_JobMetaData* release_job_meta_data();
  ::open_vector_format::Job_JobMetaData* mutable_job_meta_data();
  void set_allocated_job_meta_data(::open_vector_format::Job_JobMetaData* job_meta_data);
  private:
  const ::open_vector_format::Job_JobMetaData& _internal_job_meta_data() const;
  ::open_vector_format::Job_JobMetaData* _internal_mutable_job_meta_data();
  public:
  void unsafe_arena_set_allocated_job_meta_data(
      ::open_vector_format::Job_JobMetaData* job_meta_data);
  ::open_vector_format::Job_JobMetaData* unsafe_arena_release_job_meta_data();

  // .open_vector_format.JobParameters job_parameters = 5;
  bool has_job_parameters() const;
  private:
  bool _internal_has_job_parameters() const;
  public:
  void clear_job_parameters();
  const ::open_vector_format::JobParameters& job_parameters() const;
  ::open_vector_format::JobParameters* release_job_parameters();
  ::open_vector_format::JobParameters* mutable_job_parameters();
  void set_allocated_job_parameters(::open_vector_format::JobParameters* job_parameters);
  private:
  const ::open_vector_format::JobParameters& _internal_job_parameters() const;
  ::open_vector_format::JobParameters* _internal_mutable_job_parameters();
  public:
  void unsafe_arena_set_allocated_job_parameters(
      ::open_vector_format::JobParameters* job_parameters);
  ::open_vector_format::JobParameters* unsafe_arena_release_job_parameters();

  // int32 num_work_planes = 6;
  void clear_num_work_planes();
  ::PROTOBUF_NAMESPACE_ID::int32 num_work_planes() const;
  void set_num_work_planes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_work_planes() const;
  void _internal_set_num_work_planes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:open_vector_format.Job)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::open_vector_format::WorkPlane > work_planes_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Job_MarkingParamsMapEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::MarkingParams,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> marking_params_map_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Job_PartsMapEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::Part,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> parts_map_;
  ::open_vector_format::Job_JobMetaData* job_meta_data_;
  ::open_vector_format::JobParameters* job_parameters_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_work_planes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};
// -------------------------------------------------------------------

class JobParameters PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:open_vector_format.JobParameters) */ {
 public:
  inline JobParameters() : JobParameters(nullptr) {}
  virtual ~JobParameters();
  explicit constexpr JobParameters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JobParameters(const JobParameters& from);
  JobParameters(JobParameters&& from) noexcept
    : JobParameters() {
    *this = ::std::move(from);
  }

  inline JobParameters& operator=(const JobParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobParameters& operator=(JobParameters&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JobParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const JobParameters* internal_default_instance() {
    return reinterpret_cast<const JobParameters*>(
               &_JobParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(JobParameters& a, JobParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(JobParameters* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JobParameters* New() const final {
    return CreateMaybeMessage<JobParameters>(nullptr);
  }

  JobParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JobParameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JobParameters& from);
  void MergeFrom(const JobParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "open_vector_format.JobParameters";
  }
  protected:
  explicit JobParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_open_5fvector_5fformat_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShieldingGasDirectionsFieldNumber = 2,
    kMaterialFeedDirectionsFieldNumber = 3,
    kPreheatingTemperaturInDgCFieldNumber = 1,
  };
  // repeated double shielding_gas_directions = 2;
  int shielding_gas_directions_size() const;
  private:
  int _internal_shielding_gas_directions_size() const;
  public:
  void clear_shielding_gas_directions();
  private:
  double _internal_shielding_gas_directions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_shielding_gas_directions() const;
  void _internal_add_shielding_gas_directions(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_shielding_gas_directions();
  public:
  double shielding_gas_directions(int index) const;
  void set_shielding_gas_directions(int index, double value);
  void add_shielding_gas_directions(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      shielding_gas_directions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_shielding_gas_directions();

  // repeated double material_feed_directions = 3;
  int material_feed_directions_size() const;
  private:
  int _internal_material_feed_directions_size() const;
  public:
  void clear_material_feed_directions();
  private:
  double _internal_material_feed_directions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_material_feed_directions() const;
  void _internal_add_material_feed_directions(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_material_feed_directions();
  public:
  double material_feed_directions(int index) const;
  void set_material_feed_directions(int index, double value);
  void add_material_feed_directions(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      material_feed_directions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_material_feed_directions();

  // double preheating_temperatur_in_dg_c = 1;
  void clear_preheating_temperatur_in_dg_c();
  double preheating_temperatur_in_dg_c() const;
  void set_preheating_temperatur_in_dg_c(double value);
  private:
  double _internal_preheating_temperatur_in_dg_c() const;
  void _internal_set_preheating_temperatur_in_dg_c(double value);
  public:

  // @@protoc_insertion_point(class_scope:open_vector_format.JobParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > shielding_gas_directions_;
  mutable std::atomic<int> _shielding_gas_directions_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > material_feed_directions_;
  mutable std::atomic<int> _material_feed_directions_cached_byte_size_;
  double preheating_temperatur_in_dg_c_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};
// -------------------------------------------------------------------

class MarkingParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:open_vector_format.MarkingParams) */ {
 public:
  inline MarkingParams() : MarkingParams(nullptr) {}
  virtual ~MarkingParams();
  explicit constexpr MarkingParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarkingParams(const MarkingParams& from);
  MarkingParams(MarkingParams&& from) noexcept
    : MarkingParams() {
    *this = ::std::move(from);
  }

  inline MarkingParams& operator=(const MarkingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarkingParams& operator=(MarkingParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarkingParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarkingParams* internal_default_instance() {
    return reinterpret_cast<const MarkingParams*>(
               &_MarkingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MarkingParams& a, MarkingParams& b) {
    a.Swap(&b);
  }
  inline void Swap(MarkingParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarkingParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarkingParams* New() const final {
    return CreateMaybeMessage<MarkingParams>(nullptr);
  }

  MarkingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarkingParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarkingParams& from);
  void MergeFrom(const MarkingParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarkingParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "open_vector_format.MarkingParams";
  }
  protected:
  explicit MarkingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_open_5fvector_5fformat_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef MarkingParams_MarkingMode MarkingMode;
  static constexpr MarkingMode NO_SKY =
    MarkingParams_MarkingMode_NO_SKY;
  static constexpr MarkingMode SKY_1 =
    MarkingParams_MarkingMode_SKY_1;
  static constexpr MarkingMode SKY_2 =
    MarkingParams_MarkingMode_SKY_2;
  static constexpr MarkingMode SKY_3 =
    MarkingParams_MarkingMode_SKY_3;
  static inline bool MarkingMode_IsValid(int value) {
    return MarkingParams_MarkingMode_IsValid(value);
  }
  static constexpr MarkingMode MarkingMode_MIN =
    MarkingParams_MarkingMode_MarkingMode_MIN;
  static constexpr MarkingMode MarkingMode_MAX =
    MarkingParams_MarkingMode_MarkingMode_MAX;
  static constexpr int MarkingMode_ARRAYSIZE =
    MarkingParams_MarkingMode_MarkingMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MarkingMode_descriptor() {
    return MarkingParams_MarkingMode_descriptor();
  }
  template<typename T>
  static inline const std::string& MarkingMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MarkingMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MarkingMode_Name.");
    return MarkingParams_MarkingMode_Name(enum_t_value);
  }
  static inline bool MarkingMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MarkingMode* value) {
    return MarkingParams_MarkingMode_Parse(name, value);
  }

  typedef MarkingParams_WobbleMode WobbleMode;
  static constexpr WobbleMode NO_WOBBLE =
    MarkingParams_WobbleMode_NO_WOBBLE;
  static constexpr WobbleMode ELLIPSE_WOBBLE =
    MarkingParams_WobbleMode_ELLIPSE_WOBBLE;
  static constexpr WobbleMode STANDING_EIGHT_WOBBLE =
    MarkingParams_WobbleMode_STANDING_EIGHT_WOBBLE;
  static constexpr WobbleMode LYING_EIGHT_WOBBLE =
    MarkingParams_WobbleMode_LYING_EIGHT_WOBBLE;
  static inline bool WobbleMode_IsValid(int value) {
    return MarkingParams_WobbleMode_IsValid(value);
  }
  static constexpr WobbleMode WobbleMode_MIN =
    MarkingParams_WobbleMode_WobbleMode_MIN;
  static constexpr WobbleMode WobbleMode_MAX =
    MarkingParams_WobbleMode_WobbleMode_MAX;
  static constexpr int WobbleMode_ARRAYSIZE =
    MarkingParams_WobbleMode_WobbleMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  WobbleMode_descriptor() {
    return MarkingParams_WobbleMode_descriptor();
  }
  template<typename T>
  static inline const std::string& WobbleMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WobbleMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WobbleMode_Name.");
    return MarkingParams_WobbleMode_Name(enum_t_value);
  }
  static inline bool WobbleMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      WobbleMode* value) {
    return MarkingParams_WobbleMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 26,
    kPowerGradientFieldNumber = 25,
    kLaserPowerInWFieldNumber = 1,
    kLaserSpeedInMmPerSFieldNumber = 2,
    kLaserFocusShiftInMmFieldNumber = 3,
    kPointExposureTimeInUsFieldNumber = 4,
    kJumpSpeedInMmSFieldNumber = 5,
    kPointExposureRepetitionsFieldNumber = 6,
    kRepetitionRateInHzFieldNumber = 7,
    kLaserPulsesPerBurstFieldNumber = 8,
    kPulseDurationInFemtosecondsFieldNumber = 9,
    kMarkingModeFieldNumber = 10,
    kJumpDelayInUsFieldNumber = 11,
    kLaserOffDelayInUsFieldNumber = 12,
    kLaserOnDelayInUsFieldNumber = 13,
    kMarkDelayInUsFieldNumber = 14,
    kPolygonDelayInUsFieldNumber = 15,
    kTimeLagInUsFieldNumber = 16,
    kLaserOnShiftInUsFieldNumber = 17,
    kLimitFieldNumber = 18,
    kNPrevInUsFieldNumber = 19,
    kNPostInUsFieldNumber = 20,
    kWobFrequencyInHzFieldNumber = 21,
    kWobAmpLongInMmFieldNumber = 22,
    kWobAmpTransInMmFieldNumber = 23,
    kWobbleModeFieldNumber = 24,
  };
  // string name = 26;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .open_vector_format.PowerGradientParams powerGradient = 25;
  bool has_powergradient() const;
  private:
  bool _internal_has_powergradient() const;
  public:
  void clear_powergradient();
  const ::open_vector_format::PowerGradientParams& powergradient() const;
  ::open_vector_format::PowerGradientParams* release_powergradient();
  ::open_vector_format::PowerGradientParams* mutable_powergradient();
  void set_allocated_powergradient(::open_vector_format::PowerGradientParams* powergradient);
  private:
  const ::open_vector_format::PowerGradientParams& _internal_powergradient() const;
  ::open_vector_format::PowerGradientParams* _internal_mutable_powergradient();
  public:
  void unsafe_arena_set_allocated_powergradient(
      ::open_vector_format::PowerGradientParams* powergradient);
  ::open_vector_format::PowerGradientParams* unsafe_arena_release_powergradient();

  // float laser_power_in_w = 1;
  void clear_laser_power_in_w();
  float laser_power_in_w() const;
  void set_laser_power_in_w(float value);
  private:
  float _internal_laser_power_in_w() const;
  void _internal_set_laser_power_in_w(float value);
  public:

  // float laser_speed_in_mm_per_s = 2;
  void clear_laser_speed_in_mm_per_s();
  float laser_speed_in_mm_per_s() const;
  void set_laser_speed_in_mm_per_s(float value);
  private:
  float _internal_laser_speed_in_mm_per_s() const;
  void _internal_set_laser_speed_in_mm_per_s(float value);
  public:

  // float laser_focus_shift_in_mm = 3;
  void clear_laser_focus_shift_in_mm();
  float laser_focus_shift_in_mm() const;
  void set_laser_focus_shift_in_mm(float value);
  private:
  float _internal_laser_focus_shift_in_mm() const;
  void _internal_set_laser_focus_shift_in_mm(float value);
  public:

  // float point_exposure_time_in_us = 4;
  void clear_point_exposure_time_in_us();
  float point_exposure_time_in_us() const;
  void set_point_exposure_time_in_us(float value);
  private:
  float _internal_point_exposure_time_in_us() const;
  void _internal_set_point_exposure_time_in_us(float value);
  public:

  // float jump_speed_in_mm_s = 5;
  void clear_jump_speed_in_mm_s();
  float jump_speed_in_mm_s() const;
  void set_jump_speed_in_mm_s(float value);
  private:
  float _internal_jump_speed_in_mm_s() const;
  void _internal_set_jump_speed_in_mm_s(float value);
  public:

  // float point_exposure_repetitions = 6;
  void clear_point_exposure_repetitions();
  float point_exposure_repetitions() const;
  void set_point_exposure_repetitions(float value);
  private:
  float _internal_point_exposure_repetitions() const;
  void _internal_set_point_exposure_repetitions(float value);
  public:

  // uint64 repetition_rate_in_hz = 7;
  void clear_repetition_rate_in_hz();
  ::PROTOBUF_NAMESPACE_ID::uint64 repetition_rate_in_hz() const;
  void set_repetition_rate_in_hz(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_repetition_rate_in_hz() const;
  void _internal_set_repetition_rate_in_hz(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 laser_pulses_per_burst = 8;
  void clear_laser_pulses_per_burst();
  ::PROTOBUF_NAMESPACE_ID::uint64 laser_pulses_per_burst() const;
  void set_laser_pulses_per_burst(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_laser_pulses_per_burst() const;
  void _internal_set_laser_pulses_per_burst(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 pulseDurationInFemtoseconds = 9;
  void clear_pulsedurationinfemtoseconds();
  ::PROTOBUF_NAMESPACE_ID::uint64 pulsedurationinfemtoseconds() const;
  void set_pulsedurationinfemtoseconds(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pulsedurationinfemtoseconds() const;
  void _internal_set_pulsedurationinfemtoseconds(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .open_vector_format.MarkingParams.MarkingMode marking_mode = 10;
  void clear_marking_mode();
  ::open_vector_format::MarkingParams_MarkingMode marking_mode() const;
  void set_marking_mode(::open_vector_format::MarkingParams_MarkingMode value);
  private:
  ::open_vector_format::MarkingParams_MarkingMode _internal_marking_mode() const;
  void _internal_set_marking_mode(::open_vector_format::MarkingParams_MarkingMode value);
  public:

  // float jump_delay_in_us = 11;
  void clear_jump_delay_in_us();
  float jump_delay_in_us() const;
  void set_jump_delay_in_us(float value);
  private:
  float _internal_jump_delay_in_us() const;
  void _internal_set_jump_delay_in_us(float value);
  public:

  // float laser_off_delay_in_us = 12;
  void clear_laser_off_delay_in_us();
  float laser_off_delay_in_us() const;
  void set_laser_off_delay_in_us(float value);
  private:
  float _internal_laser_off_delay_in_us() const;
  void _internal_set_laser_off_delay_in_us(float value);
  public:

  // float laser_on_delay_in_us = 13;
  void clear_laser_on_delay_in_us();
  float laser_on_delay_in_us() const;
  void set_laser_on_delay_in_us(float value);
  private:
  float _internal_laser_on_delay_in_us() const;
  void _internal_set_laser_on_delay_in_us(float value);
  public:

  // float mark_delay_in_us = 14;
  void clear_mark_delay_in_us();
  float mark_delay_in_us() const;
  void set_mark_delay_in_us(float value);
  private:
  float _internal_mark_delay_in_us() const;
  void _internal_set_mark_delay_in_us(float value);
  public:

  // float polygon_delay_in_us = 15;
  void clear_polygon_delay_in_us();
  float polygon_delay_in_us() const;
  void set_polygon_delay_in_us(float value);
  private:
  float _internal_polygon_delay_in_us() const;
  void _internal_set_polygon_delay_in_us(float value);
  public:

  // float time_lag_in_us = 16;
  void clear_time_lag_in_us();
  float time_lag_in_us() const;
  void set_time_lag_in_us(float value);
  private:
  float _internal_time_lag_in_us() const;
  void _internal_set_time_lag_in_us(float value);
  public:

  // float laser_on_shift_in_us = 17;
  void clear_laser_on_shift_in_us();
  float laser_on_shift_in_us() const;
  void set_laser_on_shift_in_us(float value);
  private:
  float _internal_laser_on_shift_in_us() const;
  void _internal_set_laser_on_shift_in_us(float value);
  public:

  // float limit = 18;
  void clear_limit();
  float limit() const;
  void set_limit(float value);
  private:
  float _internal_limit() const;
  void _internal_set_limit(float value);
  public:

  // float n_prev_in_us = 19;
  void clear_n_prev_in_us();
  float n_prev_in_us() const;
  void set_n_prev_in_us(float value);
  private:
  float _internal_n_prev_in_us() const;
  void _internal_set_n_prev_in_us(float value);
  public:

  // float n_post_in_us = 20;
  void clear_n_post_in_us();
  float n_post_in_us() const;
  void set_n_post_in_us(float value);
  private:
  float _internal_n_post_in_us() const;
  void _internal_set_n_post_in_us(float value);
  public:

  // float wob_frequency_in_hz = 21;
  void clear_wob_frequency_in_hz();
  float wob_frequency_in_hz() const;
  void set_wob_frequency_in_hz(float value);
  private:
  float _internal_wob_frequency_in_hz() const;
  void _internal_set_wob_frequency_in_hz(float value);
  public:

  // float wob_amp_long_in_mm = 22;
  void clear_wob_amp_long_in_mm();
  float wob_amp_long_in_mm() const;
  void set_wob_amp_long_in_mm(float value);
  private:
  float _internal_wob_amp_long_in_mm() const;
  void _internal_set_wob_amp_long_in_mm(float value);
  public:

  // float wob_amp_trans_in_mm = 23;
  void clear_wob_amp_trans_in_mm();
  float wob_amp_trans_in_mm() const;
  void set_wob_amp_trans_in_mm(float value);
  private:
  float _internal_wob_amp_trans_in_mm() const;
  void _internal_set_wob_amp_trans_in_mm(float value);
  public:

  // .open_vector_format.MarkingParams.WobbleMode wobble_mode = 24;
  void clear_wobble_mode();
  ::open_vector_format::MarkingParams_WobbleMode wobble_mode() const;
  void set_wobble_mode(::open_vector_format::MarkingParams_WobbleMode value);
  private:
  ::open_vector_format::MarkingParams_WobbleMode _internal_wobble_mode() const;
  void _internal_set_wobble_mode(::open_vector_format::MarkingParams_WobbleMode value);
  public:

  // @@protoc_insertion_point(class_scope:open_vector_format.MarkingParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::open_vector_format::PowerGradientParams* powergradient_;
  float laser_power_in_w_;
  float laser_speed_in_mm_per_s_;
  float laser_focus_shift_in_mm_;
  float point_exposure_time_in_us_;
  float jump_speed_in_mm_s_;
  float point_exposure_repetitions_;
  ::PROTOBUF_NAMESPACE_ID::uint64 repetition_rate_in_hz_;
  ::PROTOBUF_NAMESPACE_ID::uint64 laser_pulses_per_burst_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pulsedurationinfemtoseconds_;
  int marking_mode_;
  float jump_delay_in_us_;
  float laser_off_delay_in_us_;
  float laser_on_delay_in_us_;
  float mark_delay_in_us_;
  float polygon_delay_in_us_;
  float time_lag_in_us_;
  float laser_on_shift_in_us_;
  float limit_;
  float n_prev_in_us_;
  float n_post_in_us_;
  float wob_frequency_in_hz_;
  float wob_amp_long_in_mm_;
  float wob_amp_trans_in_mm_;
  int wobble_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};
// -------------------------------------------------------------------

class PowerGradientParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:open_vector_format.PowerGradientParams) */ {
 public:
  inline PowerGradientParams() : PowerGradientParams(nullptr) {}
  virtual ~PowerGradientParams();
  explicit constexpr PowerGradientParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PowerGradientParams(const PowerGradientParams& from);
  PowerGradientParams(PowerGradientParams&& from) noexcept
    : PowerGradientParams() {
    *this = ::std::move(from);
  }

  inline PowerGradientParams& operator=(const PowerGradientParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline PowerGradientParams& operator=(PowerGradientParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PowerGradientParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const PowerGradientParams* internal_default_instance() {
    return reinterpret_cast<const PowerGradientParams*>(
               &_PowerGradientParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PowerGradientParams& a, PowerGradientParams& b) {
    a.Swap(&b);
  }
  inline void Swap(PowerGradientParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PowerGradientParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PowerGradientParams* New() const final {
    return CreateMaybeMessage<PowerGradientParams>(nullptr);
  }

  PowerGradientParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PowerGradientParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PowerGradientParams& from);
  void MergeFrom(const PowerGradientParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PowerGradientParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "open_vector_format.PowerGradientParams";
  }
  protected:
  explicit PowerGradientParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_open_5fvector_5fformat_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinPowerInWFieldNumber = 1,
    kGradientInWPerSFieldNumber = 2,
  };
  // float minPowerInW = 1;
  void clear_minpowerinw();
  float minpowerinw() const;
  void set_minpowerinw(float value);
  private:
  float _internal_minpowerinw() const;
  void _internal_set_minpowerinw(float value);
  public:

  // float gradientInWPerS = 2;
  void clear_gradientinwpers();
  float gradientinwpers() const;
  void set_gradientinwpers(float value);
  private:
  float _internal_gradientinwpers() const;
  void _internal_set_gradientinwpers(float value);
  public:

  // @@protoc_insertion_point(class_scope:open_vector_format.PowerGradientParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float minpowerinw_;
  float gradientinwpers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};
// -------------------------------------------------------------------

class Part_GeometryInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:open_vector_format.Part.GeometryInfo) */ {
 public:
  inline Part_GeometryInfo() : Part_GeometryInfo(nullptr) {}
  virtual ~Part_GeometryInfo();
  explicit constexpr Part_GeometryInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Part_GeometryInfo(const Part_GeometryInfo& from);
  Part_GeometryInfo(Part_GeometryInfo&& from) noexcept
    : Part_GeometryInfo() {
    *this = ::std::move(from);
  }

  inline Part_GeometryInfo& operator=(const Part_GeometryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Part_GeometryInfo& operator=(Part_GeometryInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Part_GeometryInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const Part_GeometryInfo* internal_default_instance() {
    return reinterpret_cast<const Part_GeometryInfo*>(
               &_Part_GeometryInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Part_GeometryInfo& a, Part_GeometryInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Part_GeometryInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Part_GeometryInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Part_GeometryInfo* New() const final {
    return CreateMaybeMessage<Part_GeometryInfo>(nullptr);
  }

  Part_GeometryInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Part_GeometryInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Part_GeometryInfo& from);
  void MergeFrom(const Part_GeometryInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Part_GeometryInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "open_vector_format.Part.GeometryInfo";
  }
  protected:
  explicit Part_GeometryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_open_5fvector_5fformat_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVolumeInMm3FieldNumber = 1,
    kSupportVolumeInMm3FieldNumber = 2,
    kBuildHeightInMmFieldNumber = 3,
    kSurfaceAreaInMm2FieldNumber = 4,
    kProjectedSurfaceInMm2FieldNumber = 5,
  };
  // double volume_in_mm3 = 1;
  void clear_volume_in_mm3();
  double volume_in_mm3() const;
  void set_volume_in_mm3(double value);
  private:
  double _internal_volume_in_mm3() const;
  void _internal_set_volume_in_mm3(double value);
  public:

  // double support_volume_in_mm3 = 2;
  void clear_support_volume_in_mm3();
  double support_volume_in_mm3() const;
  void set_support_volume_in_mm3(double value);
  private:
  double _internal_support_volume_in_mm3() const;
  void _internal_set_support_volume_in_mm3(double value);
  public:

  // double build_height_in_mm = 3;
  void clear_build_height_in_mm();
  double build_height_in_mm() const;
  void set_build_height_in_mm(double value);
  private:
  double _internal_build_height_in_mm() const;
  void _internal_set_build_height_in_mm(double value);
  public:

  // double surface_area_in_mm2 = 4;
  void clear_surface_area_in_mm2();
  double surface_area_in_mm2() const;
  void set_surface_area_in_mm2(double value);
  private:
  double _internal_surface_area_in_mm2() const;
  void _internal_set_surface_area_in_mm2(double value);
  public:

  // double projected_surface_in_mm2 = 5;
  void clear_projected_surface_in_mm2();
  double projected_surface_in_mm2() const;
  void set_projected_surface_in_mm2(double value);
  private:
  double _internal_projected_surface_in_mm2() const;
  void _internal_set_projected_surface_in_mm2(double value);
  public:

  // @@protoc_insertion_point(class_scope:open_vector_format.Part.GeometryInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double volume_in_mm3_;
  double support_volume_in_mm3_;
  double build_height_in_mm_;
  double surface_area_in_mm2_;
  double projected_surface_in_mm2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};
// -------------------------------------------------------------------

class Part_Material PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:open_vector_format.Part.Material) */ {
 public:
  inline Part_Material() : Part_Material(nullptr) {}
  virtual ~Part_Material();
  explicit constexpr Part_Material(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Part_Material(const Part_Material& from);
  Part_Material(Part_Material&& from) noexcept
    : Part_Material() {
    *this = ::std::move(from);
  }

  inline Part_Material& operator=(const Part_Material& from) {
    CopyFrom(from);
    return *this;
  }
  inline Part_Material& operator=(Part_Material&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Part_Material& default_instance() {
    return *internal_default_instance();
  }
  static inline const Part_Material* internal_default_instance() {
    return reinterpret_cast<const Part_Material*>(
               &_Part_Material_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Part_Material& a, Part_Material& b) {
    a.Swap(&b);
  }
  inline void Swap(Part_Material* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Part_Material* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Part_Material* New() const final {
    return CreateMaybeMessage<Part_Material>(nullptr);
  }

  Part_Material* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Part_Material>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Part_Material& from);
  void MergeFrom(const Part_Material& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Part_Material* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "open_vector_format.Part.Material";
  }
  protected:
  explicit Part_Material(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_open_5fvector_5fformat_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:open_vector_format.Part.Material)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};
// -------------------------------------------------------------------

class Part_ProcessStrategy_ProprietaryParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:open_vector_format.Part.ProcessStrategy.ProprietaryParam) */ {
 public:
  inline Part_ProcessStrategy_ProprietaryParam() : Part_ProcessStrategy_ProprietaryParam(nullptr) {}
  virtual ~Part_ProcessStrategy_ProprietaryParam();
  explicit constexpr Part_ProcessStrategy_ProprietaryParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Part_ProcessStrategy_ProprietaryParam(const Part_ProcessStrategy_ProprietaryParam& from);
  Part_ProcessStrategy_ProprietaryParam(Part_ProcessStrategy_ProprietaryParam&& from) noexcept
    : Part_ProcessStrategy_ProprietaryParam() {
    *this = ::std::move(from);
  }

  inline Part_ProcessStrategy_ProprietaryParam& operator=(const Part_ProcessStrategy_ProprietaryParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline Part_ProcessStrategy_ProprietaryParam& operator=(Part_ProcessStrategy_ProprietaryParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Part_ProcessStrategy_ProprietaryParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const Part_ProcessStrategy_ProprietaryParam* internal_default_instance() {
    return reinterpret_cast<const Part_ProcessStrategy_ProprietaryParam*>(
               &_Part_ProcessStrategy_ProprietaryParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Part_ProcessStrategy_ProprietaryParam& a, Part_ProcessStrategy_ProprietaryParam& b) {
    a.Swap(&b);
  }
  inline void Swap(Part_ProcessStrategy_ProprietaryParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Part_ProcessStrategy_ProprietaryParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Part_ProcessStrategy_ProprietaryParam* New() const final {
    return CreateMaybeMessage<Part_ProcessStrategy_ProprietaryParam>(nullptr);
  }

  Part_ProcessStrategy_ProprietaryParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Part_ProcessStrategy_ProprietaryParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Part_ProcessStrategy_ProprietaryParam& from);
  void MergeFrom(const Part_ProcessStrategy_ProprietaryParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Part_ProcessStrategy_ProprietaryParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "open_vector_format.Part.ProcessStrategy.ProprietaryParam";
  }
  protected:
  explicit Part_ProcessStrategy_ProprietaryParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_open_5fvector_5fformat_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamNameFieldNumber = 1,
    kParamDescriptionFieldNumber = 3,
    kParamValueFieldNumber = 2,
  };
  // string param_name = 1;
  void clear_param_name();
  const std::string& param_name() const;
  void set_param_name(const std::string& value);
  void set_param_name(std::string&& value);
  void set_param_name(const char* value);
  void set_param_name(const char* value, size_t size);
  std::string* mutable_param_name();
  std::string* release_param_name();
  void set_allocated_param_name(std::string* param_name);
  private:
  const std::string& _internal_param_name() const;
  void _internal_set_param_name(const std::string& value);
  std::string* _internal_mutable_param_name();
  public:

  // string param_description = 3;
  void clear_param_description();
  const std::string& param_description() const;
  void set_param_description(const std::string& value);
  void set_param_description(std::string&& value);
  void set_param_description(const char* value);
  void set_param_description(const char* value, size_t size);
  std::string* mutable_param_description();
  std::string* release_param_description();
  void set_allocated_param_description(std::string* param_description);
  private:
  const std::string& _internal_param_description() const;
  void _internal_set_param_description(const std::string& value);
  std::string* _internal_mutable_param_description();
  public:

  // double param_value = 2;
  void clear_param_value();
  double param_value() const;
  void set_param_value(double value);
  private:
  double _internal_param_value() const;
  void _internal_set_param_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:open_vector_format.Part.ProcessStrategy.ProprietaryParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_description_;
  double param_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};
// -------------------------------------------------------------------

class Part_ProcessStrategy PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:open_vector_format.Part.ProcessStrategy) */ {
 public:
  inline Part_ProcessStrategy() : Part_ProcessStrategy(nullptr) {}
  virtual ~Part_ProcessStrategy();
  explicit constexpr Part_ProcessStrategy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Part_ProcessStrategy(const Part_ProcessStrategy& from);
  Part_ProcessStrategy(Part_ProcessStrategy&& from) noexcept
    : Part_ProcessStrategy() {
    *this = ::std::move(from);
  }

  inline Part_ProcessStrategy& operator=(const Part_ProcessStrategy& from) {
    CopyFrom(from);
    return *this;
  }
  inline Part_ProcessStrategy& operator=(Part_ProcessStrategy&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Part_ProcessStrategy& default_instance() {
    return *internal_default_instance();
  }
  static inline const Part_ProcessStrategy* internal_default_instance() {
    return reinterpret_cast<const Part_ProcessStrategy*>(
               &_Part_ProcessStrategy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Part_ProcessStrategy& a, Part_ProcessStrategy& b) {
    a.Swap(&b);
  }
  inline void Swap(Part_ProcessStrategy* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Part_ProcessStrategy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Part_ProcessStrategy* New() const final {
    return CreateMaybeMessage<Part_ProcessStrategy>(nullptr);
  }

  Part_ProcessStrategy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Part_ProcessStrategy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Part_ProcessStrategy& from);
  void MergeFrom(const Part_ProcessStrategy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Part_ProcessStrategy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "open_vector_format.Part.ProcessStrategy";
  }
  protected:
  explicit Part_ProcessStrategy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_open_5fvector_5fformat_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Part_ProcessStrategy_ProprietaryParam ProprietaryParam;

  typedef Part_ProcessStrategy_HatchingPattern HatchingPattern;
  static constexpr HatchingPattern UNIDIRECTIONAL =
    Part_ProcessStrategy_HatchingPattern_UNIDIRECTIONAL;
  static constexpr HatchingPattern BIDIRECTIONAL =
    Part_ProcessStrategy_HatchingPattern_BIDIRECTIONAL;
  static constexpr HatchingPattern CHECKERBOARD =
    Part_ProcessStrategy_HatchingPattern_CHECKERBOARD;
  static inline bool HatchingPattern_IsValid(int value) {
    return Part_ProcessStrategy_HatchingPattern_IsValid(value);
  }
  static constexpr HatchingPattern HatchingPattern_MIN =
    Part_ProcessStrategy_HatchingPattern_HatchingPattern_MIN;
  static constexpr HatchingPattern HatchingPattern_MAX =
    Part_ProcessStrategy_HatchingPattern_HatchingPattern_MAX;
  static constexpr int HatchingPattern_ARRAYSIZE =
    Part_ProcessStrategy_HatchingPattern_HatchingPattern_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  HatchingPattern_descriptor() {
    return Part_ProcessStrategy_HatchingPattern_descriptor();
  }
  template<typename T>
  static inline const std::string& HatchingPattern_Name(T enum_t_value) {
    static_assert(::std::is_same<T, HatchingPattern>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function HatchingPattern_Name.");
    return Part_ProcessStrategy_HatchingPattern_Name(enum_t_value);
  }
  static inline bool HatchingPattern_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      HatchingPattern* value) {
    return Part_ProcessStrategy_HatchingPattern_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAdditionalParametersFieldNumber = 100,
    kNameFieldNumber = 90,
    kRotAngleInDegFieldNumber = 1,
    kIncrementAngleInDegFieldNumber = 2,
    kShiftInMmFieldNumber = 3,
    kExtendIntoInMmFieldNumber = 4,
    kLayerThicknessInMmFieldNumber = 5,
    kHatchDistanceInMmFieldNumber = 6,
    kHatchContourDistanceInMmFieldNumber = 7,
    kOverhangAngleInDegFieldNumber = 8,
    kContourOffsetInMmFieldNumber = 9,
    kNumberOfContoursFieldNumber = 10,
    kContourDistanceInMmFieldNumber = 11,
    kHatchingPatternFieldNumber = 12,
  };
  // repeated .open_vector_format.Part.ProcessStrategy.ProprietaryParam additional_parameters = 100;
  int additional_parameters_size() const;
  private:
  int _internal_additional_parameters_size() const;
  public:
  void clear_additional_parameters();
  ::open_vector_format::Part_ProcessStrategy_ProprietaryParam* mutable_additional_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::open_vector_format::Part_ProcessStrategy_ProprietaryParam >*
      mutable_additional_parameters();
  private:
  const ::open_vector_format::Part_ProcessStrategy_ProprietaryParam& _internal_additional_parameters(int index) const;
  ::open_vector_format::Part_ProcessStrategy_ProprietaryParam* _internal_add_additional_parameters();
  public:
  const ::open_vector_format::Part_ProcessStrategy_ProprietaryParam& additional_parameters(int index) const;
  ::open_vector_format::Part_ProcessStrategy_ProprietaryParam* add_additional_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::open_vector_format::Part_ProcessStrategy_ProprietaryParam >&
      additional_parameters() const;

  // string name = 90;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // float rot_angle_in_deg = 1;
  void clear_rot_angle_in_deg();
  float rot_angle_in_deg() const;
  void set_rot_angle_in_deg(float value);
  private:
  float _internal_rot_angle_in_deg() const;
  void _internal_set_rot_angle_in_deg(float value);
  public:

  // float increment_angle_in_deg = 2;
  void clear_increment_angle_in_deg();
  float increment_angle_in_deg() const;
  void set_increment_angle_in_deg(float value);
  private:
  float _internal_increment_angle_in_deg() const;
  void _internal_set_increment_angle_in_deg(float value);
  public:

  // float shift_in_mm = 3;
  void clear_shift_in_mm();
  float shift_in_mm() const;
  void set_shift_in_mm(float value);
  private:
  float _internal_shift_in_mm() const;
  void _internal_set_shift_in_mm(float value);
  public:

  // float extend_into_in_mm = 4;
  void clear_extend_into_in_mm();
  float extend_into_in_mm() const;
  void set_extend_into_in_mm(float value);
  private:
  float _internal_extend_into_in_mm() const;
  void _internal_set_extend_into_in_mm(float value);
  public:

  // float layer_thickness_in_mm = 5;
  void clear_layer_thickness_in_mm();
  float layer_thickness_in_mm() const;
  void set_layer_thickness_in_mm(float value);
  private:
  float _internal_layer_thickness_in_mm() const;
  void _internal_set_layer_thickness_in_mm(float value);
  public:

  // float hatch_distance_in_mm = 6;
  void clear_hatch_distance_in_mm();
  float hatch_distance_in_mm() const;
  void set_hatch_distance_in_mm(float value);
  private:
  float _internal_hatch_distance_in_mm() const;
  void _internal_set_hatch_distance_in_mm(float value);
  public:

  // float hatch_contour_distance_in_mm = 7;
  void clear_hatch_contour_distance_in_mm();
  float hatch_contour_distance_in_mm() const;
  void set_hatch_contour_distance_in_mm(float value);
  private:
  float _internal_hatch_contour_distance_in_mm() const;
  void _internal_set_hatch_contour_distance_in_mm(float value);
  public:

  // float overhang_angle_in_deg = 8;
  void clear_overhang_angle_in_deg();
  float overhang_angle_in_deg() const;
  void set_overhang_angle_in_deg(float value);
  private:
  float _internal_overhang_angle_in_deg() const;
  void _internal_set_overhang_angle_in_deg(float value);
  public:

  // float contour_offset_in_mm = 9;
  void clear_contour_offset_in_mm();
  float contour_offset_in_mm() const;
  void set_contour_offset_in_mm(float value);
  private:
  float _internal_contour_offset_in_mm() const;
  void _internal_set_contour_offset_in_mm(float value);
  public:

  // int32 number_of_contours = 10;
  void clear_number_of_contours();
  ::PROTOBUF_NAMESPACE_ID::int32 number_of_contours() const;
  void set_number_of_contours(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_number_of_contours() const;
  void _internal_set_number_of_contours(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float contour_distance_in_mm = 11;
  void clear_contour_distance_in_mm();
  float contour_distance_in_mm() const;
  void set_contour_distance_in_mm(float value);
  private:
  float _internal_contour_distance_in_mm() const;
  void _internal_set_contour_distance_in_mm(float value);
  public:

  // .open_vector_format.Part.ProcessStrategy.HatchingPattern hatching_pattern = 12;
  void clear_hatching_pattern();
  ::open_vector_format::Part_ProcessStrategy_HatchingPattern hatching_pattern() const;
  void set_hatching_pattern(::open_vector_format::Part_ProcessStrategy_HatchingPattern value);
  private:
  ::open_vector_format::Part_ProcessStrategy_HatchingPattern _internal_hatching_pattern() const;
  void _internal_set_hatching_pattern(::open_vector_format::Part_ProcessStrategy_HatchingPattern value);
  public:

  // @@protoc_insertion_point(class_scope:open_vector_format.Part.ProcessStrategy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::open_vector_format::Part_ProcessStrategy_ProprietaryParam > additional_parameters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  float rot_angle_in_deg_;
  float increment_angle_in_deg_;
  float shift_in_mm_;
  float extend_into_in_mm_;
  float layer_thickness_in_mm_;
  float hatch_distance_in_mm_;
  float hatch_contour_distance_in_mm_;
  float overhang_angle_in_deg_;
  float contour_offset_in_mm_;
  ::PROTOBUF_NAMESPACE_ID::int32 number_of_contours_;
  float contour_distance_in_mm_;
  int hatching_pattern_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};
// -------------------------------------------------------------------

class Part PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:open_vector_format.Part) */ {
 public:
  inline Part() : Part(nullptr) {}
  virtual ~Part();
  explicit constexpr Part(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Part(const Part& from);
  Part(Part&& from) noexcept
    : Part() {
    *this = ::std::move(from);
  }

  inline Part& operator=(const Part& from) {
    CopyFrom(from);
    return *this;
  }
  inline Part& operator=(Part&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Part& default_instance() {
    return *internal_default_instance();
  }
  static inline const Part* internal_default_instance() {
    return reinterpret_cast<const Part*>(
               &_Part_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Part& a, Part& b) {
    a.Swap(&b);
  }
  inline void Swap(Part* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Part* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Part* New() const final {
    return CreateMaybeMessage<Part>(nullptr);
  }

  Part* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Part>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Part& from);
  void MergeFrom(const Part& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Part* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "open_vector_format.Part";
  }
  protected:
  explicit Part(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_open_5fvector_5fformat_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Part_GeometryInfo GeometryInfo;
  typedef Part_Material Material;
  typedef Part_ProcessStrategy ProcessStrategy;

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kGeometryInfoFieldNumber = 2,
    kMaterialFieldNumber = 3,
    kProcessStrategyFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .open_vector_format.Part.GeometryInfo geometry_info = 2;
  bool has_geometry_info() const;
  private:
  bool _internal_has_geometry_info() const;
  public:
  void clear_geometry_info();
  const ::open_vector_format::Part_GeometryInfo& geometry_info() const;
  ::open_vector_format::Part_GeometryInfo* release_geometry_info();
  ::open_vector_format::Part_GeometryInfo* mutable_geometry_info();
  void set_allocated_geometry_info(::open_vector_format::Part_GeometryInfo* geometry_info);
  private:
  const ::open_vector_format::Part_GeometryInfo& _internal_geometry_info() const;
  ::open_vector_format::Part_GeometryInfo* _internal_mutable_geometry_info();
  public:
  void unsafe_arena_set_allocated_geometry_info(
      ::open_vector_format::Part_GeometryInfo* geometry_info);
  ::open_vector_format::Part_GeometryInfo* unsafe_arena_release_geometry_info();

  // .open_vector_format.Part.Material material = 3;
  bool has_material() const;
  private:
  bool _internal_has_material() const;
  public:
  void clear_material();
  const ::open_vector_format::Part_Material& material() const;
  ::open_vector_format::Part_Material* release_material();
  ::open_vector_format::Part_Material* mutable_material();
  void set_allocated_material(::open_vector_format::Part_Material* material);
  private:
  const ::open_vector_format::Part_Material& _internal_material() const;
  ::open_vector_format::Part_Material* _internal_mutable_material();
  public:
  void unsafe_arena_set_allocated_material(
      ::open_vector_format::Part_Material* material);
  ::open_vector_format::Part_Material* unsafe_arena_release_material();

  // .open_vector_format.Part.ProcessStrategy process_strategy = 4;
  bool has_process_strategy() const;
  private:
  bool _internal_has_process_strategy() const;
  public:
  void clear_process_strategy();
  const ::open_vector_format::Part_ProcessStrategy& process_strategy() const;
  ::open_vector_format::Part_ProcessStrategy* release_process_strategy();
  ::open_vector_format::Part_ProcessStrategy* mutable_process_strategy();
  void set_allocated_process_strategy(::open_vector_format::Part_ProcessStrategy* process_strategy);
  private:
  const ::open_vector_format::Part_ProcessStrategy& _internal_process_strategy() const;
  ::open_vector_format::Part_ProcessStrategy* _internal_mutable_process_strategy();
  public:
  void unsafe_arena_set_allocated_process_strategy(
      ::open_vector_format::Part_ProcessStrategy* process_strategy);
  ::open_vector_format::Part_ProcessStrategy* unsafe_arena_release_process_strategy();

  // @@protoc_insertion_point(class_scope:open_vector_format.Part)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::open_vector_format::Part_GeometryInfo* geometry_info_;
  ::open_vector_format::Part_Material* material_;
  ::open_vector_format::Part_ProcessStrategy* process_strategy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};
// -------------------------------------------------------------------

class WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::WorkPlane_Patch,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::WorkPlane_Patch,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse();
  explicit constexpr WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse& other);
  static const WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse*>(&_WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_open_5fvector_5fformat_2eproto);
    return ::descriptor_table_open_5fvector_5fformat_2eproto.file_level_metadata[12];
  }

  public:
};

// -------------------------------------------------------------------

class WorkPlane_WorkPlaneMetaData_closedContour PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour) */ {
 public:
  inline WorkPlane_WorkPlaneMetaData_closedContour() : WorkPlane_WorkPlaneMetaData_closedContour(nullptr) {}
  virtual ~WorkPlane_WorkPlaneMetaData_closedContour();
  explicit constexpr WorkPlane_WorkPlaneMetaData_closedContour(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkPlane_WorkPlaneMetaData_closedContour(const WorkPlane_WorkPlaneMetaData_closedContour& from);
  WorkPlane_WorkPlaneMetaData_closedContour(WorkPlane_WorkPlaneMetaData_closedContour&& from) noexcept
    : WorkPlane_WorkPlaneMetaData_closedContour() {
    *this = ::std::move(from);
  }

  inline WorkPlane_WorkPlaneMetaData_closedContour& operator=(const WorkPlane_WorkPlaneMetaData_closedContour& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkPlane_WorkPlaneMetaData_closedContour& operator=(WorkPlane_WorkPlaneMetaData_closedContour&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkPlane_WorkPlaneMetaData_closedContour& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkPlane_WorkPlaneMetaData_closedContour* internal_default_instance() {
    return reinterpret_cast<const WorkPlane_WorkPlaneMetaData_closedContour*>(
               &_WorkPlane_WorkPlaneMetaData_closedContour_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(WorkPlane_WorkPlaneMetaData_closedContour& a, WorkPlane_WorkPlaneMetaData_closedContour& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkPlane_WorkPlaneMetaData_closedContour* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkPlane_WorkPlaneMetaData_closedContour* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkPlane_WorkPlaneMetaData_closedContour* New() const final {
    return CreateMaybeMessage<WorkPlane_WorkPlaneMetaData_closedContour>(nullptr);
  }

  WorkPlane_WorkPlaneMetaData_closedContour* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkPlane_WorkPlaneMetaData_closedContour>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkPlane_WorkPlaneMetaData_closedContour& from);
  void MergeFrom(const WorkPlane_WorkPlaneMetaData_closedContour& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkPlane_WorkPlaneMetaData_closedContour* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour";
  }
  protected:
  explicit WorkPlane_WorkPlaneMetaData_closedContour(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_open_5fvector_5fformat_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContourSectionVectorBlockIndicesFieldNumber = 1,
    kAreaInMm2FieldNumber = 2,
    kLengthInMmFieldNumber = 3,
  };
  // repeated int32 contour_section_vector_block_indices = 1;
  int contour_section_vector_block_indices_size() const;
  private:
  int _internal_contour_section_vector_block_indices_size() const;
  public:
  void clear_contour_section_vector_block_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_contour_section_vector_block_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_contour_section_vector_block_indices() const;
  void _internal_add_contour_section_vector_block_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_contour_section_vector_block_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 contour_section_vector_block_indices(int index) const;
  void set_contour_section_vector_block_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_contour_section_vector_block_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      contour_section_vector_block_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_contour_section_vector_block_indices();

  // float area_in_mm_2 = 2;
  void clear_area_in_mm_2();
  float area_in_mm_2() const;
  void set_area_in_mm_2(float value);
  private:
  float _internal_area_in_mm_2() const;
  void _internal_set_area_in_mm_2(float value);
  public:

  // float length_in_mm = 3;
  void clear_length_in_mm();
  float length_in_mm() const;
  void set_length_in_mm(float value);
  private:
  float _internal_length_in_mm() const;
  void _internal_set_length_in_mm(float value);
  public:

  // @@protoc_insertion_point(class_scope:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > contour_section_vector_block_indices_;
  mutable std::atomic<int> _contour_section_vector_block_indices_cached_byte_size_;
  float area_in_mm_2_;
  float length_in_mm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};
// -------------------------------------------------------------------

class WorkPlane_WorkPlaneMetaData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:open_vector_format.WorkPlane.WorkPlaneMetaData) */ {
 public:
  inline WorkPlane_WorkPlaneMetaData() : WorkPlane_WorkPlaneMetaData(nullptr) {}
  virtual ~WorkPlane_WorkPlaneMetaData();
  explicit constexpr WorkPlane_WorkPlaneMetaData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkPlane_WorkPlaneMetaData(const WorkPlane_WorkPlaneMetaData& from);
  WorkPlane_WorkPlaneMetaData(WorkPlane_WorkPlaneMetaData&& from) noexcept
    : WorkPlane_WorkPlaneMetaData() {
    *this = ::std::move(from);
  }

  inline WorkPlane_WorkPlaneMetaData& operator=(const WorkPlane_WorkPlaneMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkPlane_WorkPlaneMetaData& operator=(WorkPlane_WorkPlaneMetaData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkPlane_WorkPlaneMetaData& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkPlane_WorkPlaneMetaData* internal_default_instance() {
    return reinterpret_cast<const WorkPlane_WorkPlaneMetaData*>(
               &_WorkPlane_WorkPlaneMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(WorkPlane_WorkPlaneMetaData& a, WorkPlane_WorkPlaneMetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkPlane_WorkPlaneMetaData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkPlane_WorkPlaneMetaData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkPlane_WorkPlaneMetaData* New() const final {
    return CreateMaybeMessage<WorkPlane_WorkPlaneMetaData>(nullptr);
  }

  WorkPlane_WorkPlaneMetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkPlane_WorkPlaneMetaData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkPlane_WorkPlaneMetaData& from);
  void MergeFrom(const WorkPlane_WorkPlaneMetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkPlane_WorkPlaneMetaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "open_vector_format.WorkPlane.WorkPlaneMetaData";
  }
  protected:
  explicit WorkPlane_WorkPlaneMetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_open_5fvector_5fformat_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef WorkPlane_WorkPlaneMetaData_closedContour closedContour;

  // accessors -------------------------------------------------------

  enum : int {
    kPatchesMapFieldNumber = 3,
    kContoursFieldNumber = 6,
    kTotalScanDistanceInMmFieldNumber = 1,
    kTotalJumpDistanceInMmFieldNumber = 2,
    kMaxPowerFieldNumber = 4,
    kMinPowerFieldNumber = 5,
  };
  // map<int32, .open_vector_format.WorkPlane.Patch> patches_map = 3;
  int patches_map_size() const;
  private:
  int _internal_patches_map_size() const;
  public:
  void clear_patches_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::WorkPlane_Patch >&
      _internal_patches_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::WorkPlane_Patch >*
      _internal_mutable_patches_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::WorkPlane_Patch >&
      patches_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::WorkPlane_Patch >*
      mutable_patches_map();

  // repeated .open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour contours = 6;
  int contours_size() const;
  private:
  int _internal_contours_size() const;
  public:
  void clear_contours();
  ::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour* mutable_contours(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour >*
      mutable_contours();
  private:
  const ::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour& _internal_contours(int index) const;
  ::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour* _internal_add_contours();
  public:
  const ::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour& contours(int index) const;
  ::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour* add_contours();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour >&
      contours() const;

  // double total_scan_distance_in_mm = 1;
  void clear_total_scan_distance_in_mm();
  double total_scan_distance_in_mm() const;
  void set_total_scan_distance_in_mm(double value);
  private:
  double _internal_total_scan_distance_in_mm() const;
  void _internal_set_total_scan_distance_in_mm(double value);
  public:

  // double total_jump_distance_in_mm = 2;
  void clear_total_jump_distance_in_mm();
  double total_jump_distance_in_mm() const;
  void set_total_jump_distance_in_mm(double value);
  private:
  double _internal_total_jump_distance_in_mm() const;
  void _internal_set_total_jump_distance_in_mm(double value);
  public:

  // float maxPower = 4;
  void clear_maxpower();
  float maxpower() const;
  void set_maxpower(float value);
  private:
  float _internal_maxpower() const;
  void _internal_set_maxpower(float value);
  public:

  // float minPower = 5;
  void clear_minpower();
  float minpower() const;
  void set_minpower(float value);
  private:
  float _internal_minpower() const;
  void _internal_set_minpower(float value);
  public:

  // @@protoc_insertion_point(class_scope:open_vector_format.WorkPlane.WorkPlaneMetaData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::WorkPlane_Patch,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> patches_map_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour > contours_;
  double total_scan_distance_in_mm_;
  double total_jump_distance_in_mm_;
  float maxpower_;
  float minpower_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};
// -------------------------------------------------------------------

class WorkPlane_Patch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:open_vector_format.WorkPlane.Patch) */ {
 public:
  inline WorkPlane_Patch() : WorkPlane_Patch(nullptr) {}
  virtual ~WorkPlane_Patch();
  explicit constexpr WorkPlane_Patch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkPlane_Patch(const WorkPlane_Patch& from);
  WorkPlane_Patch(WorkPlane_Patch&& from) noexcept
    : WorkPlane_Patch() {
    *this = ::std::move(from);
  }

  inline WorkPlane_Patch& operator=(const WorkPlane_Patch& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkPlane_Patch& operator=(WorkPlane_Patch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkPlane_Patch& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkPlane_Patch* internal_default_instance() {
    return reinterpret_cast<const WorkPlane_Patch*>(
               &_WorkPlane_Patch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(WorkPlane_Patch& a, WorkPlane_Patch& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkPlane_Patch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkPlane_Patch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkPlane_Patch* New() const final {
    return CreateMaybeMessage<WorkPlane_Patch>(nullptr);
  }

  WorkPlane_Patch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkPlane_Patch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkPlane_Patch& from);
  void MergeFrom(const WorkPlane_Patch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkPlane_Patch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "open_vector_format.WorkPlane.Patch";
  }
  protected:
  explicit WorkPlane_Patch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_open_5fvector_5fformat_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOuterContourFieldNumber = 1,
    kUFieldNumber = 2,
    kVFieldNumber = 3,
    kLayerIdFieldNumber = 4,
  };
  // .open_vector_format.VectorBlock.LineSequence outer_contour = 1;
  bool has_outer_contour() const;
  private:
  bool _internal_has_outer_contour() const;
  public:
  void clear_outer_contour();
  const ::open_vector_format::VectorBlock_LineSequence& outer_contour() const;
  ::open_vector_format::VectorBlock_LineSequence* release_outer_contour();
  ::open_vector_format::VectorBlock_LineSequence* mutable_outer_contour();
  void set_allocated_outer_contour(::open_vector_format::VectorBlock_LineSequence* outer_contour);
  private:
  const ::open_vector_format::VectorBlock_LineSequence& _internal_outer_contour() const;
  ::open_vector_format::VectorBlock_LineSequence* _internal_mutable_outer_contour();
  public:
  void unsafe_arena_set_allocated_outer_contour(
      ::open_vector_format::VectorBlock_LineSequence* outer_contour);
  ::open_vector_format::VectorBlock_LineSequence* unsafe_arena_release_outer_contour();

  // float u = 2;
  void clear_u();
  float u() const;
  void set_u(float value);
  private:
  float _internal_u() const;
  void _internal_set_u(float value);
  public:

  // float v = 3;
  void clear_v();
  float v() const;
  void set_v(float value);
  private:
  float _internal_v() const;
  void _internal_set_v(float value);
  public:

  // int32 layer_id = 4;
  void clear_layer_id();
  ::PROTOBUF_NAMESPACE_ID::int32 layer_id() const;
  void set_layer_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_layer_id() const;
  void _internal_set_layer_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:open_vector_format.WorkPlane.Patch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::open_vector_format::VectorBlock_LineSequence* outer_contour_;
  float u_;
  float v_;
  ::PROTOBUF_NAMESPACE_ID::int32 layer_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};
// -------------------------------------------------------------------

class WorkPlane PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:open_vector_format.WorkPlane) */ {
 public:
  inline WorkPlane() : WorkPlane(nullptr) {}
  virtual ~WorkPlane();
  explicit constexpr WorkPlane(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkPlane(const WorkPlane& from);
  WorkPlane(WorkPlane&& from) noexcept
    : WorkPlane() {
    *this = ::std::move(from);
  }

  inline WorkPlane& operator=(const WorkPlane& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkPlane& operator=(WorkPlane&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkPlane& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkPlane* internal_default_instance() {
    return reinterpret_cast<const WorkPlane*>(
               &_WorkPlane_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(WorkPlane& a, WorkPlane& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkPlane* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkPlane* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkPlane* New() const final {
    return CreateMaybeMessage<WorkPlane>(nullptr);
  }

  WorkPlane* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkPlane>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkPlane& from);
  void MergeFrom(const WorkPlane& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkPlane* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "open_vector_format.WorkPlane";
  }
  protected:
  explicit WorkPlane(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_open_5fvector_5fformat_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef WorkPlane_WorkPlaneMetaData WorkPlaneMetaData;
  typedef WorkPlane_Patch Patch;

  // accessors -------------------------------------------------------

  enum : int {
    kVectorBlocksFieldNumber = 1,
    kAdditionalAxisPositionsFieldNumber = 12,
    kMachineTypeFieldNumber = 11,
    kMetaDataFieldNumber = 13,
    kXPosInMmFieldNumber = 2,
    kYPosInMmFieldNumber = 3,
    kZPosInMmFieldNumber = 4,
    kXRotInDegFieldNumber = 5,
    kYRotInDegFieldNumber = 6,
    kZRotInDegFieldNumber = 7,
    kNumBlocksFieldNumber = 8,
    kRepeatsFieldNumber = 9,
    kWorkPlaneNumberFieldNumber = 10,
  };
  // repeated .open_vector_format.VectorBlock vector_blocks = 1;
  int vector_blocks_size() const;
  private:
  int _internal_vector_blocks_size() const;
  public:
  void clear_vector_blocks();
  ::open_vector_format::VectorBlock* mutable_vector_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::open_vector_format::VectorBlock >*
      mutable_vector_blocks();
  private:
  const ::open_vector_format::VectorBlock& _internal_vector_blocks(int index) const;
  ::open_vector_format::VectorBlock* _internal_add_vector_blocks();
  public:
  const ::open_vector_format::VectorBlock& vector_blocks(int index) const;
  ::open_vector_format::VectorBlock* add_vector_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::open_vector_format::VectorBlock >&
      vector_blocks() const;

  // repeated float additional_axis_positions = 12;
  int additional_axis_positions_size() const;
  private:
  int _internal_additional_axis_positions_size() const;
  public:
  void clear_additional_axis_positions();
  private:
  float _internal_additional_axis_positions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_additional_axis_positions() const;
  void _internal_add_additional_axis_positions(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_additional_axis_positions();
  public:
  float additional_axis_positions(int index) const;
  void set_additional_axis_positions(int index, float value);
  void add_additional_axis_positions(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      additional_axis_positions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_additional_axis_positions();

  // string machine_type = 11;
  void clear_machine_type();
  const std::string& machine_type() const;
  void set_machine_type(const std::string& value);
  void set_machine_type(std::string&& value);
  void set_machine_type(const char* value);
  void set_machine_type(const char* value, size_t size);
  std::string* mutable_machine_type();
  std::string* release_machine_type();
  void set_allocated_machine_type(std::string* machine_type);
  private:
  const std::string& _internal_machine_type() const;
  void _internal_set_machine_type(const std::string& value);
  std::string* _internal_mutable_machine_type();
  public:

  // .open_vector_format.WorkPlane.WorkPlaneMetaData meta_data = 13;
  bool has_meta_data() const;
  private:
  bool _internal_has_meta_data() const;
  public:
  void clear_meta_data();
  const ::open_vector_format::WorkPlane_WorkPlaneMetaData& meta_data() const;
  ::open_vector_format::WorkPlane_WorkPlaneMetaData* release_meta_data();
  ::open_vector_format::WorkPlane_WorkPlaneMetaData* mutable_meta_data();
  void set_allocated_meta_data(::open_vector_format::WorkPlane_WorkPlaneMetaData* meta_data);
  private:
  const ::open_vector_format::WorkPlane_WorkPlaneMetaData& _internal_meta_data() const;
  ::open_vector_format::WorkPlane_WorkPlaneMetaData* _internal_mutable_meta_data();
  public:
  void unsafe_arena_set_allocated_meta_data(
      ::open_vector_format::WorkPlane_WorkPlaneMetaData* meta_data);
  ::open_vector_format::WorkPlane_WorkPlaneMetaData* unsafe_arena_release_meta_data();

  // float x_pos_in_mm = 2;
  void clear_x_pos_in_mm();
  float x_pos_in_mm() const;
  void set_x_pos_in_mm(float value);
  private:
  float _internal_x_pos_in_mm() const;
  void _internal_set_x_pos_in_mm(float value);
  public:

  // float y_pos_in_mm = 3;
  void clear_y_pos_in_mm();
  float y_pos_in_mm() const;
  void set_y_pos_in_mm(float value);
  private:
  float _internal_y_pos_in_mm() const;
  void _internal_set_y_pos_in_mm(float value);
  public:

  // float z_pos_in_mm = 4;
  void clear_z_pos_in_mm();
  float z_pos_in_mm() const;
  void set_z_pos_in_mm(float value);
  private:
  float _internal_z_pos_in_mm() const;
  void _internal_set_z_pos_in_mm(float value);
  public:

  // float x_rot_in_deg = 5;
  void clear_x_rot_in_deg();
  float x_rot_in_deg() const;
  void set_x_rot_in_deg(float value);
  private:
  float _internal_x_rot_in_deg() const;
  void _internal_set_x_rot_in_deg(float value);
  public:

  // float y_rot_in_deg = 6;
  void clear_y_rot_in_deg();
  float y_rot_in_deg() const;
  void set_y_rot_in_deg(float value);
  private:
  float _internal_y_rot_in_deg() const;
  void _internal_set_y_rot_in_deg(float value);
  public:

  // float z_rot_in_deg = 7;
  void clear_z_rot_in_deg();
  float z_rot_in_deg() const;
  void set_z_rot_in_deg(float value);
  private:
  float _internal_z_rot_in_deg() const;
  void _internal_set_z_rot_in_deg(float value);
  public:

  // int32 num_blocks = 8;
  void clear_num_blocks();
  ::PROTOBUF_NAMESPACE_ID::int32 num_blocks() const;
  void set_num_blocks(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_blocks() const;
  void _internal_set_num_blocks(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 repeats = 9;
  void clear_repeats();
  ::PROTOBUF_NAMESPACE_ID::uint32 repeats() const;
  void set_repeats(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_repeats() const;
  void _internal_set_repeats(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 work_plane_number = 10;
  void clear_work_plane_number();
  ::PROTOBUF_NAMESPACE_ID::int32 work_plane_number() const;
  void set_work_plane_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_work_plane_number() const;
  void _internal_set_work_plane_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:open_vector_format.WorkPlane)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::open_vector_format::VectorBlock > vector_blocks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > additional_axis_positions_;
  mutable std::atomic<int> _additional_axis_positions_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr machine_type_;
  ::open_vector_format::WorkPlane_WorkPlaneMetaData* meta_data_;
  float x_pos_in_mm_;
  float y_pos_in_mm_;
  float z_pos_in_mm_;
  float x_rot_in_deg_;
  float y_rot_in_deg_;
  float z_rot_in_deg_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_blocks_;
  ::PROTOBUF_NAMESPACE_ID::uint32 repeats_;
  ::PROTOBUF_NAMESPACE_ID::int32 work_plane_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};
// -------------------------------------------------------------------

class VectorBlock_VectorBlockMetaData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:open_vector_format.VectorBlock.VectorBlockMetaData) */ {
 public:
  inline VectorBlock_VectorBlockMetaData() : VectorBlock_VectorBlockMetaData(nullptr) {}
  virtual ~VectorBlock_VectorBlockMetaData();
  explicit constexpr VectorBlock_VectorBlockMetaData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorBlock_VectorBlockMetaData(const VectorBlock_VectorBlockMetaData& from);
  VectorBlock_VectorBlockMetaData(VectorBlock_VectorBlockMetaData&& from) noexcept
    : VectorBlock_VectorBlockMetaData() {
    *this = ::std::move(from);
  }

  inline VectorBlock_VectorBlockMetaData& operator=(const VectorBlock_VectorBlockMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBlock_VectorBlockMetaData& operator=(VectorBlock_VectorBlockMetaData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VectorBlock_VectorBlockMetaData& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorBlock_VectorBlockMetaData* internal_default_instance() {
    return reinterpret_cast<const VectorBlock_VectorBlockMetaData*>(
               &_VectorBlock_VectorBlockMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(VectorBlock_VectorBlockMetaData& a, VectorBlock_VectorBlockMetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBlock_VectorBlockMetaData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBlock_VectorBlockMetaData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorBlock_VectorBlockMetaData* New() const final {
    return CreateMaybeMessage<VectorBlock_VectorBlockMetaData>(nullptr);
  }

  VectorBlock_VectorBlockMetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorBlock_VectorBlockMetaData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorBlock_VectorBlockMetaData& from);
  void MergeFrom(const VectorBlock_VectorBlockMetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorBlock_VectorBlockMetaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "open_vector_format.VectorBlock.VectorBlockMetaData";
  }
  protected:
  explicit VectorBlock_VectorBlockMetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_open_5fvector_5fformat_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalScanDistanceInMmFieldNumber = 1,
    kTotalJumpDistanceInMmFieldNumber = 2,
    kPartKeyFieldNumber = 3,
    kPatchKeyFieldNumber = 4,
    kContourIndexFieldNumber = 5,
  };
  // double total_scan_distance_in_mm = 1;
  void clear_total_scan_distance_in_mm();
  double total_scan_distance_in_mm() const;
  void set_total_scan_distance_in_mm(double value);
  private:
  double _internal_total_scan_distance_in_mm() const;
  void _internal_set_total_scan_distance_in_mm(double value);
  public:

  // double total_jump_distance_in_mm = 2;
  void clear_total_jump_distance_in_mm();
  double total_jump_distance_in_mm() const;
  void set_total_jump_distance_in_mm(double value);
  private:
  double _internal_total_jump_distance_in_mm() const;
  void _internal_set_total_jump_distance_in_mm(double value);
  public:

  // int32 part_key = 3;
  void clear_part_key();
  ::PROTOBUF_NAMESPACE_ID::int32 part_key() const;
  void set_part_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_part_key() const;
  void _internal_set_part_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 patch_key = 4;
  void clear_patch_key();
  ::PROTOBUF_NAMESPACE_ID::int32 patch_key() const;
  void set_patch_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_patch_key() const;
  void _internal_set_patch_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 contour_index = 5;
  void clear_contour_index();
  ::PROTOBUF_NAMESPACE_ID::int32 contour_index() const;
  void set_contour_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_contour_index() const;
  void _internal_set_contour_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:open_vector_format.VectorBlock.VectorBlockMetaData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double total_scan_distance_in_mm_;
  double total_jump_distance_in_mm_;
  ::PROTOBUF_NAMESPACE_ID::int32 part_key_;
  ::PROTOBUF_NAMESPACE_ID::int32 patch_key_;
  ::PROTOBUF_NAMESPACE_ID::int32 contour_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};
// -------------------------------------------------------------------

class VectorBlock_LPBFMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:open_vector_format.VectorBlock.LPBFMetadata) */ {
 public:
  inline VectorBlock_LPBFMetadata() : VectorBlock_LPBFMetadata(nullptr) {}
  virtual ~VectorBlock_LPBFMetadata();
  explicit constexpr VectorBlock_LPBFMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorBlock_LPBFMetadata(const VectorBlock_LPBFMetadata& from);
  VectorBlock_LPBFMetadata(VectorBlock_LPBFMetadata&& from) noexcept
    : VectorBlock_LPBFMetadata() {
    *this = ::std::move(from);
  }

  inline VectorBlock_LPBFMetadata& operator=(const VectorBlock_LPBFMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBlock_LPBFMetadata& operator=(VectorBlock_LPBFMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VectorBlock_LPBFMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorBlock_LPBFMetadata* internal_default_instance() {
    return reinterpret_cast<const VectorBlock_LPBFMetadata*>(
               &_VectorBlock_LPBFMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(VectorBlock_LPBFMetadata& a, VectorBlock_LPBFMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBlock_LPBFMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBlock_LPBFMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorBlock_LPBFMetadata* New() const final {
    return CreateMaybeMessage<VectorBlock_LPBFMetadata>(nullptr);
  }

  VectorBlock_LPBFMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorBlock_LPBFMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorBlock_LPBFMetadata& from);
  void MergeFrom(const VectorBlock_LPBFMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorBlock_LPBFMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "open_vector_format.VectorBlock.LPBFMetadata";
  }
  protected:
  explicit VectorBlock_LPBFMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_open_5fvector_5fformat_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef VectorBlock_LPBFMetadata_SkinType SkinType;
  static constexpr SkinType IN_SKIN =
    VectorBlock_LPBFMetadata_SkinType_IN_SKIN;
  static constexpr SkinType DOWN_SKIN =
    VectorBlock_LPBFMetadata_SkinType_DOWN_SKIN;
  static constexpr SkinType UP_SKIN =
    VectorBlock_LPBFMetadata_SkinType_UP_SKIN;
  static inline bool SkinType_IsValid(int value) {
    return VectorBlock_LPBFMetadata_SkinType_IsValid(value);
  }
  static constexpr SkinType SkinType_MIN =
    VectorBlock_LPBFMetadata_SkinType_SkinType_MIN;
  static constexpr SkinType SkinType_MAX =
    VectorBlock_LPBFMetadata_SkinType_SkinType_MAX;
  static constexpr int SkinType_ARRAYSIZE =
    VectorBlock_LPBFMetadata_SkinType_SkinType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SkinType_descriptor() {
    return VectorBlock_LPBFMetadata_SkinType_descriptor();
  }
  template<typename T>
  static inline const std::string& SkinType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SkinType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SkinType_Name.");
    return VectorBlock_LPBFMetadata_SkinType_Name(enum_t_value);
  }
  static inline bool SkinType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SkinType* value) {
    return VectorBlock_LPBFMetadata_SkinType_Parse(name, value);
  }

  typedef VectorBlock_LPBFMetadata_SkinCoreStrategyArea SkinCoreStrategyArea;
  static constexpr SkinCoreStrategyArea OUTER_HULL =
    VectorBlock_LPBFMetadata_SkinCoreStrategyArea_OUTER_HULL;
  static constexpr SkinCoreStrategyArea CORE =
    VectorBlock_LPBFMetadata_SkinCoreStrategyArea_CORE;
  static constexpr SkinCoreStrategyArea INBETWEEN_HULL =
    VectorBlock_LPBFMetadata_SkinCoreStrategyArea_INBETWEEN_HULL;
  static inline bool SkinCoreStrategyArea_IsValid(int value) {
    return VectorBlock_LPBFMetadata_SkinCoreStrategyArea_IsValid(value);
  }
  static constexpr SkinCoreStrategyArea SkinCoreStrategyArea_MIN =
    VectorBlock_LPBFMetadata_SkinCoreStrategyArea_SkinCoreStrategyArea_MIN;
  static constexpr SkinCoreStrategyArea SkinCoreStrategyArea_MAX =
    VectorBlock_LPBFMetadata_SkinCoreStrategyArea_SkinCoreStrategyArea_MAX;
  static constexpr int SkinCoreStrategyArea_ARRAYSIZE =
    VectorBlock_LPBFMetadata_SkinCoreStrategyArea_SkinCoreStrategyArea_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SkinCoreStrategyArea_descriptor() {
    return VectorBlock_LPBFMetadata_SkinCoreStrategyArea_descriptor();
  }
  template<typename T>
  static inline const std::string& SkinCoreStrategyArea_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SkinCoreStrategyArea>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SkinCoreStrategyArea_Name.");
    return VectorBlock_LPBFMetadata_SkinCoreStrategyArea_Name(enum_t_value);
  }
  static inline bool SkinCoreStrategyArea_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SkinCoreStrategyArea* value) {
    return VectorBlock_LPBFMetadata_SkinCoreStrategyArea_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPartAreaFieldNumber = 1,
    kSkinTypeFieldNumber = 2,
    kSkinCoreStrategyAreaFieldNumber = 3,
    kStructureTypeFieldNumber = 4,
    kReexposureFieldNumber = 5,
  };
  // .open_vector_format.VectorBlock.PartArea part_area = 1;
  void clear_part_area();
  ::open_vector_format::VectorBlock_PartArea part_area() const;
  void set_part_area(::open_vector_format::VectorBlock_PartArea value);
  private:
  ::open_vector_format::VectorBlock_PartArea _internal_part_area() const;
  void _internal_set_part_area(::open_vector_format::VectorBlock_PartArea value);
  public:

  // .open_vector_format.VectorBlock.LPBFMetadata.SkinType skin_type = 2;
  void clear_skin_type();
  ::open_vector_format::VectorBlock_LPBFMetadata_SkinType skin_type() const;
  void set_skin_type(::open_vector_format::VectorBlock_LPBFMetadata_SkinType value);
  private:
  ::open_vector_format::VectorBlock_LPBFMetadata_SkinType _internal_skin_type() const;
  void _internal_set_skin_type(::open_vector_format::VectorBlock_LPBFMetadata_SkinType value);
  public:

  // .open_vector_format.VectorBlock.LPBFMetadata.SkinCoreStrategyArea skin_core_strategy_area = 3;
  void clear_skin_core_strategy_area();
  ::open_vector_format::VectorBlock_LPBFMetadata_SkinCoreStrategyArea skin_core_strategy_area() const;
  void set_skin_core_strategy_area(::open_vector_format::VectorBlock_LPBFMetadata_SkinCoreStrategyArea value);
  private:
  ::open_vector_format::VectorBlock_LPBFMetadata_SkinCoreStrategyArea _internal_skin_core_strategy_area() const;
  void _internal_set_skin_core_strategy_area(::open_vector_format::VectorBlock_LPBFMetadata_SkinCoreStrategyArea value);
  public:

  // .open_vector_format.VectorBlock.StructureType structure_type = 4;
  void clear_structure_type();
  ::open_vector_format::VectorBlock_StructureType structure_type() const;
  void set_structure_type(::open_vector_format::VectorBlock_StructureType value);
  private:
  ::open_vector_format::VectorBlock_StructureType _internal_structure_type() const;
  void _internal_set_structure_type(::open_vector_format::VectorBlock_StructureType value);
  public:

  // bool reexposure = 5;
  void clear_reexposure();
  bool reexposure() const;
  void set_reexposure(bool value);
  private:
  bool _internal_reexposure() const;
  void _internal_set_reexposure(bool value);
  public:

  // @@protoc_insertion_point(class_scope:open_vector_format.VectorBlock.LPBFMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int part_area_;
  int skin_type_;
  int skin_core_strategy_area_;
  int structure_type_;
  bool reexposure_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};
// -------------------------------------------------------------------

class VectorBlock_MicroStructuringMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:open_vector_format.VectorBlock.MicroStructuringMetadata) */ {
 public:
  inline VectorBlock_MicroStructuringMetadata() : VectorBlock_MicroStructuringMetadata(nullptr) {}
  virtual ~VectorBlock_MicroStructuringMetadata();
  explicit constexpr VectorBlock_MicroStructuringMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorBlock_MicroStructuringMetadata(const VectorBlock_MicroStructuringMetadata& from);
  VectorBlock_MicroStructuringMetadata(VectorBlock_MicroStructuringMetadata&& from) noexcept
    : VectorBlock_MicroStructuringMetadata() {
    *this = ::std::move(from);
  }

  inline VectorBlock_MicroStructuringMetadata& operator=(const VectorBlock_MicroStructuringMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBlock_MicroStructuringMetadata& operator=(VectorBlock_MicroStructuringMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VectorBlock_MicroStructuringMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorBlock_MicroStructuringMetadata* internal_default_instance() {
    return reinterpret_cast<const VectorBlock_MicroStructuringMetadata*>(
               &_VectorBlock_MicroStructuringMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(VectorBlock_MicroStructuringMetadata& a, VectorBlock_MicroStructuringMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBlock_MicroStructuringMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBlock_MicroStructuringMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorBlock_MicroStructuringMetadata* New() const final {
    return CreateMaybeMessage<VectorBlock_MicroStructuringMetadata>(nullptr);
  }

  VectorBlock_MicroStructuringMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorBlock_MicroStructuringMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorBlock_MicroStructuringMetadata& from);
  void MergeFrom(const VectorBlock_MicroStructuringMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorBlock_MicroStructuringMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "open_vector_format.VectorBlock.MicroStructuringMetadata";
  }
  protected:
  explicit VectorBlock_MicroStructuringMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_open_5fvector_5fformat_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartAreaFieldNumber = 1,
    kStructureTypeFieldNumber = 2,
  };
  // .open_vector_format.VectorBlock.PartArea part_area = 1;
  void clear_part_area();
  ::open_vector_format::VectorBlock_PartArea part_area() const;
  void set_part_area(::open_vector_format::VectorBlock_PartArea value);
  private:
  ::open_vector_format::VectorBlock_PartArea _internal_part_area() const;
  void _internal_set_part_area(::open_vector_format::VectorBlock_PartArea value);
  public:

  // .open_vector_format.VectorBlock.StructureType structure_type = 2;
  void clear_structure_type();
  ::open_vector_format::VectorBlock_StructureType structure_type() const;
  void set_structure_type(::open_vector_format::VectorBlock_StructureType value);
  private:
  ::open_vector_format::VectorBlock_StructureType _internal_structure_type() const;
  void _internal_set_structure_type(::open_vector_format::VectorBlock_StructureType value);
  public:

  // @@protoc_insertion_point(class_scope:open_vector_format.VectorBlock.MicroStructuringMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int part_area_;
  int structure_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};
// -------------------------------------------------------------------

class VectorBlock_PolishingMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:open_vector_format.VectorBlock.PolishingMetadata) */ {
 public:
  inline VectorBlock_PolishingMetadata() : VectorBlock_PolishingMetadata(nullptr) {}
  virtual ~VectorBlock_PolishingMetadata();
  explicit constexpr VectorBlock_PolishingMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorBlock_PolishingMetadata(const VectorBlock_PolishingMetadata& from);
  VectorBlock_PolishingMetadata(VectorBlock_PolishingMetadata&& from) noexcept
    : VectorBlock_PolishingMetadata() {
    *this = ::std::move(from);
  }

  inline VectorBlock_PolishingMetadata& operator=(const VectorBlock_PolishingMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBlock_PolishingMetadata& operator=(VectorBlock_PolishingMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VectorBlock_PolishingMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorBlock_PolishingMetadata* internal_default_instance() {
    return reinterpret_cast<const VectorBlock_PolishingMetadata*>(
               &_VectorBlock_PolishingMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(VectorBlock_PolishingMetadata& a, VectorBlock_PolishingMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBlock_PolishingMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBlock_PolishingMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorBlock_PolishingMetadata* New() const final {
    return CreateMaybeMessage<VectorBlock_PolishingMetadata>(nullptr);
  }

  VectorBlock_PolishingMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorBlock_PolishingMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorBlock_PolishingMetadata& from);
  void MergeFrom(const VectorBlock_PolishingMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorBlock_PolishingMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "open_vector_format.VectorBlock.PolishingMetadata";
  }
  protected:
  explicit VectorBlock_PolishingMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_open_5fvector_5fformat_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:open_vector_format.VectorBlock.PolishingMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};
// -------------------------------------------------------------------

class VectorBlock_LineSequence PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:open_vector_format.VectorBlock.LineSequence) */ {
 public:
  inline VectorBlock_LineSequence() : VectorBlock_LineSequence(nullptr) {}
  virtual ~VectorBlock_LineSequence();
  explicit constexpr VectorBlock_LineSequence(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorBlock_LineSequence(const VectorBlock_LineSequence& from);
  VectorBlock_LineSequence(VectorBlock_LineSequence&& from) noexcept
    : VectorBlock_LineSequence() {
    *this = ::std::move(from);
  }

  inline VectorBlock_LineSequence& operator=(const VectorBlock_LineSequence& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBlock_LineSequence& operator=(VectorBlock_LineSequence&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VectorBlock_LineSequence& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorBlock_LineSequence* internal_default_instance() {
    return reinterpret_cast<const VectorBlock_LineSequence*>(
               &_VectorBlock_LineSequence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(VectorBlock_LineSequence& a, VectorBlock_LineSequence& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBlock_LineSequence* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBlock_LineSequence* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorBlock_LineSequence* New() const final {
    return CreateMaybeMessage<VectorBlock_LineSequence>(nullptr);
  }

  VectorBlock_LineSequence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorBlock_LineSequence>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorBlock_LineSequence& from);
  void MergeFrom(const VectorBlock_LineSequence& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorBlock_LineSequence* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "open_vector_format.VectorBlock.LineSequence";
  }
  protected:
  explicit VectorBlock_LineSequence(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_open_5fvector_5fformat_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated float points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  private:
  float _internal_points(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_points() const;
  void _internal_add_points(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_points();
  public:
  float points(int index) const;
  void set_points(int index, float value);
  void add_points(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      points() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_points();

  // @@protoc_insertion_point(class_scope:open_vector_format.VectorBlock.LineSequence)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > points_;
  mutable std::atomic<int> _points_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};
// -------------------------------------------------------------------

class VectorBlock_LineSequence3D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:open_vector_format.VectorBlock.LineSequence3D) */ {
 public:
  inline VectorBlock_LineSequence3D() : VectorBlock_LineSequence3D(nullptr) {}
  virtual ~VectorBlock_LineSequence3D();
  explicit constexpr VectorBlock_LineSequence3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorBlock_LineSequence3D(const VectorBlock_LineSequence3D& from);
  VectorBlock_LineSequence3D(VectorBlock_LineSequence3D&& from) noexcept
    : VectorBlock_LineSequence3D() {
    *this = ::std::move(from);
  }

  inline VectorBlock_LineSequence3D& operator=(const VectorBlock_LineSequence3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBlock_LineSequence3D& operator=(VectorBlock_LineSequence3D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VectorBlock_LineSequence3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorBlock_LineSequence3D* internal_default_instance() {
    return reinterpret_cast<const VectorBlock_LineSequence3D*>(
               &_VectorBlock_LineSequence3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(VectorBlock_LineSequence3D& a, VectorBlock_LineSequence3D& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBlock_LineSequence3D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBlock_LineSequence3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorBlock_LineSequence3D* New() const final {
    return CreateMaybeMessage<VectorBlock_LineSequence3D>(nullptr);
  }

  VectorBlock_LineSequence3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorBlock_LineSequence3D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorBlock_LineSequence3D& from);
  void MergeFrom(const VectorBlock_LineSequence3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorBlock_LineSequence3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "open_vector_format.VectorBlock.LineSequence3D";
  }
  protected:
  explicit VectorBlock_LineSequence3D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_open_5fvector_5fformat_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated float points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  private:
  float _internal_points(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_points() const;
  void _internal_add_points(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_points();
  public:
  float points(int index) const;
  void set_points(int index, float value);
  void add_points(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      points() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_points();

  // @@protoc_insertion_point(class_scope:open_vector_format.VectorBlock.LineSequence3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > points_;
  mutable std::atomic<int> _points_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};
// -------------------------------------------------------------------

class VectorBlock_Hatches PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:open_vector_format.VectorBlock.Hatches) */ {
 public:
  inline VectorBlock_Hatches() : VectorBlock_Hatches(nullptr) {}
  virtual ~VectorBlock_Hatches();
  explicit constexpr VectorBlock_Hatches(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorBlock_Hatches(const VectorBlock_Hatches& from);
  VectorBlock_Hatches(VectorBlock_Hatches&& from) noexcept
    : VectorBlock_Hatches() {
    *this = ::std::move(from);
  }

  inline VectorBlock_Hatches& operator=(const VectorBlock_Hatches& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBlock_Hatches& operator=(VectorBlock_Hatches&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VectorBlock_Hatches& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorBlock_Hatches* internal_default_instance() {
    return reinterpret_cast<const VectorBlock_Hatches*>(
               &_VectorBlock_Hatches_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(VectorBlock_Hatches& a, VectorBlock_Hatches& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBlock_Hatches* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBlock_Hatches* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorBlock_Hatches* New() const final {
    return CreateMaybeMessage<VectorBlock_Hatches>(nullptr);
  }

  VectorBlock_Hatches* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorBlock_Hatches>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorBlock_Hatches& from);
  void MergeFrom(const VectorBlock_Hatches& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorBlock_Hatches* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "open_vector_format.VectorBlock.Hatches";
  }
  protected:
  explicit VectorBlock_Hatches(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_open_5fvector_5fformat_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated float points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  private:
  float _internal_points(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_points() const;
  void _internal_add_points(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_points();
  public:
  float points(int index) const;
  void set_points(int index, float value);
  void add_points(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      points() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_points();

  // @@protoc_insertion_point(class_scope:open_vector_format.VectorBlock.Hatches)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > points_;
  mutable std::atomic<int> _points_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};
// -------------------------------------------------------------------

class VectorBlock_Hatches3D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:open_vector_format.VectorBlock.Hatches3D) */ {
 public:
  inline VectorBlock_Hatches3D() : VectorBlock_Hatches3D(nullptr) {}
  virtual ~VectorBlock_Hatches3D();
  explicit constexpr VectorBlock_Hatches3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorBlock_Hatches3D(const VectorBlock_Hatches3D& from);
  VectorBlock_Hatches3D(VectorBlock_Hatches3D&& from) noexcept
    : VectorBlock_Hatches3D() {
    *this = ::std::move(from);
  }

  inline VectorBlock_Hatches3D& operator=(const VectorBlock_Hatches3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBlock_Hatches3D& operator=(VectorBlock_Hatches3D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VectorBlock_Hatches3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorBlock_Hatches3D* internal_default_instance() {
    return reinterpret_cast<const VectorBlock_Hatches3D*>(
               &_VectorBlock_Hatches3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(VectorBlock_Hatches3D& a, VectorBlock_Hatches3D& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBlock_Hatches3D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBlock_Hatches3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorBlock_Hatches3D* New() const final {
    return CreateMaybeMessage<VectorBlock_Hatches3D>(nullptr);
  }

  VectorBlock_Hatches3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorBlock_Hatches3D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorBlock_Hatches3D& from);
  void MergeFrom(const VectorBlock_Hatches3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorBlock_Hatches3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "open_vector_format.VectorBlock.Hatches3D";
  }
  protected:
  explicit VectorBlock_Hatches3D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_open_5fvector_5fformat_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated float points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  private:
  float _internal_points(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_points() const;
  void _internal_add_points(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_points();
  public:
  float points(int index) const;
  void set_points(int index, float value);
  void add_points(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      points() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_points();

  // @@protoc_insertion_point(class_scope:open_vector_format.VectorBlock.Hatches3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > points_;
  mutable std::atomic<int> _points_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};
// -------------------------------------------------------------------

class VectorBlock_PointSequence PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:open_vector_format.VectorBlock.PointSequence) */ {
 public:
  inline VectorBlock_PointSequence() : VectorBlock_PointSequence(nullptr) {}
  virtual ~VectorBlock_PointSequence();
  explicit constexpr VectorBlock_PointSequence(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorBlock_PointSequence(const VectorBlock_PointSequence& from);
  VectorBlock_PointSequence(VectorBlock_PointSequence&& from) noexcept
    : VectorBlock_PointSequence() {
    *this = ::std::move(from);
  }

  inline VectorBlock_PointSequence& operator=(const VectorBlock_PointSequence& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBlock_PointSequence& operator=(VectorBlock_PointSequence&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VectorBlock_PointSequence& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorBlock_PointSequence* internal_default_instance() {
    return reinterpret_cast<const VectorBlock_PointSequence*>(
               &_VectorBlock_PointSequence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(VectorBlock_PointSequence& a, VectorBlock_PointSequence& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBlock_PointSequence* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBlock_PointSequence* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorBlock_PointSequence* New() const final {
    return CreateMaybeMessage<VectorBlock_PointSequence>(nullptr);
  }

  VectorBlock_PointSequence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorBlock_PointSequence>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorBlock_PointSequence& from);
  void MergeFrom(const VectorBlock_PointSequence& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorBlock_PointSequence* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "open_vector_format.VectorBlock.PointSequence";
  }
  protected:
  explicit VectorBlock_PointSequence(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_open_5fvector_5fformat_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated float points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  private:
  float _internal_points(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_points() const;
  void _internal_add_points(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_points();
  public:
  float points(int index) const;
  void set_points(int index, float value);
  void add_points(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      points() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_points();

  // @@protoc_insertion_point(class_scope:open_vector_format.VectorBlock.PointSequence)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > points_;
  mutable std::atomic<int> _points_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};
// -------------------------------------------------------------------

class VectorBlock_PointSequence3D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:open_vector_format.VectorBlock.PointSequence3D) */ {
 public:
  inline VectorBlock_PointSequence3D() : VectorBlock_PointSequence3D(nullptr) {}
  virtual ~VectorBlock_PointSequence3D();
  explicit constexpr VectorBlock_PointSequence3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorBlock_PointSequence3D(const VectorBlock_PointSequence3D& from);
  VectorBlock_PointSequence3D(VectorBlock_PointSequence3D&& from) noexcept
    : VectorBlock_PointSequence3D() {
    *this = ::std::move(from);
  }

  inline VectorBlock_PointSequence3D& operator=(const VectorBlock_PointSequence3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBlock_PointSequence3D& operator=(VectorBlock_PointSequence3D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VectorBlock_PointSequence3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorBlock_PointSequence3D* internal_default_instance() {
    return reinterpret_cast<const VectorBlock_PointSequence3D*>(
               &_VectorBlock_PointSequence3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(VectorBlock_PointSequence3D& a, VectorBlock_PointSequence3D& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBlock_PointSequence3D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBlock_PointSequence3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorBlock_PointSequence3D* New() const final {
    return CreateMaybeMessage<VectorBlock_PointSequence3D>(nullptr);
  }

  VectorBlock_PointSequence3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorBlock_PointSequence3D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorBlock_PointSequence3D& from);
  void MergeFrom(const VectorBlock_PointSequence3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorBlock_PointSequence3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "open_vector_format.VectorBlock.PointSequence3D";
  }
  protected:
  explicit VectorBlock_PointSequence3D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_open_5fvector_5fformat_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated float points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  private:
  float _internal_points(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_points() const;
  void _internal_add_points(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_points();
  public:
  float points(int index) const;
  void set_points(int index, float value);
  void add_points(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      points() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_points();

  // @@protoc_insertion_point(class_scope:open_vector_format.VectorBlock.PointSequence3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > points_;
  mutable std::atomic<int> _points_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};
// -------------------------------------------------------------------

class VectorBlock_Arcs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:open_vector_format.VectorBlock.Arcs) */ {
 public:
  inline VectorBlock_Arcs() : VectorBlock_Arcs(nullptr) {}
  virtual ~VectorBlock_Arcs();
  explicit constexpr VectorBlock_Arcs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorBlock_Arcs(const VectorBlock_Arcs& from);
  VectorBlock_Arcs(VectorBlock_Arcs&& from) noexcept
    : VectorBlock_Arcs() {
    *this = ::std::move(from);
  }

  inline VectorBlock_Arcs& operator=(const VectorBlock_Arcs& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBlock_Arcs& operator=(VectorBlock_Arcs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VectorBlock_Arcs& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorBlock_Arcs* internal_default_instance() {
    return reinterpret_cast<const VectorBlock_Arcs*>(
               &_VectorBlock_Arcs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(VectorBlock_Arcs& a, VectorBlock_Arcs& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBlock_Arcs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBlock_Arcs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorBlock_Arcs* New() const final {
    return CreateMaybeMessage<VectorBlock_Arcs>(nullptr);
  }

  VectorBlock_Arcs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorBlock_Arcs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorBlock_Arcs& from);
  void MergeFrom(const VectorBlock_Arcs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorBlock_Arcs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "open_vector_format.VectorBlock.Arcs";
  }
  protected:
  explicit VectorBlock_Arcs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_open_5fvector_5fformat_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCentersFieldNumber = 4,
    kAngleFieldNumber = 1,
    kStartDxFieldNumber = 2,
    kStartDyFieldNumber = 3,
  };
  // repeated float centers = 4;
  int centers_size() const;
  private:
  int _internal_centers_size() const;
  public:
  void clear_centers();
  private:
  float _internal_centers(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_centers() const;
  void _internal_add_centers(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_centers();
  public:
  float centers(int index) const;
  void set_centers(int index, float value);
  void add_centers(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      centers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_centers();

  // double angle = 1;
  void clear_angle();
  double angle() const;
  void set_angle(double value);
  private:
  double _internal_angle() const;
  void _internal_set_angle(double value);
  public:

  // float start_dx = 2;
  void clear_start_dx();
  float start_dx() const;
  void set_start_dx(float value);
  private:
  float _internal_start_dx() const;
  void _internal_set_start_dx(float value);
  public:

  // float start_dy = 3;
  void clear_start_dy();
  float start_dy() const;
  void set_start_dy(float value);
  private:
  float _internal_start_dy() const;
  void _internal_set_start_dy(float value);
  public:

  // @@protoc_insertion_point(class_scope:open_vector_format.VectorBlock.Arcs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > centers_;
  mutable std::atomic<int> _centers_cached_byte_size_;
  double angle_;
  float start_dx_;
  float start_dy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};
// -------------------------------------------------------------------

class VectorBlock_Arcs3D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:open_vector_format.VectorBlock.Arcs3D) */ {
 public:
  inline VectorBlock_Arcs3D() : VectorBlock_Arcs3D(nullptr) {}
  virtual ~VectorBlock_Arcs3D();
  explicit constexpr VectorBlock_Arcs3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorBlock_Arcs3D(const VectorBlock_Arcs3D& from);
  VectorBlock_Arcs3D(VectorBlock_Arcs3D&& from) noexcept
    : VectorBlock_Arcs3D() {
    *this = ::std::move(from);
  }

  inline VectorBlock_Arcs3D& operator=(const VectorBlock_Arcs3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBlock_Arcs3D& operator=(VectorBlock_Arcs3D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VectorBlock_Arcs3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorBlock_Arcs3D* internal_default_instance() {
    return reinterpret_cast<const VectorBlock_Arcs3D*>(
               &_VectorBlock_Arcs3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(VectorBlock_Arcs3D& a, VectorBlock_Arcs3D& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBlock_Arcs3D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBlock_Arcs3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorBlock_Arcs3D* New() const final {
    return CreateMaybeMessage<VectorBlock_Arcs3D>(nullptr);
  }

  VectorBlock_Arcs3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorBlock_Arcs3D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorBlock_Arcs3D& from);
  void MergeFrom(const VectorBlock_Arcs3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorBlock_Arcs3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "open_vector_format.VectorBlock.Arcs3D";
  }
  protected:
  explicit VectorBlock_Arcs3D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_open_5fvector_5fformat_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCentersFieldNumber = 5,
    kAngleFieldNumber = 1,
    kStartDxFieldNumber = 2,
    kStartDyFieldNumber = 3,
    kStartDzFieldNumber = 4,
  };
  // repeated float centers = 5;
  int centers_size() const;
  private:
  int _internal_centers_size() const;
  public:
  void clear_centers();
  private:
  float _internal_centers(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_centers() const;
  void _internal_add_centers(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_centers();
  public:
  float centers(int index) const;
  void set_centers(int index, float value);
  void add_centers(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      centers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_centers();

  // double angle = 1;
  void clear_angle();
  double angle() const;
  void set_angle(double value);
  private:
  double _internal_angle() const;
  void _internal_set_angle(double value);
  public:

  // float start_dx = 2;
  void clear_start_dx();
  float start_dx() const;
  void set_start_dx(float value);
  private:
  float _internal_start_dx() const;
  void _internal_set_start_dx(float value);
  public:

  // float start_dy = 3;
  void clear_start_dy();
  float start_dy() const;
  void set_start_dy(float value);
  private:
  float _internal_start_dy() const;
  void _internal_set_start_dy(float value);
  public:

  // float start_dz = 4;
  void clear_start_dz();
  float start_dz() const;
  void set_start_dz(float value);
  private:
  float _internal_start_dz() const;
  void _internal_set_start_dz(float value);
  public:

  // @@protoc_insertion_point(class_scope:open_vector_format.VectorBlock.Arcs3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > centers_;
  mutable std::atomic<int> _centers_cached_byte_size_;
  double angle_;
  float start_dx_;
  float start_dy_;
  float start_dz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};
// -------------------------------------------------------------------

class VectorBlock_Ellipses PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:open_vector_format.VectorBlock.Ellipses) */ {
 public:
  inline VectorBlock_Ellipses() : VectorBlock_Ellipses(nullptr) {}
  virtual ~VectorBlock_Ellipses();
  explicit constexpr VectorBlock_Ellipses(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorBlock_Ellipses(const VectorBlock_Ellipses& from);
  VectorBlock_Ellipses(VectorBlock_Ellipses&& from) noexcept
    : VectorBlock_Ellipses() {
    *this = ::std::move(from);
  }

  inline VectorBlock_Ellipses& operator=(const VectorBlock_Ellipses& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBlock_Ellipses& operator=(VectorBlock_Ellipses&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VectorBlock_Ellipses& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorBlock_Ellipses* internal_default_instance() {
    return reinterpret_cast<const VectorBlock_Ellipses*>(
               &_VectorBlock_Ellipses_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(VectorBlock_Ellipses& a, VectorBlock_Ellipses& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBlock_Ellipses* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBlock_Ellipses* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorBlock_Ellipses* New() const final {
    return CreateMaybeMessage<VectorBlock_Ellipses>(nullptr);
  }

  VectorBlock_Ellipses* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorBlock_Ellipses>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorBlock_Ellipses& from);
  void MergeFrom(const VectorBlock_Ellipses& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorBlock_Ellipses* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "open_vector_format.VectorBlock.Ellipses";
  }
  protected:
  explicit VectorBlock_Ellipses(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_open_5fvector_5fformat_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEllipsesArcsFieldNumber = 4,
    kAFieldNumber = 1,
    kBFieldNumber = 2,
    kPhi0FieldNumber = 3,
  };
  // .open_vector_format.VectorBlock.Arcs ellipses_arcs = 4;
  bool has_ellipses_arcs() const;
  private:
  bool _internal_has_ellipses_arcs() const;
  public:
  void clear_ellipses_arcs();
  const ::open_vector_format::VectorBlock_Arcs& ellipses_arcs() const;
  ::open_vector_format::VectorBlock_Arcs* release_ellipses_arcs();
  ::open_vector_format::VectorBlock_Arcs* mutable_ellipses_arcs();
  void set_allocated_ellipses_arcs(::open_vector_format::VectorBlock_Arcs* ellipses_arcs);
  private:
  const ::open_vector_format::VectorBlock_Arcs& _internal_ellipses_arcs() const;
  ::open_vector_format::VectorBlock_Arcs* _internal_mutable_ellipses_arcs();
  public:
  void unsafe_arena_set_allocated_ellipses_arcs(
      ::open_vector_format::VectorBlock_Arcs* ellipses_arcs);
  ::open_vector_format::VectorBlock_Arcs* unsafe_arena_release_ellipses_arcs();

  // float a = 1;
  void clear_a();
  float a() const;
  void set_a(float value);
  private:
  float _internal_a() const;
  void _internal_set_a(float value);
  public:

  // float b = 2;
  void clear_b();
  float b() const;
  void set_b(float value);
  private:
  float _internal_b() const;
  void _internal_set_b(float value);
  public:

  // double phi0 = 3;
  void clear_phi0();
  double phi0() const;
  void set_phi0(double value);
  private:
  double _internal_phi0() const;
  void _internal_set_phi0(double value);
  public:

  // @@protoc_insertion_point(class_scope:open_vector_format.VectorBlock.Ellipses)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::open_vector_format::VectorBlock_Arcs* ellipses_arcs_;
  float a_;
  float b_;
  double phi0_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};
// -------------------------------------------------------------------

class VectorBlock_ExposurePause PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:open_vector_format.VectorBlock.ExposurePause) */ {
 public:
  inline VectorBlock_ExposurePause() : VectorBlock_ExposurePause(nullptr) {}
  virtual ~VectorBlock_ExposurePause();
  explicit constexpr VectorBlock_ExposurePause(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorBlock_ExposurePause(const VectorBlock_ExposurePause& from);
  VectorBlock_ExposurePause(VectorBlock_ExposurePause&& from) noexcept
    : VectorBlock_ExposurePause() {
    *this = ::std::move(from);
  }

  inline VectorBlock_ExposurePause& operator=(const VectorBlock_ExposurePause& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBlock_ExposurePause& operator=(VectorBlock_ExposurePause&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VectorBlock_ExposurePause& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorBlock_ExposurePause* internal_default_instance() {
    return reinterpret_cast<const VectorBlock_ExposurePause*>(
               &_VectorBlock_ExposurePause_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(VectorBlock_ExposurePause& a, VectorBlock_ExposurePause& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBlock_ExposurePause* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBlock_ExposurePause* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorBlock_ExposurePause* New() const final {
    return CreateMaybeMessage<VectorBlock_ExposurePause>(nullptr);
  }

  VectorBlock_ExposurePause* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorBlock_ExposurePause>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorBlock_ExposurePause& from);
  void MergeFrom(const VectorBlock_ExposurePause& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorBlock_ExposurePause* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "open_vector_format.VectorBlock.ExposurePause";
  }
  protected:
  explicit VectorBlock_ExposurePause(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_open_5fvector_5fformat_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPauseInUsFieldNumber = 1,
  };
  // uint64 pause_in_us = 1;
  void clear_pause_in_us();
  ::PROTOBUF_NAMESPACE_ID::uint64 pause_in_us() const;
  void set_pause_in_us(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pause_in_us() const;
  void _internal_set_pause_in_us(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:open_vector_format.VectorBlock.ExposurePause)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pause_in_us_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};
// -------------------------------------------------------------------

class VectorBlock_LineSequenceParaAdapt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:open_vector_format.VectorBlock.LineSequenceParaAdapt) */ {
 public:
  inline VectorBlock_LineSequenceParaAdapt() : VectorBlock_LineSequenceParaAdapt(nullptr) {}
  virtual ~VectorBlock_LineSequenceParaAdapt();
  explicit constexpr VectorBlock_LineSequenceParaAdapt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorBlock_LineSequenceParaAdapt(const VectorBlock_LineSequenceParaAdapt& from);
  VectorBlock_LineSequenceParaAdapt(VectorBlock_LineSequenceParaAdapt&& from) noexcept
    : VectorBlock_LineSequenceParaAdapt() {
    *this = ::std::move(from);
  }

  inline VectorBlock_LineSequenceParaAdapt& operator=(const VectorBlock_LineSequenceParaAdapt& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBlock_LineSequenceParaAdapt& operator=(VectorBlock_LineSequenceParaAdapt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VectorBlock_LineSequenceParaAdapt& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorBlock_LineSequenceParaAdapt* internal_default_instance() {
    return reinterpret_cast<const VectorBlock_LineSequenceParaAdapt*>(
               &_VectorBlock_LineSequenceParaAdapt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(VectorBlock_LineSequenceParaAdapt& a, VectorBlock_LineSequenceParaAdapt& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBlock_LineSequenceParaAdapt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBlock_LineSequenceParaAdapt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorBlock_LineSequenceParaAdapt* New() const final {
    return CreateMaybeMessage<VectorBlock_LineSequenceParaAdapt>(nullptr);
  }

  VectorBlock_LineSequenceParaAdapt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorBlock_LineSequenceParaAdapt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorBlock_LineSequenceParaAdapt& from);
  void MergeFrom(const VectorBlock_LineSequenceParaAdapt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorBlock_LineSequenceParaAdapt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "open_vector_format.VectorBlock.LineSequenceParaAdapt";
  }
  protected:
  explicit VectorBlock_LineSequenceParaAdapt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_open_5fvector_5fformat_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef VectorBlock_LineSequenceParaAdapt_AdaptedParameter AdaptedParameter;
  static constexpr AdaptedParameter LASER_POWER_IN_W =
    VectorBlock_LineSequenceParaAdapt_AdaptedParameter_LASER_POWER_IN_W;
  static constexpr AdaptedParameter LASER_FOCUS_SHIFT_IN_MM =
    VectorBlock_LineSequenceParaAdapt_AdaptedParameter_LASER_FOCUS_SHIFT_IN_MM;
  static constexpr AdaptedParameter LASER_PULSE_LENGTH_IN_US =
    VectorBlock_LineSequenceParaAdapt_AdaptedParameter_LASER_PULSE_LENGTH_IN_US;
  static constexpr AdaptedParameter LASER_PULSE_REPITION_RATE_IN_HZ =
    VectorBlock_LineSequenceParaAdapt_AdaptedParameter_LASER_PULSE_REPITION_RATE_IN_HZ;
  static inline bool AdaptedParameter_IsValid(int value) {
    return VectorBlock_LineSequenceParaAdapt_AdaptedParameter_IsValid(value);
  }
  static constexpr AdaptedParameter AdaptedParameter_MIN =
    VectorBlock_LineSequenceParaAdapt_AdaptedParameter_AdaptedParameter_MIN;
  static constexpr AdaptedParameter AdaptedParameter_MAX =
    VectorBlock_LineSequenceParaAdapt_AdaptedParameter_AdaptedParameter_MAX;
  static constexpr int AdaptedParameter_ARRAYSIZE =
    VectorBlock_LineSequenceParaAdapt_AdaptedParameter_AdaptedParameter_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AdaptedParameter_descriptor() {
    return VectorBlock_LineSequenceParaAdapt_AdaptedParameter_descriptor();
  }
  template<typename T>
  static inline const std::string& AdaptedParameter_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AdaptedParameter>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AdaptedParameter_Name.");
    return VectorBlock_LineSequenceParaAdapt_AdaptedParameter_Name(enum_t_value);
  }
  static inline bool AdaptedParameter_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AdaptedParameter* value) {
    return VectorBlock_LineSequenceParaAdapt_AdaptedParameter_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPointsWithParasFieldNumber = 1,
    kParameterFieldNumber = 2,
  };
  // repeated float points_with_paras = 1;
  int points_with_paras_size() const;
  private:
  int _internal_points_with_paras_size() const;
  public:
  void clear_points_with_paras();
  private:
  float _internal_points_with_paras(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_points_with_paras() const;
  void _internal_add_points_with_paras(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_points_with_paras();
  public:
  float points_with_paras(int index) const;
  void set_points_with_paras(int index, float value);
  void add_points_with_paras(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      points_with_paras() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_points_with_paras();

  // .open_vector_format.VectorBlock.LineSequenceParaAdapt.AdaptedParameter parameter = 2;
  void clear_parameter();
  ::open_vector_format::VectorBlock_LineSequenceParaAdapt_AdaptedParameter parameter() const;
  void set_parameter(::open_vector_format::VectorBlock_LineSequenceParaAdapt_AdaptedParameter value);
  private:
  ::open_vector_format::VectorBlock_LineSequenceParaAdapt_AdaptedParameter _internal_parameter() const;
  void _internal_set_parameter(::open_vector_format::VectorBlock_LineSequenceParaAdapt_AdaptedParameter value);
  public:

  // @@protoc_insertion_point(class_scope:open_vector_format.VectorBlock.LineSequenceParaAdapt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > points_with_paras_;
  mutable std::atomic<int> _points_with_paras_cached_byte_size_;
  int parameter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};
// -------------------------------------------------------------------

class VectorBlock_HatchesParaAdapt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:open_vector_format.VectorBlock.HatchesParaAdapt) */ {
 public:
  inline VectorBlock_HatchesParaAdapt() : VectorBlock_HatchesParaAdapt(nullptr) {}
  virtual ~VectorBlock_HatchesParaAdapt();
  explicit constexpr VectorBlock_HatchesParaAdapt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorBlock_HatchesParaAdapt(const VectorBlock_HatchesParaAdapt& from);
  VectorBlock_HatchesParaAdapt(VectorBlock_HatchesParaAdapt&& from) noexcept
    : VectorBlock_HatchesParaAdapt() {
    *this = ::std::move(from);
  }

  inline VectorBlock_HatchesParaAdapt& operator=(const VectorBlock_HatchesParaAdapt& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBlock_HatchesParaAdapt& operator=(VectorBlock_HatchesParaAdapt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VectorBlock_HatchesParaAdapt& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorBlock_HatchesParaAdapt* internal_default_instance() {
    return reinterpret_cast<const VectorBlock_HatchesParaAdapt*>(
               &_VectorBlock_HatchesParaAdapt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(VectorBlock_HatchesParaAdapt& a, VectorBlock_HatchesParaAdapt& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBlock_HatchesParaAdapt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBlock_HatchesParaAdapt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorBlock_HatchesParaAdapt* New() const final {
    return CreateMaybeMessage<VectorBlock_HatchesParaAdapt>(nullptr);
  }

  VectorBlock_HatchesParaAdapt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorBlock_HatchesParaAdapt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorBlock_HatchesParaAdapt& from);
  void MergeFrom(const VectorBlock_HatchesParaAdapt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorBlock_HatchesParaAdapt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "open_vector_format.VectorBlock.HatchesParaAdapt";
  }
  protected:
  explicit VectorBlock_HatchesParaAdapt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_open_5fvector_5fformat_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHatchAsLinesequenceFieldNumber = 1,
  };
  // repeated .open_vector_format.VectorBlock.LineSequenceParaAdapt hatchAsLinesequence = 1;
  int hatchaslinesequence_size() const;
  private:
  int _internal_hatchaslinesequence_size() const;
  public:
  void clear_hatchaslinesequence();
  ::open_vector_format::VectorBlock_LineSequenceParaAdapt* mutable_hatchaslinesequence(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::open_vector_format::VectorBlock_LineSequenceParaAdapt >*
      mutable_hatchaslinesequence();
  private:
  const ::open_vector_format::VectorBlock_LineSequenceParaAdapt& _internal_hatchaslinesequence(int index) const;
  ::open_vector_format::VectorBlock_LineSequenceParaAdapt* _internal_add_hatchaslinesequence();
  public:
  const ::open_vector_format::VectorBlock_LineSequenceParaAdapt& hatchaslinesequence(int index) const;
  ::open_vector_format::VectorBlock_LineSequenceParaAdapt* add_hatchaslinesequence();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::open_vector_format::VectorBlock_LineSequenceParaAdapt >&
      hatchaslinesequence() const;

  // @@protoc_insertion_point(class_scope:open_vector_format.VectorBlock.HatchesParaAdapt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::open_vector_format::VectorBlock_LineSequenceParaAdapt > hatchaslinesequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};
// -------------------------------------------------------------------

class VectorBlock PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:open_vector_format.VectorBlock) */ {
 public:
  inline VectorBlock() : VectorBlock(nullptr) {}
  virtual ~VectorBlock();
  explicit constexpr VectorBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorBlock(const VectorBlock& from);
  VectorBlock(VectorBlock&& from) noexcept
    : VectorBlock() {
    *this = ::std::move(from);
  }

  inline VectorBlock& operator=(const VectorBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBlock& operator=(VectorBlock&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VectorBlock& default_instance() {
    return *internal_default_instance();
  }
  enum VectorDataCase {
    kLineSequence = 1,
    kHatches = 2,
    kPointSequence = 3,
    kArcs = 4,
    kEllipses = 5,
    kLineSequence3D = 6,
    kHatches3D = 7,
    kPointSequence3D = 8,
    kArcs3D = 9,
    kExposurePause = 10,
    kLineSequenceParaAdapt = 11,
    kHatchParaAdapt = 12,
    VECTOR_DATA_NOT_SET = 0,
  };

  enum ProcessMetaDataCase {
    kLpbfMetadata = 101,
    kMicroStructuringMetadata = 102,
    kPolishingMetadata = 103,
    PROCESS_META_DATA_NOT_SET = 0,
  };

  static inline const VectorBlock* internal_default_instance() {
    return reinterpret_cast<const VectorBlock*>(
               &_VectorBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(VectorBlock& a, VectorBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBlock* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorBlock* New() const final {
    return CreateMaybeMessage<VectorBlock>(nullptr);
  }

  VectorBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorBlock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorBlock& from);
  void MergeFrom(const VectorBlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorBlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "open_vector_format.VectorBlock";
  }
  protected:
  explicit VectorBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_open_5fvector_5fformat_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef VectorBlock_VectorBlockMetaData VectorBlockMetaData;
  typedef VectorBlock_LPBFMetadata LPBFMetadata;
  typedef VectorBlock_MicroStructuringMetadata MicroStructuringMetadata;
  typedef VectorBlock_PolishingMetadata PolishingMetadata;
  typedef VectorBlock_LineSequence LineSequence;
  typedef VectorBlock_LineSequence3D LineSequence3D;
  typedef VectorBlock_Hatches Hatches;
  typedef VectorBlock_Hatches3D Hatches3D;
  typedef VectorBlock_PointSequence PointSequence;
  typedef VectorBlock_PointSequence3D PointSequence3D;
  typedef VectorBlock_Arcs Arcs;
  typedef VectorBlock_Arcs3D Arcs3D;
  typedef VectorBlock_Ellipses Ellipses;
  typedef VectorBlock_ExposurePause ExposurePause;
  typedef VectorBlock_LineSequenceParaAdapt LineSequenceParaAdapt;
  typedef VectorBlock_HatchesParaAdapt HatchesParaAdapt;

  typedef VectorBlock_PartArea PartArea;
  static constexpr PartArea VOLUME =
    VectorBlock_PartArea_VOLUME;
  static constexpr PartArea CONTOUR =
    VectorBlock_PartArea_CONTOUR;
  static constexpr PartArea TRANSITION_CONTOUR =
    VectorBlock_PartArea_TRANSITION_CONTOUR;
  static inline bool PartArea_IsValid(int value) {
    return VectorBlock_PartArea_IsValid(value);
  }
  static constexpr PartArea PartArea_MIN =
    VectorBlock_PartArea_PartArea_MIN;
  static constexpr PartArea PartArea_MAX =
    VectorBlock_PartArea_PartArea_MAX;
  static constexpr int PartArea_ARRAYSIZE =
    VectorBlock_PartArea_PartArea_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PartArea_descriptor() {
    return VectorBlock_PartArea_descriptor();
  }
  template<typename T>
  static inline const std::string& PartArea_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PartArea>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PartArea_Name.");
    return VectorBlock_PartArea_Name(enum_t_value);
  }
  static inline bool PartArea_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PartArea* value) {
    return VectorBlock_PartArea_Parse(name, value);
  }

  typedef VectorBlock_StructureType StructureType;
  static constexpr StructureType PART =
    VectorBlock_StructureType_PART;
  static constexpr StructureType SUPPORT =
    VectorBlock_StructureType_SUPPORT;
  static constexpr StructureType WIRESTRUCTURE =
    VectorBlock_StructureType_WIRESTRUCTURE;
  static constexpr StructureType POINTS =
    VectorBlock_StructureType_POINTS;
  static inline bool StructureType_IsValid(int value) {
    return VectorBlock_StructureType_IsValid(value);
  }
  static constexpr StructureType StructureType_MIN =
    VectorBlock_StructureType_StructureType_MIN;
  static constexpr StructureType StructureType_MAX =
    VectorBlock_StructureType_StructureType_MAX;
  static constexpr int StructureType_ARRAYSIZE =
    VectorBlock_StructureType_StructureType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StructureType_descriptor() {
    return VectorBlock_StructureType_descriptor();
  }
  template<typename T>
  static inline const std::string& StructureType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StructureType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StructureType_Name.");
    return VectorBlock_StructureType_Name(enum_t_value);
  }
  static inline bool StructureType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      StructureType* value) {
    return VectorBlock_StructureType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMetaDataFieldNumber = 100,
    kMarkingParamsKeyFieldNumber = 50,
    kLaserIndexFieldNumber = 53,
    kRepeatsFieldNumber = 54,
    kLineSequenceFieldNumber = 1,
    kHatchesFieldNumber = 2,
    kPointSequenceFieldNumber = 3,
    kArcsFieldNumber = 4,
    kEllipsesFieldNumber = 5,
    kLineSequence3DFieldNumber = 6,
    kHatches3DFieldNumber = 7,
    kPointSequence3DFieldNumber = 8,
    kArcs3DFieldNumber = 9,
    kExposurePauseFieldNumber = 10,
    kLineSequenceParaAdaptFieldNumber = 11,
    kHatchParaAdaptFieldNumber = 12,
    kLpbfMetadataFieldNumber = 101,
    kMicroStructuringMetadataFieldNumber = 102,
    kPolishingMetadataFieldNumber = 103,
  };
  // .open_vector_format.VectorBlock.VectorBlockMetaData meta_data = 100;
  bool has_meta_data() const;
  private:
  bool _internal_has_meta_data() const;
  public:
  void clear_meta_data();
  const ::open_vector_format::VectorBlock_VectorBlockMetaData& meta_data() const;
  ::open_vector_format::VectorBlock_VectorBlockMetaData* release_meta_data();
  ::open_vector_format::VectorBlock_VectorBlockMetaData* mutable_meta_data();
  void set_allocated_meta_data(::open_vector_format::VectorBlock_VectorBlockMetaData* meta_data);
  private:
  const ::open_vector_format::VectorBlock_VectorBlockMetaData& _internal_meta_data() const;
  ::open_vector_format::VectorBlock_VectorBlockMetaData* _internal_mutable_meta_data();
  public:
  void unsafe_arena_set_allocated_meta_data(
      ::open_vector_format::VectorBlock_VectorBlockMetaData* meta_data);
  ::open_vector_format::VectorBlock_VectorBlockMetaData* unsafe_arena_release_meta_data();

  // int32 marking_params_key = 50;
  void clear_marking_params_key();
  ::PROTOBUF_NAMESPACE_ID::int32 marking_params_key() const;
  void set_marking_params_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_marking_params_key() const;
  void _internal_set_marking_params_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 laser_index = 53;
  void clear_laser_index();
  ::PROTOBUF_NAMESPACE_ID::int32 laser_index() const;
  void set_laser_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_laser_index() const;
  void _internal_set_laser_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint64 repeats = 54;
  void clear_repeats();
  ::PROTOBUF_NAMESPACE_ID::uint64 repeats() const;
  void set_repeats(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_repeats() const;
  void _internal_set_repeats(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .open_vector_format.VectorBlock.LineSequence line_sequence = 1;
  bool has_line_sequence() const;
  private:
  bool _internal_has_line_sequence() const;
  public:
  void clear_line_sequence();
  const ::open_vector_format::VectorBlock_LineSequence& line_sequence() const;
  ::open_vector_format::VectorBlock_LineSequence* release_line_sequence();
  ::open_vector_format::VectorBlock_LineSequence* mutable_line_sequence();
  void set_allocated_line_sequence(::open_vector_format::VectorBlock_LineSequence* line_sequence);
  private:
  const ::open_vector_format::VectorBlock_LineSequence& _internal_line_sequence() const;
  ::open_vector_format::VectorBlock_LineSequence* _internal_mutable_line_sequence();
  public:
  void unsafe_arena_set_allocated_line_sequence(
      ::open_vector_format::VectorBlock_LineSequence* line_sequence);
  ::open_vector_format::VectorBlock_LineSequence* unsafe_arena_release_line_sequence();

  // .open_vector_format.VectorBlock.Hatches _hatches = 2;
  bool has__hatches() const;
  private:
  bool _internal_has__hatches() const;
  public:
  void clear__hatches();
  const ::open_vector_format::VectorBlock_Hatches& _hatches() const;
  ::open_vector_format::VectorBlock_Hatches* release__hatches();
  ::open_vector_format::VectorBlock_Hatches* mutable__hatches();
  void set_allocated__hatches(::open_vector_format::VectorBlock_Hatches* _hatches);
  private:
  const ::open_vector_format::VectorBlock_Hatches& _internal__hatches() const;
  ::open_vector_format::VectorBlock_Hatches* _internal_mutable__hatches();
  public:
  void unsafe_arena_set_allocated__hatches(
      ::open_vector_format::VectorBlock_Hatches* _hatches);
  ::open_vector_format::VectorBlock_Hatches* unsafe_arena_release__hatches();

  // .open_vector_format.VectorBlock.PointSequence point_sequence = 3;
  bool has_point_sequence() const;
  private:
  bool _internal_has_point_sequence() const;
  public:
  void clear_point_sequence();
  const ::open_vector_format::VectorBlock_PointSequence& point_sequence() const;
  ::open_vector_format::VectorBlock_PointSequence* release_point_sequence();
  ::open_vector_format::VectorBlock_PointSequence* mutable_point_sequence();
  void set_allocated_point_sequence(::open_vector_format::VectorBlock_PointSequence* point_sequence);
  private:
  const ::open_vector_format::VectorBlock_PointSequence& _internal_point_sequence() const;
  ::open_vector_format::VectorBlock_PointSequence* _internal_mutable_point_sequence();
  public:
  void unsafe_arena_set_allocated_point_sequence(
      ::open_vector_format::VectorBlock_PointSequence* point_sequence);
  ::open_vector_format::VectorBlock_PointSequence* unsafe_arena_release_point_sequence();

  // .open_vector_format.VectorBlock.Arcs _arcs = 4;
  bool has__arcs() const;
  private:
  bool _internal_has__arcs() const;
  public:
  void clear__arcs();
  const ::open_vector_format::VectorBlock_Arcs& _arcs() const;
  ::open_vector_format::VectorBlock_Arcs* release__arcs();
  ::open_vector_format::VectorBlock_Arcs* mutable__arcs();
  void set_allocated__arcs(::open_vector_format::VectorBlock_Arcs* _arcs);
  private:
  const ::open_vector_format::VectorBlock_Arcs& _internal__arcs() const;
  ::open_vector_format::VectorBlock_Arcs* _internal_mutable__arcs();
  public:
  void unsafe_arena_set_allocated__arcs(
      ::open_vector_format::VectorBlock_Arcs* _arcs);
  ::open_vector_format::VectorBlock_Arcs* unsafe_arena_release__arcs();

  // .open_vector_format.VectorBlock.Ellipses ellipses = 5;
  bool has_ellipses() const;
  private:
  bool _internal_has_ellipses() const;
  public:
  void clear_ellipses();
  const ::open_vector_format::VectorBlock_Ellipses& ellipses() const;
  ::open_vector_format::VectorBlock_Ellipses* release_ellipses();
  ::open_vector_format::VectorBlock_Ellipses* mutable_ellipses();
  void set_allocated_ellipses(::open_vector_format::VectorBlock_Ellipses* ellipses);
  private:
  const ::open_vector_format::VectorBlock_Ellipses& _internal_ellipses() const;
  ::open_vector_format::VectorBlock_Ellipses* _internal_mutable_ellipses();
  public:
  void unsafe_arena_set_allocated_ellipses(
      ::open_vector_format::VectorBlock_Ellipses* ellipses);
  ::open_vector_format::VectorBlock_Ellipses* unsafe_arena_release_ellipses();

  // .open_vector_format.VectorBlock.LineSequence3D line_sequence_3d = 6;
  bool has_line_sequence_3d() const;
  private:
  bool _internal_has_line_sequence_3d() const;
  public:
  void clear_line_sequence_3d();
  const ::open_vector_format::VectorBlock_LineSequence3D& line_sequence_3d() const;
  ::open_vector_format::VectorBlock_LineSequence3D* release_line_sequence_3d();
  ::open_vector_format::VectorBlock_LineSequence3D* mutable_line_sequence_3d();
  void set_allocated_line_sequence_3d(::open_vector_format::VectorBlock_LineSequence3D* line_sequence_3d);
  private:
  const ::open_vector_format::VectorBlock_LineSequence3D& _internal_line_sequence_3d() const;
  ::open_vector_format::VectorBlock_LineSequence3D* _internal_mutable_line_sequence_3d();
  public:
  void unsafe_arena_set_allocated_line_sequence_3d(
      ::open_vector_format::VectorBlock_LineSequence3D* line_sequence_3d);
  ::open_vector_format::VectorBlock_LineSequence3D* unsafe_arena_release_line_sequence_3d();

  // .open_vector_format.VectorBlock.Hatches3D hatches_3d = 7;
  bool has_hatches_3d() const;
  private:
  bool _internal_has_hatches_3d() const;
  public:
  void clear_hatches_3d();
  const ::open_vector_format::VectorBlock_Hatches3D& hatches_3d() const;
  ::open_vector_format::VectorBlock_Hatches3D* release_hatches_3d();
  ::open_vector_format::VectorBlock_Hatches3D* mutable_hatches_3d();
  void set_allocated_hatches_3d(::open_vector_format::VectorBlock_Hatches3D* hatches_3d);
  private:
  const ::open_vector_format::VectorBlock_Hatches3D& _internal_hatches_3d() const;
  ::open_vector_format::VectorBlock_Hatches3D* _internal_mutable_hatches_3d();
  public:
  void unsafe_arena_set_allocated_hatches_3d(
      ::open_vector_format::VectorBlock_Hatches3D* hatches_3d);
  ::open_vector_format::VectorBlock_Hatches3D* unsafe_arena_release_hatches_3d();

  // .open_vector_format.VectorBlock.PointSequence3D point_sequence_3d = 8;
  bool has_point_sequence_3d() const;
  private:
  bool _internal_has_point_sequence_3d() const;
  public:
  void clear_point_sequence_3d();
  const ::open_vector_format::VectorBlock_PointSequence3D& point_sequence_3d() const;
  ::open_vector_format::VectorBlock_PointSequence3D* release_point_sequence_3d();
  ::open_vector_format::VectorBlock_PointSequence3D* mutable_point_sequence_3d();
  void set_allocated_point_sequence_3d(::open_vector_format::VectorBlock_PointSequence3D* point_sequence_3d);
  private:
  const ::open_vector_format::VectorBlock_PointSequence3D& _internal_point_sequence_3d() const;
  ::open_vector_format::VectorBlock_PointSequence3D* _internal_mutable_point_sequence_3d();
  public:
  void unsafe_arena_set_allocated_point_sequence_3d(
      ::open_vector_format::VectorBlock_PointSequence3D* point_sequence_3d);
  ::open_vector_format::VectorBlock_PointSequence3D* unsafe_arena_release_point_sequence_3d();

  // .open_vector_format.VectorBlock.Arcs3D arcs_3d = 9;
  bool has_arcs_3d() const;
  private:
  bool _internal_has_arcs_3d() const;
  public:
  void clear_arcs_3d();
  const ::open_vector_format::VectorBlock_Arcs3D& arcs_3d() const;
  ::open_vector_format::VectorBlock_Arcs3D* release_arcs_3d();
  ::open_vector_format::VectorBlock_Arcs3D* mutable_arcs_3d();
  void set_allocated_arcs_3d(::open_vector_format::VectorBlock_Arcs3D* arcs_3d);
  private:
  const ::open_vector_format::VectorBlock_Arcs3D& _internal_arcs_3d() const;
  ::open_vector_format::VectorBlock_Arcs3D* _internal_mutable_arcs_3d();
  public:
  void unsafe_arena_set_allocated_arcs_3d(
      ::open_vector_format::VectorBlock_Arcs3D* arcs_3d);
  ::open_vector_format::VectorBlock_Arcs3D* unsafe_arena_release_arcs_3d();

  // .open_vector_format.VectorBlock.ExposurePause exposure_pause = 10;
  bool has_exposure_pause() const;
  private:
  bool _internal_has_exposure_pause() const;
  public:
  void clear_exposure_pause();
  const ::open_vector_format::VectorBlock_ExposurePause& exposure_pause() const;
  ::open_vector_format::VectorBlock_ExposurePause* release_exposure_pause();
  ::open_vector_format::VectorBlock_ExposurePause* mutable_exposure_pause();
  void set_allocated_exposure_pause(::open_vector_format::VectorBlock_ExposurePause* exposure_pause);
  private:
  const ::open_vector_format::VectorBlock_ExposurePause& _internal_exposure_pause() const;
  ::open_vector_format::VectorBlock_ExposurePause* _internal_mutable_exposure_pause();
  public:
  void unsafe_arena_set_allocated_exposure_pause(
      ::open_vector_format::VectorBlock_ExposurePause* exposure_pause);
  ::open_vector_format::VectorBlock_ExposurePause* unsafe_arena_release_exposure_pause();

  // .open_vector_format.VectorBlock.LineSequenceParaAdapt line_sequence_para_adapt = 11;
  bool has_line_sequence_para_adapt() const;
  private:
  bool _internal_has_line_sequence_para_adapt() const;
  public:
  void clear_line_sequence_para_adapt();
  const ::open_vector_format::VectorBlock_LineSequenceParaAdapt& line_sequence_para_adapt() const;
  ::open_vector_format::VectorBlock_LineSequenceParaAdapt* release_line_sequence_para_adapt();
  ::open_vector_format::VectorBlock_LineSequenceParaAdapt* mutable_line_sequence_para_adapt();
  void set_allocated_line_sequence_para_adapt(::open_vector_format::VectorBlock_LineSequenceParaAdapt* line_sequence_para_adapt);
  private:
  const ::open_vector_format::VectorBlock_LineSequenceParaAdapt& _internal_line_sequence_para_adapt() const;
  ::open_vector_format::VectorBlock_LineSequenceParaAdapt* _internal_mutable_line_sequence_para_adapt();
  public:
  void unsafe_arena_set_allocated_line_sequence_para_adapt(
      ::open_vector_format::VectorBlock_LineSequenceParaAdapt* line_sequence_para_adapt);
  ::open_vector_format::VectorBlock_LineSequenceParaAdapt* unsafe_arena_release_line_sequence_para_adapt();

  // .open_vector_format.VectorBlock.HatchesParaAdapt _hatchParaAdapt = 12;
  bool has__hatchparaadapt() const;
  private:
  bool _internal_has__hatchparaadapt() const;
  public:
  void clear__hatchparaadapt();
  const ::open_vector_format::VectorBlock_HatchesParaAdapt& _hatchparaadapt() const;
  ::open_vector_format::VectorBlock_HatchesParaAdapt* release__hatchparaadapt();
  ::open_vector_format::VectorBlock_HatchesParaAdapt* mutable__hatchparaadapt();
  void set_allocated__hatchparaadapt(::open_vector_format::VectorBlock_HatchesParaAdapt* _hatchparaadapt);
  private:
  const ::open_vector_format::VectorBlock_HatchesParaAdapt& _internal__hatchparaadapt() const;
  ::open_vector_format::VectorBlock_HatchesParaAdapt* _internal_mutable__hatchparaadapt();
  public:
  void unsafe_arena_set_allocated__hatchparaadapt(
      ::open_vector_format::VectorBlock_HatchesParaAdapt* _hatchparaadapt);
  ::open_vector_format::VectorBlock_HatchesParaAdapt* unsafe_arena_release__hatchparaadapt();

  // .open_vector_format.VectorBlock.LPBFMetadata lpbf_metadata = 101;
  bool has_lpbf_metadata() const;
  private:
  bool _internal_has_lpbf_metadata() const;
  public:
  void clear_lpbf_metadata();
  const ::open_vector_format::VectorBlock_LPBFMetadata& lpbf_metadata() const;
  ::open_vector_format::VectorBlock_LPBFMetadata* release_lpbf_metadata();
  ::open_vector_format::VectorBlock_LPBFMetadata* mutable_lpbf_metadata();
  void set_allocated_lpbf_metadata(::open_vector_format::VectorBlock_LPBFMetadata* lpbf_metadata);
  private:
  const ::open_vector_format::VectorBlock_LPBFMetadata& _internal_lpbf_metadata() const;
  ::open_vector_format::VectorBlock_LPBFMetadata* _internal_mutable_lpbf_metadata();
  public:
  void unsafe_arena_set_allocated_lpbf_metadata(
      ::open_vector_format::VectorBlock_LPBFMetadata* lpbf_metadata);
  ::open_vector_format::VectorBlock_LPBFMetadata* unsafe_arena_release_lpbf_metadata();

  // .open_vector_format.VectorBlock.MicroStructuringMetadata micro_structuring_metadata = 102;
  bool has_micro_structuring_metadata() const;
  private:
  bool _internal_has_micro_structuring_metadata() const;
  public:
  void clear_micro_structuring_metadata();
  const ::open_vector_format::VectorBlock_MicroStructuringMetadata& micro_structuring_metadata() const;
  ::open_vector_format::VectorBlock_MicroStructuringMetadata* release_micro_structuring_metadata();
  ::open_vector_format::VectorBlock_MicroStructuringMetadata* mutable_micro_structuring_metadata();
  void set_allocated_micro_structuring_metadata(::open_vector_format::VectorBlock_MicroStructuringMetadata* micro_structuring_metadata);
  private:
  const ::open_vector_format::VectorBlock_MicroStructuringMetadata& _internal_micro_structuring_metadata() const;
  ::open_vector_format::VectorBlock_MicroStructuringMetadata* _internal_mutable_micro_structuring_metadata();
  public:
  void unsafe_arena_set_allocated_micro_structuring_metadata(
      ::open_vector_format::VectorBlock_MicroStructuringMetadata* micro_structuring_metadata);
  ::open_vector_format::VectorBlock_MicroStructuringMetadata* unsafe_arena_release_micro_structuring_metadata();

  // .open_vector_format.VectorBlock.PolishingMetadata polishing_metadata = 103;
  bool has_polishing_metadata() const;
  private:
  bool _internal_has_polishing_metadata() const;
  public:
  void clear_polishing_metadata();
  const ::open_vector_format::VectorBlock_PolishingMetadata& polishing_metadata() const;
  ::open_vector_format::VectorBlock_PolishingMetadata* release_polishing_metadata();
  ::open_vector_format::VectorBlock_PolishingMetadata* mutable_polishing_metadata();
  void set_allocated_polishing_metadata(::open_vector_format::VectorBlock_PolishingMetadata* polishing_metadata);
  private:
  const ::open_vector_format::VectorBlock_PolishingMetadata& _internal_polishing_metadata() const;
  ::open_vector_format::VectorBlock_PolishingMetadata* _internal_mutable_polishing_metadata();
  public:
  void unsafe_arena_set_allocated_polishing_metadata(
      ::open_vector_format::VectorBlock_PolishingMetadata* polishing_metadata);
  ::open_vector_format::VectorBlock_PolishingMetadata* unsafe_arena_release_polishing_metadata();

  void clear_vector_data();
  VectorDataCase vector_data_case() const;
  void clear_process_meta_data();
  ProcessMetaDataCase process_meta_data_case() const;
  // @@protoc_insertion_point(class_scope:open_vector_format.VectorBlock)
 private:
  class _Internal;
  void set_has_line_sequence();
  void set_has__hatches();
  void set_has_point_sequence();
  void set_has__arcs();
  void set_has_ellipses();
  void set_has_line_sequence_3d();
  void set_has_hatches_3d();
  void set_has_point_sequence_3d();
  void set_has_arcs_3d();
  void set_has_exposure_pause();
  void set_has_line_sequence_para_adapt();
  void set_has__hatchparaadapt();
  void set_has_lpbf_metadata();
  void set_has_micro_structuring_metadata();
  void set_has_polishing_metadata();

  inline bool has_vector_data() const;
  inline void clear_has_vector_data();

  inline bool has_process_meta_data() const;
  inline void clear_has_process_meta_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::open_vector_format::VectorBlock_VectorBlockMetaData* meta_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 marking_params_key_;
  ::PROTOBUF_NAMESPACE_ID::int32 laser_index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 repeats_;
  union VectorDataUnion {
    constexpr VectorDataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::open_vector_format::VectorBlock_LineSequence* line_sequence_;
    ::open_vector_format::VectorBlock_Hatches* _hatches_;
    ::open_vector_format::VectorBlock_PointSequence* point_sequence_;
    ::open_vector_format::VectorBlock_Arcs* _arcs_;
    ::open_vector_format::VectorBlock_Ellipses* ellipses_;
    ::open_vector_format::VectorBlock_LineSequence3D* line_sequence_3d_;
    ::open_vector_format::VectorBlock_Hatches3D* hatches_3d_;
    ::open_vector_format::VectorBlock_PointSequence3D* point_sequence_3d_;
    ::open_vector_format::VectorBlock_Arcs3D* arcs_3d_;
    ::open_vector_format::VectorBlock_ExposurePause* exposure_pause_;
    ::open_vector_format::VectorBlock_LineSequenceParaAdapt* line_sequence_para_adapt_;
    ::open_vector_format::VectorBlock_HatchesParaAdapt* _hatchparaadapt_;
  } vector_data_;
  union ProcessMetaDataUnion {
    constexpr ProcessMetaDataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::open_vector_format::VectorBlock_LPBFMetadata* lpbf_metadata_;
    ::open_vector_format::VectorBlock_MicroStructuringMetadata* micro_structuring_metadata_;
    ::open_vector_format::VectorBlock_PolishingMetadata* polishing_metadata_;
  } process_meta_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Job_JobMetaData

// int64 job_creation_time = 1;
inline void Job_JobMetaData::clear_job_creation_time() {
  job_creation_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Job_JobMetaData::_internal_job_creation_time() const {
  return job_creation_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Job_JobMetaData::job_creation_time() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Job.JobMetaData.job_creation_time)
  return _internal_job_creation_time();
}
inline void Job_JobMetaData::_internal_set_job_creation_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  job_creation_time_ = value;
}
inline void Job_JobMetaData::set_job_creation_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_job_creation_time(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Job.JobMetaData.job_creation_time)
}

// uint64 version = 2;
inline void Job_JobMetaData::clear_version() {
  version_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Job_JobMetaData::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Job_JobMetaData::version() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Job.JobMetaData.version)
  return _internal_version();
}
inline void Job_JobMetaData::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  version_ = value;
}
inline void Job_JobMetaData::set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Job.JobMetaData.version)
}

// string job_name = 3;
inline void Job_JobMetaData::clear_job_name() {
  job_name_.ClearToEmpty();
}
inline const std::string& Job_JobMetaData::job_name() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Job.JobMetaData.job_name)
  return _internal_job_name();
}
inline void Job_JobMetaData::set_job_name(const std::string& value) {
  _internal_set_job_name(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Job.JobMetaData.job_name)
}
inline std::string* Job_JobMetaData::mutable_job_name() {
  // @@protoc_insertion_point(field_mutable:open_vector_format.Job.JobMetaData.job_name)
  return _internal_mutable_job_name();
}
inline const std::string& Job_JobMetaData::_internal_job_name() const {
  return job_name_.Get();
}
inline void Job_JobMetaData::_internal_set_job_name(const std::string& value) {
  
  job_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Job_JobMetaData::set_job_name(std::string&& value) {
  
  job_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:open_vector_format.Job.JobMetaData.job_name)
}
inline void Job_JobMetaData::set_job_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  job_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:open_vector_format.Job.JobMetaData.job_name)
}
inline void Job_JobMetaData::set_job_name(const char* value,
    size_t size) {
  
  job_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:open_vector_format.Job.JobMetaData.job_name)
}
inline std::string* Job_JobMetaData::_internal_mutable_job_name() {
  
  return job_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Job_JobMetaData::release_job_name() {
  // @@protoc_insertion_point(field_release:open_vector_format.Job.JobMetaData.job_name)
  return job_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Job_JobMetaData::set_allocated_job_name(std::string* job_name) {
  if (job_name != nullptr) {
    
  } else {
    
  }
  job_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), job_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.Job.JobMetaData.job_name)
}

// string author = 4;
inline void Job_JobMetaData::clear_author() {
  author_.ClearToEmpty();
}
inline const std::string& Job_JobMetaData::author() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Job.JobMetaData.author)
  return _internal_author();
}
inline void Job_JobMetaData::set_author(const std::string& value) {
  _internal_set_author(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Job.JobMetaData.author)
}
inline std::string* Job_JobMetaData::mutable_author() {
  // @@protoc_insertion_point(field_mutable:open_vector_format.Job.JobMetaData.author)
  return _internal_mutable_author();
}
inline const std::string& Job_JobMetaData::_internal_author() const {
  return author_.Get();
}
inline void Job_JobMetaData::_internal_set_author(const std::string& value) {
  
  author_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Job_JobMetaData::set_author(std::string&& value) {
  
  author_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:open_vector_format.Job.JobMetaData.author)
}
inline void Job_JobMetaData::set_author(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  author_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:open_vector_format.Job.JobMetaData.author)
}
inline void Job_JobMetaData::set_author(const char* value,
    size_t size) {
  
  author_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:open_vector_format.Job.JobMetaData.author)
}
inline std::string* Job_JobMetaData::_internal_mutable_author() {
  
  return author_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Job_JobMetaData::release_author() {
  // @@protoc_insertion_point(field_release:open_vector_format.Job.JobMetaData.author)
  return author_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Job_JobMetaData::set_allocated_author(std::string* author) {
  if (author != nullptr) {
    
  } else {
    
  }
  author_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), author,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.Job.JobMetaData.author)
}

// string description = 5;
inline void Job_JobMetaData::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& Job_JobMetaData::description() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Job.JobMetaData.description)
  return _internal_description();
}
inline void Job_JobMetaData::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Job.JobMetaData.description)
}
inline std::string* Job_JobMetaData::mutable_description() {
  // @@protoc_insertion_point(field_mutable:open_vector_format.Job.JobMetaData.description)
  return _internal_mutable_description();
}
inline const std::string& Job_JobMetaData::_internal_description() const {
  return description_.Get();
}
inline void Job_JobMetaData::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Job_JobMetaData::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:open_vector_format.Job.JobMetaData.description)
}
inline void Job_JobMetaData::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:open_vector_format.Job.JobMetaData.description)
}
inline void Job_JobMetaData::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:open_vector_format.Job.JobMetaData.description)
}
inline std::string* Job_JobMetaData::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Job_JobMetaData::release_description() {
  // @@protoc_insertion_point(field_release:open_vector_format.Job.JobMetaData.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Job_JobMetaData::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.Job.JobMetaData.description)
}

// -------------------------------------------------------------------

// Job

// repeated .open_vector_format.WorkPlane work_planes = 1;
inline int Job::_internal_work_planes_size() const {
  return work_planes_.size();
}
inline int Job::work_planes_size() const {
  return _internal_work_planes_size();
}
inline void Job::clear_work_planes() {
  work_planes_.Clear();
}
inline ::open_vector_format::WorkPlane* Job::mutable_work_planes(int index) {
  // @@protoc_insertion_point(field_mutable:open_vector_format.Job.work_planes)
  return work_planes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::open_vector_format::WorkPlane >*
Job::mutable_work_planes() {
  // @@protoc_insertion_point(field_mutable_list:open_vector_format.Job.work_planes)
  return &work_planes_;
}
inline const ::open_vector_format::WorkPlane& Job::_internal_work_planes(int index) const {
  return work_planes_.Get(index);
}
inline const ::open_vector_format::WorkPlane& Job::work_planes(int index) const {
  // @@protoc_insertion_point(field_get:open_vector_format.Job.work_planes)
  return _internal_work_planes(index);
}
inline ::open_vector_format::WorkPlane* Job::_internal_add_work_planes() {
  return work_planes_.Add();
}
inline ::open_vector_format::WorkPlane* Job::add_work_planes() {
  // @@protoc_insertion_point(field_add:open_vector_format.Job.work_planes)
  return _internal_add_work_planes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::open_vector_format::WorkPlane >&
Job::work_planes() const {
  // @@protoc_insertion_point(field_list:open_vector_format.Job.work_planes)
  return work_planes_;
}

// .open_vector_format.Job.JobMetaData job_meta_data = 2;
inline bool Job::_internal_has_job_meta_data() const {
  return this != internal_default_instance() && job_meta_data_ != nullptr;
}
inline bool Job::has_job_meta_data() const {
  return _internal_has_job_meta_data();
}
inline void Job::clear_job_meta_data() {
  if (GetArena() == nullptr && job_meta_data_ != nullptr) {
    delete job_meta_data_;
  }
  job_meta_data_ = nullptr;
}
inline const ::open_vector_format::Job_JobMetaData& Job::_internal_job_meta_data() const {
  const ::open_vector_format::Job_JobMetaData* p = job_meta_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::open_vector_format::Job_JobMetaData&>(
      ::open_vector_format::_Job_JobMetaData_default_instance_);
}
inline const ::open_vector_format::Job_JobMetaData& Job::job_meta_data() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Job.job_meta_data)
  return _internal_job_meta_data();
}
inline void Job::unsafe_arena_set_allocated_job_meta_data(
    ::open_vector_format::Job_JobMetaData* job_meta_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(job_meta_data_);
  }
  job_meta_data_ = job_meta_data;
  if (job_meta_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.Job.job_meta_data)
}
inline ::open_vector_format::Job_JobMetaData* Job::release_job_meta_data() {
  
  ::open_vector_format::Job_JobMetaData* temp = job_meta_data_;
  job_meta_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::open_vector_format::Job_JobMetaData* Job::unsafe_arena_release_job_meta_data() {
  // @@protoc_insertion_point(field_release:open_vector_format.Job.job_meta_data)
  
  ::open_vector_format::Job_JobMetaData* temp = job_meta_data_;
  job_meta_data_ = nullptr;
  return temp;
}
inline ::open_vector_format::Job_JobMetaData* Job::_internal_mutable_job_meta_data() {
  
  if (job_meta_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::open_vector_format::Job_JobMetaData>(GetArena());
    job_meta_data_ = p;
  }
  return job_meta_data_;
}
inline ::open_vector_format::Job_JobMetaData* Job::mutable_job_meta_data() {
  // @@protoc_insertion_point(field_mutable:open_vector_format.Job.job_meta_data)
  return _internal_mutable_job_meta_data();
}
inline void Job::set_allocated_job_meta_data(::open_vector_format::Job_JobMetaData* job_meta_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete job_meta_data_;
  }
  if (job_meta_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(job_meta_data);
    if (message_arena != submessage_arena) {
      job_meta_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, job_meta_data, submessage_arena);
    }
    
  } else {
    
  }
  job_meta_data_ = job_meta_data;
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.Job.job_meta_data)
}

// map<int32, .open_vector_format.MarkingParams> marking_params_map = 3;
inline int Job::_internal_marking_params_map_size() const {
  return marking_params_map_.size();
}
inline int Job::marking_params_map_size() const {
  return _internal_marking_params_map_size();
}
inline void Job::clear_marking_params_map() {
  marking_params_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::MarkingParams >&
Job::_internal_marking_params_map() const {
  return marking_params_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::MarkingParams >&
Job::marking_params_map() const {
  // @@protoc_insertion_point(field_map:open_vector_format.Job.marking_params_map)
  return _internal_marking_params_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::MarkingParams >*
Job::_internal_mutable_marking_params_map() {
  return marking_params_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::MarkingParams >*
Job::mutable_marking_params_map() {
  // @@protoc_insertion_point(field_mutable_map:open_vector_format.Job.marking_params_map)
  return _internal_mutable_marking_params_map();
}

// map<int32, .open_vector_format.Part> parts_map = 4;
inline int Job::_internal_parts_map_size() const {
  return parts_map_.size();
}
inline int Job::parts_map_size() const {
  return _internal_parts_map_size();
}
inline void Job::clear_parts_map() {
  parts_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::Part >&
Job::_internal_parts_map() const {
  return parts_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::Part >&
Job::parts_map() const {
  // @@protoc_insertion_point(field_map:open_vector_format.Job.parts_map)
  return _internal_parts_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::Part >*
Job::_internal_mutable_parts_map() {
  return parts_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::Part >*
Job::mutable_parts_map() {
  // @@protoc_insertion_point(field_mutable_map:open_vector_format.Job.parts_map)
  return _internal_mutable_parts_map();
}

// .open_vector_format.JobParameters job_parameters = 5;
inline bool Job::_internal_has_job_parameters() const {
  return this != internal_default_instance() && job_parameters_ != nullptr;
}
inline bool Job::has_job_parameters() const {
  return _internal_has_job_parameters();
}
inline void Job::clear_job_parameters() {
  if (GetArena() == nullptr && job_parameters_ != nullptr) {
    delete job_parameters_;
  }
  job_parameters_ = nullptr;
}
inline const ::open_vector_format::JobParameters& Job::_internal_job_parameters() const {
  const ::open_vector_format::JobParameters* p = job_parameters_;
  return p != nullptr ? *p : reinterpret_cast<const ::open_vector_format::JobParameters&>(
      ::open_vector_format::_JobParameters_default_instance_);
}
inline const ::open_vector_format::JobParameters& Job::job_parameters() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Job.job_parameters)
  return _internal_job_parameters();
}
inline void Job::unsafe_arena_set_allocated_job_parameters(
    ::open_vector_format::JobParameters* job_parameters) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(job_parameters_);
  }
  job_parameters_ = job_parameters;
  if (job_parameters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.Job.job_parameters)
}
inline ::open_vector_format::JobParameters* Job::release_job_parameters() {
  
  ::open_vector_format::JobParameters* temp = job_parameters_;
  job_parameters_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::open_vector_format::JobParameters* Job::unsafe_arena_release_job_parameters() {
  // @@protoc_insertion_point(field_release:open_vector_format.Job.job_parameters)
  
  ::open_vector_format::JobParameters* temp = job_parameters_;
  job_parameters_ = nullptr;
  return temp;
}
inline ::open_vector_format::JobParameters* Job::_internal_mutable_job_parameters() {
  
  if (job_parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::open_vector_format::JobParameters>(GetArena());
    job_parameters_ = p;
  }
  return job_parameters_;
}
inline ::open_vector_format::JobParameters* Job::mutable_job_parameters() {
  // @@protoc_insertion_point(field_mutable:open_vector_format.Job.job_parameters)
  return _internal_mutable_job_parameters();
}
inline void Job::set_allocated_job_parameters(::open_vector_format::JobParameters* job_parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete job_parameters_;
  }
  if (job_parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(job_parameters);
    if (message_arena != submessage_arena) {
      job_parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, job_parameters, submessage_arena);
    }
    
  } else {
    
  }
  job_parameters_ = job_parameters;
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.Job.job_parameters)
}

// int32 num_work_planes = 6;
inline void Job::clear_num_work_planes() {
  num_work_planes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Job::_internal_num_work_planes() const {
  return num_work_planes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Job::num_work_planes() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Job.num_work_planes)
  return _internal_num_work_planes();
}
inline void Job::_internal_set_num_work_planes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_work_planes_ = value;
}
inline void Job::set_num_work_planes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_work_planes(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Job.num_work_planes)
}

// -------------------------------------------------------------------

// JobParameters

// double preheating_temperatur_in_dg_c = 1;
inline void JobParameters::clear_preheating_temperatur_in_dg_c() {
  preheating_temperatur_in_dg_c_ = 0;
}
inline double JobParameters::_internal_preheating_temperatur_in_dg_c() const {
  return preheating_temperatur_in_dg_c_;
}
inline double JobParameters::preheating_temperatur_in_dg_c() const {
  // @@protoc_insertion_point(field_get:open_vector_format.JobParameters.preheating_temperatur_in_dg_c)
  return _internal_preheating_temperatur_in_dg_c();
}
inline void JobParameters::_internal_set_preheating_temperatur_in_dg_c(double value) {
  
  preheating_temperatur_in_dg_c_ = value;
}
inline void JobParameters::set_preheating_temperatur_in_dg_c(double value) {
  _internal_set_preheating_temperatur_in_dg_c(value);
  // @@protoc_insertion_point(field_set:open_vector_format.JobParameters.preheating_temperatur_in_dg_c)
}

// repeated double shielding_gas_directions = 2;
inline int JobParameters::_internal_shielding_gas_directions_size() const {
  return shielding_gas_directions_.size();
}
inline int JobParameters::shielding_gas_directions_size() const {
  return _internal_shielding_gas_directions_size();
}
inline void JobParameters::clear_shielding_gas_directions() {
  shielding_gas_directions_.Clear();
}
inline double JobParameters::_internal_shielding_gas_directions(int index) const {
  return shielding_gas_directions_.Get(index);
}
inline double JobParameters::shielding_gas_directions(int index) const {
  // @@protoc_insertion_point(field_get:open_vector_format.JobParameters.shielding_gas_directions)
  return _internal_shielding_gas_directions(index);
}
inline void JobParameters::set_shielding_gas_directions(int index, double value) {
  shielding_gas_directions_.Set(index, value);
  // @@protoc_insertion_point(field_set:open_vector_format.JobParameters.shielding_gas_directions)
}
inline void JobParameters::_internal_add_shielding_gas_directions(double value) {
  shielding_gas_directions_.Add(value);
}
inline void JobParameters::add_shielding_gas_directions(double value) {
  _internal_add_shielding_gas_directions(value);
  // @@protoc_insertion_point(field_add:open_vector_format.JobParameters.shielding_gas_directions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JobParameters::_internal_shielding_gas_directions() const {
  return shielding_gas_directions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JobParameters::shielding_gas_directions() const {
  // @@protoc_insertion_point(field_list:open_vector_format.JobParameters.shielding_gas_directions)
  return _internal_shielding_gas_directions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JobParameters::_internal_mutable_shielding_gas_directions() {
  return &shielding_gas_directions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JobParameters::mutable_shielding_gas_directions() {
  // @@protoc_insertion_point(field_mutable_list:open_vector_format.JobParameters.shielding_gas_directions)
  return _internal_mutable_shielding_gas_directions();
}

// repeated double material_feed_directions = 3;
inline int JobParameters::_internal_material_feed_directions_size() const {
  return material_feed_directions_.size();
}
inline int JobParameters::material_feed_directions_size() const {
  return _internal_material_feed_directions_size();
}
inline void JobParameters::clear_material_feed_directions() {
  material_feed_directions_.Clear();
}
inline double JobParameters::_internal_material_feed_directions(int index) const {
  return material_feed_directions_.Get(index);
}
inline double JobParameters::material_feed_directions(int index) const {
  // @@protoc_insertion_point(field_get:open_vector_format.JobParameters.material_feed_directions)
  return _internal_material_feed_directions(index);
}
inline void JobParameters::set_material_feed_directions(int index, double value) {
  material_feed_directions_.Set(index, value);
  // @@protoc_insertion_point(field_set:open_vector_format.JobParameters.material_feed_directions)
}
inline void JobParameters::_internal_add_material_feed_directions(double value) {
  material_feed_directions_.Add(value);
}
inline void JobParameters::add_material_feed_directions(double value) {
  _internal_add_material_feed_directions(value);
  // @@protoc_insertion_point(field_add:open_vector_format.JobParameters.material_feed_directions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JobParameters::_internal_material_feed_directions() const {
  return material_feed_directions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JobParameters::material_feed_directions() const {
  // @@protoc_insertion_point(field_list:open_vector_format.JobParameters.material_feed_directions)
  return _internal_material_feed_directions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JobParameters::_internal_mutable_material_feed_directions() {
  return &material_feed_directions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JobParameters::mutable_material_feed_directions() {
  // @@protoc_insertion_point(field_mutable_list:open_vector_format.JobParameters.material_feed_directions)
  return _internal_mutable_material_feed_directions();
}

// -------------------------------------------------------------------

// MarkingParams

// float laser_power_in_w = 1;
inline void MarkingParams::clear_laser_power_in_w() {
  laser_power_in_w_ = 0;
}
inline float MarkingParams::_internal_laser_power_in_w() const {
  return laser_power_in_w_;
}
inline float MarkingParams::laser_power_in_w() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.laser_power_in_w)
  return _internal_laser_power_in_w();
}
inline void MarkingParams::_internal_set_laser_power_in_w(float value) {
  
  laser_power_in_w_ = value;
}
inline void MarkingParams::set_laser_power_in_w(float value) {
  _internal_set_laser_power_in_w(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.laser_power_in_w)
}

// float laser_speed_in_mm_per_s = 2;
inline void MarkingParams::clear_laser_speed_in_mm_per_s() {
  laser_speed_in_mm_per_s_ = 0;
}
inline float MarkingParams::_internal_laser_speed_in_mm_per_s() const {
  return laser_speed_in_mm_per_s_;
}
inline float MarkingParams::laser_speed_in_mm_per_s() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.laser_speed_in_mm_per_s)
  return _internal_laser_speed_in_mm_per_s();
}
inline void MarkingParams::_internal_set_laser_speed_in_mm_per_s(float value) {
  
  laser_speed_in_mm_per_s_ = value;
}
inline void MarkingParams::set_laser_speed_in_mm_per_s(float value) {
  _internal_set_laser_speed_in_mm_per_s(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.laser_speed_in_mm_per_s)
}

// float laser_focus_shift_in_mm = 3;
inline void MarkingParams::clear_laser_focus_shift_in_mm() {
  laser_focus_shift_in_mm_ = 0;
}
inline float MarkingParams::_internal_laser_focus_shift_in_mm() const {
  return laser_focus_shift_in_mm_;
}
inline float MarkingParams::laser_focus_shift_in_mm() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.laser_focus_shift_in_mm)
  return _internal_laser_focus_shift_in_mm();
}
inline void MarkingParams::_internal_set_laser_focus_shift_in_mm(float value) {
  
  laser_focus_shift_in_mm_ = value;
}
inline void MarkingParams::set_laser_focus_shift_in_mm(float value) {
  _internal_set_laser_focus_shift_in_mm(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.laser_focus_shift_in_mm)
}

// float point_exposure_time_in_us = 4;
inline void MarkingParams::clear_point_exposure_time_in_us() {
  point_exposure_time_in_us_ = 0;
}
inline float MarkingParams::_internal_point_exposure_time_in_us() const {
  return point_exposure_time_in_us_;
}
inline float MarkingParams::point_exposure_time_in_us() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.point_exposure_time_in_us)
  return _internal_point_exposure_time_in_us();
}
inline void MarkingParams::_internal_set_point_exposure_time_in_us(float value) {
  
  point_exposure_time_in_us_ = value;
}
inline void MarkingParams::set_point_exposure_time_in_us(float value) {
  _internal_set_point_exposure_time_in_us(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.point_exposure_time_in_us)
}

// float jump_speed_in_mm_s = 5;
inline void MarkingParams::clear_jump_speed_in_mm_s() {
  jump_speed_in_mm_s_ = 0;
}
inline float MarkingParams::_internal_jump_speed_in_mm_s() const {
  return jump_speed_in_mm_s_;
}
inline float MarkingParams::jump_speed_in_mm_s() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.jump_speed_in_mm_s)
  return _internal_jump_speed_in_mm_s();
}
inline void MarkingParams::_internal_set_jump_speed_in_mm_s(float value) {
  
  jump_speed_in_mm_s_ = value;
}
inline void MarkingParams::set_jump_speed_in_mm_s(float value) {
  _internal_set_jump_speed_in_mm_s(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.jump_speed_in_mm_s)
}

// float point_exposure_repetitions = 6;
inline void MarkingParams::clear_point_exposure_repetitions() {
  point_exposure_repetitions_ = 0;
}
inline float MarkingParams::_internal_point_exposure_repetitions() const {
  return point_exposure_repetitions_;
}
inline float MarkingParams::point_exposure_repetitions() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.point_exposure_repetitions)
  return _internal_point_exposure_repetitions();
}
inline void MarkingParams::_internal_set_point_exposure_repetitions(float value) {
  
  point_exposure_repetitions_ = value;
}
inline void MarkingParams::set_point_exposure_repetitions(float value) {
  _internal_set_point_exposure_repetitions(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.point_exposure_repetitions)
}

// uint64 repetition_rate_in_hz = 7;
inline void MarkingParams::clear_repetition_rate_in_hz() {
  repetition_rate_in_hz_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarkingParams::_internal_repetition_rate_in_hz() const {
  return repetition_rate_in_hz_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarkingParams::repetition_rate_in_hz() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.repetition_rate_in_hz)
  return _internal_repetition_rate_in_hz();
}
inline void MarkingParams::_internal_set_repetition_rate_in_hz(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  repetition_rate_in_hz_ = value;
}
inline void MarkingParams::set_repetition_rate_in_hz(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_repetition_rate_in_hz(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.repetition_rate_in_hz)
}

// uint64 laser_pulses_per_burst = 8;
inline void MarkingParams::clear_laser_pulses_per_burst() {
  laser_pulses_per_burst_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarkingParams::_internal_laser_pulses_per_burst() const {
  return laser_pulses_per_burst_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarkingParams::laser_pulses_per_burst() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.laser_pulses_per_burst)
  return _internal_laser_pulses_per_burst();
}
inline void MarkingParams::_internal_set_laser_pulses_per_burst(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  laser_pulses_per_burst_ = value;
}
inline void MarkingParams::set_laser_pulses_per_burst(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_laser_pulses_per_burst(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.laser_pulses_per_burst)
}

// uint64 pulseDurationInFemtoseconds = 9;
inline void MarkingParams::clear_pulsedurationinfemtoseconds() {
  pulsedurationinfemtoseconds_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarkingParams::_internal_pulsedurationinfemtoseconds() const {
  return pulsedurationinfemtoseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarkingParams::pulsedurationinfemtoseconds() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.pulseDurationInFemtoseconds)
  return _internal_pulsedurationinfemtoseconds();
}
inline void MarkingParams::_internal_set_pulsedurationinfemtoseconds(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pulsedurationinfemtoseconds_ = value;
}
inline void MarkingParams::set_pulsedurationinfemtoseconds(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pulsedurationinfemtoseconds(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.pulseDurationInFemtoseconds)
}

// .open_vector_format.MarkingParams.MarkingMode marking_mode = 10;
inline void MarkingParams::clear_marking_mode() {
  marking_mode_ = 0;
}
inline ::open_vector_format::MarkingParams_MarkingMode MarkingParams::_internal_marking_mode() const {
  return static_cast< ::open_vector_format::MarkingParams_MarkingMode >(marking_mode_);
}
inline ::open_vector_format::MarkingParams_MarkingMode MarkingParams::marking_mode() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.marking_mode)
  return _internal_marking_mode();
}
inline void MarkingParams::_internal_set_marking_mode(::open_vector_format::MarkingParams_MarkingMode value) {
  
  marking_mode_ = value;
}
inline void MarkingParams::set_marking_mode(::open_vector_format::MarkingParams_MarkingMode value) {
  _internal_set_marking_mode(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.marking_mode)
}

// float jump_delay_in_us = 11;
inline void MarkingParams::clear_jump_delay_in_us() {
  jump_delay_in_us_ = 0;
}
inline float MarkingParams::_internal_jump_delay_in_us() const {
  return jump_delay_in_us_;
}
inline float MarkingParams::jump_delay_in_us() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.jump_delay_in_us)
  return _internal_jump_delay_in_us();
}
inline void MarkingParams::_internal_set_jump_delay_in_us(float value) {
  
  jump_delay_in_us_ = value;
}
inline void MarkingParams::set_jump_delay_in_us(float value) {
  _internal_set_jump_delay_in_us(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.jump_delay_in_us)
}

// float laser_off_delay_in_us = 12;
inline void MarkingParams::clear_laser_off_delay_in_us() {
  laser_off_delay_in_us_ = 0;
}
inline float MarkingParams::_internal_laser_off_delay_in_us() const {
  return laser_off_delay_in_us_;
}
inline float MarkingParams::laser_off_delay_in_us() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.laser_off_delay_in_us)
  return _internal_laser_off_delay_in_us();
}
inline void MarkingParams::_internal_set_laser_off_delay_in_us(float value) {
  
  laser_off_delay_in_us_ = value;
}
inline void MarkingParams::set_laser_off_delay_in_us(float value) {
  _internal_set_laser_off_delay_in_us(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.laser_off_delay_in_us)
}

// float laser_on_delay_in_us = 13;
inline void MarkingParams::clear_laser_on_delay_in_us() {
  laser_on_delay_in_us_ = 0;
}
inline float MarkingParams::_internal_laser_on_delay_in_us() const {
  return laser_on_delay_in_us_;
}
inline float MarkingParams::laser_on_delay_in_us() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.laser_on_delay_in_us)
  return _internal_laser_on_delay_in_us();
}
inline void MarkingParams::_internal_set_laser_on_delay_in_us(float value) {
  
  laser_on_delay_in_us_ = value;
}
inline void MarkingParams::set_laser_on_delay_in_us(float value) {
  _internal_set_laser_on_delay_in_us(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.laser_on_delay_in_us)
}

// float mark_delay_in_us = 14;
inline void MarkingParams::clear_mark_delay_in_us() {
  mark_delay_in_us_ = 0;
}
inline float MarkingParams::_internal_mark_delay_in_us() const {
  return mark_delay_in_us_;
}
inline float MarkingParams::mark_delay_in_us() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.mark_delay_in_us)
  return _internal_mark_delay_in_us();
}
inline void MarkingParams::_internal_set_mark_delay_in_us(float value) {
  
  mark_delay_in_us_ = value;
}
inline void MarkingParams::set_mark_delay_in_us(float value) {
  _internal_set_mark_delay_in_us(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.mark_delay_in_us)
}

// float polygon_delay_in_us = 15;
inline void MarkingParams::clear_polygon_delay_in_us() {
  polygon_delay_in_us_ = 0;
}
inline float MarkingParams::_internal_polygon_delay_in_us() const {
  return polygon_delay_in_us_;
}
inline float MarkingParams::polygon_delay_in_us() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.polygon_delay_in_us)
  return _internal_polygon_delay_in_us();
}
inline void MarkingParams::_internal_set_polygon_delay_in_us(float value) {
  
  polygon_delay_in_us_ = value;
}
inline void MarkingParams::set_polygon_delay_in_us(float value) {
  _internal_set_polygon_delay_in_us(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.polygon_delay_in_us)
}

// float time_lag_in_us = 16;
inline void MarkingParams::clear_time_lag_in_us() {
  time_lag_in_us_ = 0;
}
inline float MarkingParams::_internal_time_lag_in_us() const {
  return time_lag_in_us_;
}
inline float MarkingParams::time_lag_in_us() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.time_lag_in_us)
  return _internal_time_lag_in_us();
}
inline void MarkingParams::_internal_set_time_lag_in_us(float value) {
  
  time_lag_in_us_ = value;
}
inline void MarkingParams::set_time_lag_in_us(float value) {
  _internal_set_time_lag_in_us(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.time_lag_in_us)
}

// float laser_on_shift_in_us = 17;
inline void MarkingParams::clear_laser_on_shift_in_us() {
  laser_on_shift_in_us_ = 0;
}
inline float MarkingParams::_internal_laser_on_shift_in_us() const {
  return laser_on_shift_in_us_;
}
inline float MarkingParams::laser_on_shift_in_us() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.laser_on_shift_in_us)
  return _internal_laser_on_shift_in_us();
}
inline void MarkingParams::_internal_set_laser_on_shift_in_us(float value) {
  
  laser_on_shift_in_us_ = value;
}
inline void MarkingParams::set_laser_on_shift_in_us(float value) {
  _internal_set_laser_on_shift_in_us(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.laser_on_shift_in_us)
}

// float limit = 18;
inline void MarkingParams::clear_limit() {
  limit_ = 0;
}
inline float MarkingParams::_internal_limit() const {
  return limit_;
}
inline float MarkingParams::limit() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.limit)
  return _internal_limit();
}
inline void MarkingParams::_internal_set_limit(float value) {
  
  limit_ = value;
}
inline void MarkingParams::set_limit(float value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.limit)
}

// float n_prev_in_us = 19;
inline void MarkingParams::clear_n_prev_in_us() {
  n_prev_in_us_ = 0;
}
inline float MarkingParams::_internal_n_prev_in_us() const {
  return n_prev_in_us_;
}
inline float MarkingParams::n_prev_in_us() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.n_prev_in_us)
  return _internal_n_prev_in_us();
}
inline void MarkingParams::_internal_set_n_prev_in_us(float value) {
  
  n_prev_in_us_ = value;
}
inline void MarkingParams::set_n_prev_in_us(float value) {
  _internal_set_n_prev_in_us(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.n_prev_in_us)
}

// float n_post_in_us = 20;
inline void MarkingParams::clear_n_post_in_us() {
  n_post_in_us_ = 0;
}
inline float MarkingParams::_internal_n_post_in_us() const {
  return n_post_in_us_;
}
inline float MarkingParams::n_post_in_us() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.n_post_in_us)
  return _internal_n_post_in_us();
}
inline void MarkingParams::_internal_set_n_post_in_us(float value) {
  
  n_post_in_us_ = value;
}
inline void MarkingParams::set_n_post_in_us(float value) {
  _internal_set_n_post_in_us(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.n_post_in_us)
}

// float wob_frequency_in_hz = 21;
inline void MarkingParams::clear_wob_frequency_in_hz() {
  wob_frequency_in_hz_ = 0;
}
inline float MarkingParams::_internal_wob_frequency_in_hz() const {
  return wob_frequency_in_hz_;
}
inline float MarkingParams::wob_frequency_in_hz() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.wob_frequency_in_hz)
  return _internal_wob_frequency_in_hz();
}
inline void MarkingParams::_internal_set_wob_frequency_in_hz(float value) {
  
  wob_frequency_in_hz_ = value;
}
inline void MarkingParams::set_wob_frequency_in_hz(float value) {
  _internal_set_wob_frequency_in_hz(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.wob_frequency_in_hz)
}

// float wob_amp_long_in_mm = 22;
inline void MarkingParams::clear_wob_amp_long_in_mm() {
  wob_amp_long_in_mm_ = 0;
}
inline float MarkingParams::_internal_wob_amp_long_in_mm() const {
  return wob_amp_long_in_mm_;
}
inline float MarkingParams::wob_amp_long_in_mm() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.wob_amp_long_in_mm)
  return _internal_wob_amp_long_in_mm();
}
inline void MarkingParams::_internal_set_wob_amp_long_in_mm(float value) {
  
  wob_amp_long_in_mm_ = value;
}
inline void MarkingParams::set_wob_amp_long_in_mm(float value) {
  _internal_set_wob_amp_long_in_mm(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.wob_amp_long_in_mm)
}

// float wob_amp_trans_in_mm = 23;
inline void MarkingParams::clear_wob_amp_trans_in_mm() {
  wob_amp_trans_in_mm_ = 0;
}
inline float MarkingParams::_internal_wob_amp_trans_in_mm() const {
  return wob_amp_trans_in_mm_;
}
inline float MarkingParams::wob_amp_trans_in_mm() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.wob_amp_trans_in_mm)
  return _internal_wob_amp_trans_in_mm();
}
inline void MarkingParams::_internal_set_wob_amp_trans_in_mm(float value) {
  
  wob_amp_trans_in_mm_ = value;
}
inline void MarkingParams::set_wob_amp_trans_in_mm(float value) {
  _internal_set_wob_amp_trans_in_mm(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.wob_amp_trans_in_mm)
}

// .open_vector_format.MarkingParams.WobbleMode wobble_mode = 24;
inline void MarkingParams::clear_wobble_mode() {
  wobble_mode_ = 0;
}
inline ::open_vector_format::MarkingParams_WobbleMode MarkingParams::_internal_wobble_mode() const {
  return static_cast< ::open_vector_format::MarkingParams_WobbleMode >(wobble_mode_);
}
inline ::open_vector_format::MarkingParams_WobbleMode MarkingParams::wobble_mode() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.wobble_mode)
  return _internal_wobble_mode();
}
inline void MarkingParams::_internal_set_wobble_mode(::open_vector_format::MarkingParams_WobbleMode value) {
  
  wobble_mode_ = value;
}
inline void MarkingParams::set_wobble_mode(::open_vector_format::MarkingParams_WobbleMode value) {
  _internal_set_wobble_mode(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.wobble_mode)
}

// .open_vector_format.PowerGradientParams powerGradient = 25;
inline bool MarkingParams::_internal_has_powergradient() const {
  return this != internal_default_instance() && powergradient_ != nullptr;
}
inline bool MarkingParams::has_powergradient() const {
  return _internal_has_powergradient();
}
inline void MarkingParams::clear_powergradient() {
  if (GetArena() == nullptr && powergradient_ != nullptr) {
    delete powergradient_;
  }
  powergradient_ = nullptr;
}
inline const ::open_vector_format::PowerGradientParams& MarkingParams::_internal_powergradient() const {
  const ::open_vector_format::PowerGradientParams* p = powergradient_;
  return p != nullptr ? *p : reinterpret_cast<const ::open_vector_format::PowerGradientParams&>(
      ::open_vector_format::_PowerGradientParams_default_instance_);
}
inline const ::open_vector_format::PowerGradientParams& MarkingParams::powergradient() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.powerGradient)
  return _internal_powergradient();
}
inline void MarkingParams::unsafe_arena_set_allocated_powergradient(
    ::open_vector_format::PowerGradientParams* powergradient) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(powergradient_);
  }
  powergradient_ = powergradient;
  if (powergradient) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.MarkingParams.powerGradient)
}
inline ::open_vector_format::PowerGradientParams* MarkingParams::release_powergradient() {
  
  ::open_vector_format::PowerGradientParams* temp = powergradient_;
  powergradient_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::open_vector_format::PowerGradientParams* MarkingParams::unsafe_arena_release_powergradient() {
  // @@protoc_insertion_point(field_release:open_vector_format.MarkingParams.powerGradient)
  
  ::open_vector_format::PowerGradientParams* temp = powergradient_;
  powergradient_ = nullptr;
  return temp;
}
inline ::open_vector_format::PowerGradientParams* MarkingParams::_internal_mutable_powergradient() {
  
  if (powergradient_ == nullptr) {
    auto* p = CreateMaybeMessage<::open_vector_format::PowerGradientParams>(GetArena());
    powergradient_ = p;
  }
  return powergradient_;
}
inline ::open_vector_format::PowerGradientParams* MarkingParams::mutable_powergradient() {
  // @@protoc_insertion_point(field_mutable:open_vector_format.MarkingParams.powerGradient)
  return _internal_mutable_powergradient();
}
inline void MarkingParams::set_allocated_powergradient(::open_vector_format::PowerGradientParams* powergradient) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete powergradient_;
  }
  if (powergradient) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(powergradient);
    if (message_arena != submessage_arena) {
      powergradient = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, powergradient, submessage_arena);
    }
    
  } else {
    
  }
  powergradient_ = powergradient;
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.MarkingParams.powerGradient)
}

// string name = 26;
inline void MarkingParams::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& MarkingParams::name() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.name)
  return _internal_name();
}
inline void MarkingParams::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.name)
}
inline std::string* MarkingParams::mutable_name() {
  // @@protoc_insertion_point(field_mutable:open_vector_format.MarkingParams.name)
  return _internal_mutable_name();
}
inline const std::string& MarkingParams::_internal_name() const {
  return name_.Get();
}
inline void MarkingParams::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarkingParams::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:open_vector_format.MarkingParams.name)
}
inline void MarkingParams::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:open_vector_format.MarkingParams.name)
}
inline void MarkingParams::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:open_vector_format.MarkingParams.name)
}
inline std::string* MarkingParams::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarkingParams::release_name() {
  // @@protoc_insertion_point(field_release:open_vector_format.MarkingParams.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarkingParams::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.MarkingParams.name)
}

// -------------------------------------------------------------------

// PowerGradientParams

// float minPowerInW = 1;
inline void PowerGradientParams::clear_minpowerinw() {
  minpowerinw_ = 0;
}
inline float PowerGradientParams::_internal_minpowerinw() const {
  return minpowerinw_;
}
inline float PowerGradientParams::minpowerinw() const {
  // @@protoc_insertion_point(field_get:open_vector_format.PowerGradientParams.minPowerInW)
  return _internal_minpowerinw();
}
inline void PowerGradientParams::_internal_set_minpowerinw(float value) {
  
  minpowerinw_ = value;
}
inline void PowerGradientParams::set_minpowerinw(float value) {
  _internal_set_minpowerinw(value);
  // @@protoc_insertion_point(field_set:open_vector_format.PowerGradientParams.minPowerInW)
}

// float gradientInWPerS = 2;
inline void PowerGradientParams::clear_gradientinwpers() {
  gradientinwpers_ = 0;
}
inline float PowerGradientParams::_internal_gradientinwpers() const {
  return gradientinwpers_;
}
inline float PowerGradientParams::gradientinwpers() const {
  // @@protoc_insertion_point(field_get:open_vector_format.PowerGradientParams.gradientInWPerS)
  return _internal_gradientinwpers();
}
inline void PowerGradientParams::_internal_set_gradientinwpers(float value) {
  
  gradientinwpers_ = value;
}
inline void PowerGradientParams::set_gradientinwpers(float value) {
  _internal_set_gradientinwpers(value);
  // @@protoc_insertion_point(field_set:open_vector_format.PowerGradientParams.gradientInWPerS)
}

// -------------------------------------------------------------------

// Part_GeometryInfo

// double volume_in_mm3 = 1;
inline void Part_GeometryInfo::clear_volume_in_mm3() {
  volume_in_mm3_ = 0;
}
inline double Part_GeometryInfo::_internal_volume_in_mm3() const {
  return volume_in_mm3_;
}
inline double Part_GeometryInfo::volume_in_mm3() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.GeometryInfo.volume_in_mm3)
  return _internal_volume_in_mm3();
}
inline void Part_GeometryInfo::_internal_set_volume_in_mm3(double value) {
  
  volume_in_mm3_ = value;
}
inline void Part_GeometryInfo::set_volume_in_mm3(double value) {
  _internal_set_volume_in_mm3(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.GeometryInfo.volume_in_mm3)
}

// double support_volume_in_mm3 = 2;
inline void Part_GeometryInfo::clear_support_volume_in_mm3() {
  support_volume_in_mm3_ = 0;
}
inline double Part_GeometryInfo::_internal_support_volume_in_mm3() const {
  return support_volume_in_mm3_;
}
inline double Part_GeometryInfo::support_volume_in_mm3() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.GeometryInfo.support_volume_in_mm3)
  return _internal_support_volume_in_mm3();
}
inline void Part_GeometryInfo::_internal_set_support_volume_in_mm3(double value) {
  
  support_volume_in_mm3_ = value;
}
inline void Part_GeometryInfo::set_support_volume_in_mm3(double value) {
  _internal_set_support_volume_in_mm3(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.GeometryInfo.support_volume_in_mm3)
}

// double build_height_in_mm = 3;
inline void Part_GeometryInfo::clear_build_height_in_mm() {
  build_height_in_mm_ = 0;
}
inline double Part_GeometryInfo::_internal_build_height_in_mm() const {
  return build_height_in_mm_;
}
inline double Part_GeometryInfo::build_height_in_mm() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.GeometryInfo.build_height_in_mm)
  return _internal_build_height_in_mm();
}
inline void Part_GeometryInfo::_internal_set_build_height_in_mm(double value) {
  
  build_height_in_mm_ = value;
}
inline void Part_GeometryInfo::set_build_height_in_mm(double value) {
  _internal_set_build_height_in_mm(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.GeometryInfo.build_height_in_mm)
}

// double surface_area_in_mm2 = 4;
inline void Part_GeometryInfo::clear_surface_area_in_mm2() {
  surface_area_in_mm2_ = 0;
}
inline double Part_GeometryInfo::_internal_surface_area_in_mm2() const {
  return surface_area_in_mm2_;
}
inline double Part_GeometryInfo::surface_area_in_mm2() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.GeometryInfo.surface_area_in_mm2)
  return _internal_surface_area_in_mm2();
}
inline void Part_GeometryInfo::_internal_set_surface_area_in_mm2(double value) {
  
  surface_area_in_mm2_ = value;
}
inline void Part_GeometryInfo::set_surface_area_in_mm2(double value) {
  _internal_set_surface_area_in_mm2(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.GeometryInfo.surface_area_in_mm2)
}

// double projected_surface_in_mm2 = 5;
inline void Part_GeometryInfo::clear_projected_surface_in_mm2() {
  projected_surface_in_mm2_ = 0;
}
inline double Part_GeometryInfo::_internal_projected_surface_in_mm2() const {
  return projected_surface_in_mm2_;
}
inline double Part_GeometryInfo::projected_surface_in_mm2() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.GeometryInfo.projected_surface_in_mm2)
  return _internal_projected_surface_in_mm2();
}
inline void Part_GeometryInfo::_internal_set_projected_surface_in_mm2(double value) {
  
  projected_surface_in_mm2_ = value;
}
inline void Part_GeometryInfo::set_projected_surface_in_mm2(double value) {
  _internal_set_projected_surface_in_mm2(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.GeometryInfo.projected_surface_in_mm2)
}

// -------------------------------------------------------------------

// Part_Material

// uint64 id = 1;
inline void Part_Material::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Part_Material::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Part_Material::id() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.Material.id)
  return _internal_id();
}
inline void Part_Material::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void Part_Material::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.Material.id)
}

// string name = 2;
inline void Part_Material::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Part_Material::name() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.Material.name)
  return _internal_name();
}
inline void Part_Material::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.Material.name)
}
inline std::string* Part_Material::mutable_name() {
  // @@protoc_insertion_point(field_mutable:open_vector_format.Part.Material.name)
  return _internal_mutable_name();
}
inline const std::string& Part_Material::_internal_name() const {
  return name_.Get();
}
inline void Part_Material::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Part_Material::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:open_vector_format.Part.Material.name)
}
inline void Part_Material::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:open_vector_format.Part.Material.name)
}
inline void Part_Material::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:open_vector_format.Part.Material.name)
}
inline std::string* Part_Material::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Part_Material::release_name() {
  // @@protoc_insertion_point(field_release:open_vector_format.Part.Material.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Part_Material::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.Part.Material.name)
}

// -------------------------------------------------------------------

// Part_ProcessStrategy_ProprietaryParam

// string param_name = 1;
inline void Part_ProcessStrategy_ProprietaryParam::clear_param_name() {
  param_name_.ClearToEmpty();
}
inline const std::string& Part_ProcessStrategy_ProprietaryParam::param_name() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.ProcessStrategy.ProprietaryParam.param_name)
  return _internal_param_name();
}
inline void Part_ProcessStrategy_ProprietaryParam::set_param_name(const std::string& value) {
  _internal_set_param_name(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.ProcessStrategy.ProprietaryParam.param_name)
}
inline std::string* Part_ProcessStrategy_ProprietaryParam::mutable_param_name() {
  // @@protoc_insertion_point(field_mutable:open_vector_format.Part.ProcessStrategy.ProprietaryParam.param_name)
  return _internal_mutable_param_name();
}
inline const std::string& Part_ProcessStrategy_ProprietaryParam::_internal_param_name() const {
  return param_name_.Get();
}
inline void Part_ProcessStrategy_ProprietaryParam::_internal_set_param_name(const std::string& value) {
  
  param_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Part_ProcessStrategy_ProprietaryParam::set_param_name(std::string&& value) {
  
  param_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:open_vector_format.Part.ProcessStrategy.ProprietaryParam.param_name)
}
inline void Part_ProcessStrategy_ProprietaryParam::set_param_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  param_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:open_vector_format.Part.ProcessStrategy.ProprietaryParam.param_name)
}
inline void Part_ProcessStrategy_ProprietaryParam::set_param_name(const char* value,
    size_t size) {
  
  param_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:open_vector_format.Part.ProcessStrategy.ProprietaryParam.param_name)
}
inline std::string* Part_ProcessStrategy_ProprietaryParam::_internal_mutable_param_name() {
  
  return param_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Part_ProcessStrategy_ProprietaryParam::release_param_name() {
  // @@protoc_insertion_point(field_release:open_vector_format.Part.ProcessStrategy.ProprietaryParam.param_name)
  return param_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Part_ProcessStrategy_ProprietaryParam::set_allocated_param_name(std::string* param_name) {
  if (param_name != nullptr) {
    
  } else {
    
  }
  param_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.Part.ProcessStrategy.ProprietaryParam.param_name)
}

// double param_value = 2;
inline void Part_ProcessStrategy_ProprietaryParam::clear_param_value() {
  param_value_ = 0;
}
inline double Part_ProcessStrategy_ProprietaryParam::_internal_param_value() const {
  return param_value_;
}
inline double Part_ProcessStrategy_ProprietaryParam::param_value() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.ProcessStrategy.ProprietaryParam.param_value)
  return _internal_param_value();
}
inline void Part_ProcessStrategy_ProprietaryParam::_internal_set_param_value(double value) {
  
  param_value_ = value;
}
inline void Part_ProcessStrategy_ProprietaryParam::set_param_value(double value) {
  _internal_set_param_value(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.ProcessStrategy.ProprietaryParam.param_value)
}

// string param_description = 3;
inline void Part_ProcessStrategy_ProprietaryParam::clear_param_description() {
  param_description_.ClearToEmpty();
}
inline const std::string& Part_ProcessStrategy_ProprietaryParam::param_description() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.ProcessStrategy.ProprietaryParam.param_description)
  return _internal_param_description();
}
inline void Part_ProcessStrategy_ProprietaryParam::set_param_description(const std::string& value) {
  _internal_set_param_description(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.ProcessStrategy.ProprietaryParam.param_description)
}
inline std::string* Part_ProcessStrategy_ProprietaryParam::mutable_param_description() {
  // @@protoc_insertion_point(field_mutable:open_vector_format.Part.ProcessStrategy.ProprietaryParam.param_description)
  return _internal_mutable_param_description();
}
inline const std::string& Part_ProcessStrategy_ProprietaryParam::_internal_param_description() const {
  return param_description_.Get();
}
inline void Part_ProcessStrategy_ProprietaryParam::_internal_set_param_description(const std::string& value) {
  
  param_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Part_ProcessStrategy_ProprietaryParam::set_param_description(std::string&& value) {
  
  param_description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:open_vector_format.Part.ProcessStrategy.ProprietaryParam.param_description)
}
inline void Part_ProcessStrategy_ProprietaryParam::set_param_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  param_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:open_vector_format.Part.ProcessStrategy.ProprietaryParam.param_description)
}
inline void Part_ProcessStrategy_ProprietaryParam::set_param_description(const char* value,
    size_t size) {
  
  param_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:open_vector_format.Part.ProcessStrategy.ProprietaryParam.param_description)
}
inline std::string* Part_ProcessStrategy_ProprietaryParam::_internal_mutable_param_description() {
  
  return param_description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Part_ProcessStrategy_ProprietaryParam::release_param_description() {
  // @@protoc_insertion_point(field_release:open_vector_format.Part.ProcessStrategy.ProprietaryParam.param_description)
  return param_description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Part_ProcessStrategy_ProprietaryParam::set_allocated_param_description(std::string* param_description) {
  if (param_description != nullptr) {
    
  } else {
    
  }
  param_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param_description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.Part.ProcessStrategy.ProprietaryParam.param_description)
}

// -------------------------------------------------------------------

// Part_ProcessStrategy

// float rot_angle_in_deg = 1;
inline void Part_ProcessStrategy::clear_rot_angle_in_deg() {
  rot_angle_in_deg_ = 0;
}
inline float Part_ProcessStrategy::_internal_rot_angle_in_deg() const {
  return rot_angle_in_deg_;
}
inline float Part_ProcessStrategy::rot_angle_in_deg() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.ProcessStrategy.rot_angle_in_deg)
  return _internal_rot_angle_in_deg();
}
inline void Part_ProcessStrategy::_internal_set_rot_angle_in_deg(float value) {
  
  rot_angle_in_deg_ = value;
}
inline void Part_ProcessStrategy::set_rot_angle_in_deg(float value) {
  _internal_set_rot_angle_in_deg(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.ProcessStrategy.rot_angle_in_deg)
}

// float increment_angle_in_deg = 2;
inline void Part_ProcessStrategy::clear_increment_angle_in_deg() {
  increment_angle_in_deg_ = 0;
}
inline float Part_ProcessStrategy::_internal_increment_angle_in_deg() const {
  return increment_angle_in_deg_;
}
inline float Part_ProcessStrategy::increment_angle_in_deg() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.ProcessStrategy.increment_angle_in_deg)
  return _internal_increment_angle_in_deg();
}
inline void Part_ProcessStrategy::_internal_set_increment_angle_in_deg(float value) {
  
  increment_angle_in_deg_ = value;
}
inline void Part_ProcessStrategy::set_increment_angle_in_deg(float value) {
  _internal_set_increment_angle_in_deg(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.ProcessStrategy.increment_angle_in_deg)
}

// float shift_in_mm = 3;
inline void Part_ProcessStrategy::clear_shift_in_mm() {
  shift_in_mm_ = 0;
}
inline float Part_ProcessStrategy::_internal_shift_in_mm() const {
  return shift_in_mm_;
}
inline float Part_ProcessStrategy::shift_in_mm() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.ProcessStrategy.shift_in_mm)
  return _internal_shift_in_mm();
}
inline void Part_ProcessStrategy::_internal_set_shift_in_mm(float value) {
  
  shift_in_mm_ = value;
}
inline void Part_ProcessStrategy::set_shift_in_mm(float value) {
  _internal_set_shift_in_mm(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.ProcessStrategy.shift_in_mm)
}

// float extend_into_in_mm = 4;
inline void Part_ProcessStrategy::clear_extend_into_in_mm() {
  extend_into_in_mm_ = 0;
}
inline float Part_ProcessStrategy::_internal_extend_into_in_mm() const {
  return extend_into_in_mm_;
}
inline float Part_ProcessStrategy::extend_into_in_mm() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.ProcessStrategy.extend_into_in_mm)
  return _internal_extend_into_in_mm();
}
inline void Part_ProcessStrategy::_internal_set_extend_into_in_mm(float value) {
  
  extend_into_in_mm_ = value;
}
inline void Part_ProcessStrategy::set_extend_into_in_mm(float value) {
  _internal_set_extend_into_in_mm(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.ProcessStrategy.extend_into_in_mm)
}

// float layer_thickness_in_mm = 5;
inline void Part_ProcessStrategy::clear_layer_thickness_in_mm() {
  layer_thickness_in_mm_ = 0;
}
inline float Part_ProcessStrategy::_internal_layer_thickness_in_mm() const {
  return layer_thickness_in_mm_;
}
inline float Part_ProcessStrategy::layer_thickness_in_mm() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.ProcessStrategy.layer_thickness_in_mm)
  return _internal_layer_thickness_in_mm();
}
inline void Part_ProcessStrategy::_internal_set_layer_thickness_in_mm(float value) {
  
  layer_thickness_in_mm_ = value;
}
inline void Part_ProcessStrategy::set_layer_thickness_in_mm(float value) {
  _internal_set_layer_thickness_in_mm(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.ProcessStrategy.layer_thickness_in_mm)
}

// float hatch_distance_in_mm = 6;
inline void Part_ProcessStrategy::clear_hatch_distance_in_mm() {
  hatch_distance_in_mm_ = 0;
}
inline float Part_ProcessStrategy::_internal_hatch_distance_in_mm() const {
  return hatch_distance_in_mm_;
}
inline float Part_ProcessStrategy::hatch_distance_in_mm() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.ProcessStrategy.hatch_distance_in_mm)
  return _internal_hatch_distance_in_mm();
}
inline void Part_ProcessStrategy::_internal_set_hatch_distance_in_mm(float value) {
  
  hatch_distance_in_mm_ = value;
}
inline void Part_ProcessStrategy::set_hatch_distance_in_mm(float value) {
  _internal_set_hatch_distance_in_mm(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.ProcessStrategy.hatch_distance_in_mm)
}

// float hatch_contour_distance_in_mm = 7;
inline void Part_ProcessStrategy::clear_hatch_contour_distance_in_mm() {
  hatch_contour_distance_in_mm_ = 0;
}
inline float Part_ProcessStrategy::_internal_hatch_contour_distance_in_mm() const {
  return hatch_contour_distance_in_mm_;
}
inline float Part_ProcessStrategy::hatch_contour_distance_in_mm() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.ProcessStrategy.hatch_contour_distance_in_mm)
  return _internal_hatch_contour_distance_in_mm();
}
inline void Part_ProcessStrategy::_internal_set_hatch_contour_distance_in_mm(float value) {
  
  hatch_contour_distance_in_mm_ = value;
}
inline void Part_ProcessStrategy::set_hatch_contour_distance_in_mm(float value) {
  _internal_set_hatch_contour_distance_in_mm(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.ProcessStrategy.hatch_contour_distance_in_mm)
}

// float overhang_angle_in_deg = 8;
inline void Part_ProcessStrategy::clear_overhang_angle_in_deg() {
  overhang_angle_in_deg_ = 0;
}
inline float Part_ProcessStrategy::_internal_overhang_angle_in_deg() const {
  return overhang_angle_in_deg_;
}
inline float Part_ProcessStrategy::overhang_angle_in_deg() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.ProcessStrategy.overhang_angle_in_deg)
  return _internal_overhang_angle_in_deg();
}
inline void Part_ProcessStrategy::_internal_set_overhang_angle_in_deg(float value) {
  
  overhang_angle_in_deg_ = value;
}
inline void Part_ProcessStrategy::set_overhang_angle_in_deg(float value) {
  _internal_set_overhang_angle_in_deg(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.ProcessStrategy.overhang_angle_in_deg)
}

// float contour_offset_in_mm = 9;
inline void Part_ProcessStrategy::clear_contour_offset_in_mm() {
  contour_offset_in_mm_ = 0;
}
inline float Part_ProcessStrategy::_internal_contour_offset_in_mm() const {
  return contour_offset_in_mm_;
}
inline float Part_ProcessStrategy::contour_offset_in_mm() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.ProcessStrategy.contour_offset_in_mm)
  return _internal_contour_offset_in_mm();
}
inline void Part_ProcessStrategy::_internal_set_contour_offset_in_mm(float value) {
  
  contour_offset_in_mm_ = value;
}
inline void Part_ProcessStrategy::set_contour_offset_in_mm(float value) {
  _internal_set_contour_offset_in_mm(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.ProcessStrategy.contour_offset_in_mm)
}

// int32 number_of_contours = 10;
inline void Part_ProcessStrategy::clear_number_of_contours() {
  number_of_contours_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Part_ProcessStrategy::_internal_number_of_contours() const {
  return number_of_contours_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Part_ProcessStrategy::number_of_contours() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.ProcessStrategy.number_of_contours)
  return _internal_number_of_contours();
}
inline void Part_ProcessStrategy::_internal_set_number_of_contours(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  number_of_contours_ = value;
}
inline void Part_ProcessStrategy::set_number_of_contours(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_number_of_contours(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.ProcessStrategy.number_of_contours)
}

// float contour_distance_in_mm = 11;
inline void Part_ProcessStrategy::clear_contour_distance_in_mm() {
  contour_distance_in_mm_ = 0;
}
inline float Part_ProcessStrategy::_internal_contour_distance_in_mm() const {
  return contour_distance_in_mm_;
}
inline float Part_ProcessStrategy::contour_distance_in_mm() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.ProcessStrategy.contour_distance_in_mm)
  return _internal_contour_distance_in_mm();
}
inline void Part_ProcessStrategy::_internal_set_contour_distance_in_mm(float value) {
  
  contour_distance_in_mm_ = value;
}
inline void Part_ProcessStrategy::set_contour_distance_in_mm(float value) {
  _internal_set_contour_distance_in_mm(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.ProcessStrategy.contour_distance_in_mm)
}

// .open_vector_format.Part.ProcessStrategy.HatchingPattern hatching_pattern = 12;
inline void Part_ProcessStrategy::clear_hatching_pattern() {
  hatching_pattern_ = 0;
}
inline ::open_vector_format::Part_ProcessStrategy_HatchingPattern Part_ProcessStrategy::_internal_hatching_pattern() const {
  return static_cast< ::open_vector_format::Part_ProcessStrategy_HatchingPattern >(hatching_pattern_);
}
inline ::open_vector_format::Part_ProcessStrategy_HatchingPattern Part_ProcessStrategy::hatching_pattern() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.ProcessStrategy.hatching_pattern)
  return _internal_hatching_pattern();
}
inline void Part_ProcessStrategy::_internal_set_hatching_pattern(::open_vector_format::Part_ProcessStrategy_HatchingPattern value) {
  
  hatching_pattern_ = value;
}
inline void Part_ProcessStrategy::set_hatching_pattern(::open_vector_format::Part_ProcessStrategy_HatchingPattern value) {
  _internal_set_hatching_pattern(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.ProcessStrategy.hatching_pattern)
}

// string name = 90;
inline void Part_ProcessStrategy::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Part_ProcessStrategy::name() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.ProcessStrategy.name)
  return _internal_name();
}
inline void Part_ProcessStrategy::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.ProcessStrategy.name)
}
inline std::string* Part_ProcessStrategy::mutable_name() {
  // @@protoc_insertion_point(field_mutable:open_vector_format.Part.ProcessStrategy.name)
  return _internal_mutable_name();
}
inline const std::string& Part_ProcessStrategy::_internal_name() const {
  return name_.Get();
}
inline void Part_ProcessStrategy::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Part_ProcessStrategy::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:open_vector_format.Part.ProcessStrategy.name)
}
inline void Part_ProcessStrategy::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:open_vector_format.Part.ProcessStrategy.name)
}
inline void Part_ProcessStrategy::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:open_vector_format.Part.ProcessStrategy.name)
}
inline std::string* Part_ProcessStrategy::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Part_ProcessStrategy::release_name() {
  // @@protoc_insertion_point(field_release:open_vector_format.Part.ProcessStrategy.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Part_ProcessStrategy::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.Part.ProcessStrategy.name)
}

// repeated .open_vector_format.Part.ProcessStrategy.ProprietaryParam additional_parameters = 100;
inline int Part_ProcessStrategy::_internal_additional_parameters_size() const {
  return additional_parameters_.size();
}
inline int Part_ProcessStrategy::additional_parameters_size() const {
  return _internal_additional_parameters_size();
}
inline void Part_ProcessStrategy::clear_additional_parameters() {
  additional_parameters_.Clear();
}
inline ::open_vector_format::Part_ProcessStrategy_ProprietaryParam* Part_ProcessStrategy::mutable_additional_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:open_vector_format.Part.ProcessStrategy.additional_parameters)
  return additional_parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::open_vector_format::Part_ProcessStrategy_ProprietaryParam >*
Part_ProcessStrategy::mutable_additional_parameters() {
  // @@protoc_insertion_point(field_mutable_list:open_vector_format.Part.ProcessStrategy.additional_parameters)
  return &additional_parameters_;
}
inline const ::open_vector_format::Part_ProcessStrategy_ProprietaryParam& Part_ProcessStrategy::_internal_additional_parameters(int index) const {
  return additional_parameters_.Get(index);
}
inline const ::open_vector_format::Part_ProcessStrategy_ProprietaryParam& Part_ProcessStrategy::additional_parameters(int index) const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.ProcessStrategy.additional_parameters)
  return _internal_additional_parameters(index);
}
inline ::open_vector_format::Part_ProcessStrategy_ProprietaryParam* Part_ProcessStrategy::_internal_add_additional_parameters() {
  return additional_parameters_.Add();
}
inline ::open_vector_format::Part_ProcessStrategy_ProprietaryParam* Part_ProcessStrategy::add_additional_parameters() {
  // @@protoc_insertion_point(field_add:open_vector_format.Part.ProcessStrategy.additional_parameters)
  return _internal_add_additional_parameters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::open_vector_format::Part_ProcessStrategy_ProprietaryParam >&
Part_ProcessStrategy::additional_parameters() const {
  // @@protoc_insertion_point(field_list:open_vector_format.Part.ProcessStrategy.additional_parameters)
  return additional_parameters_;
}

// -------------------------------------------------------------------

// Part

// string name = 1;
inline void Part::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Part::name() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.name)
  return _internal_name();
}
inline void Part::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.name)
}
inline std::string* Part::mutable_name() {
  // @@protoc_insertion_point(field_mutable:open_vector_format.Part.name)
  return _internal_mutable_name();
}
inline const std::string& Part::_internal_name() const {
  return name_.Get();
}
inline void Part::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Part::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:open_vector_format.Part.name)
}
inline void Part::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:open_vector_format.Part.name)
}
inline void Part::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:open_vector_format.Part.name)
}
inline std::string* Part::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Part::release_name() {
  // @@protoc_insertion_point(field_release:open_vector_format.Part.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Part::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.Part.name)
}

// .open_vector_format.Part.GeometryInfo geometry_info = 2;
inline bool Part::_internal_has_geometry_info() const {
  return this != internal_default_instance() && geometry_info_ != nullptr;
}
inline bool Part::has_geometry_info() const {
  return _internal_has_geometry_info();
}
inline void Part::clear_geometry_info() {
  if (GetArena() == nullptr && geometry_info_ != nullptr) {
    delete geometry_info_;
  }
  geometry_info_ = nullptr;
}
inline const ::open_vector_format::Part_GeometryInfo& Part::_internal_geometry_info() const {
  const ::open_vector_format::Part_GeometryInfo* p = geometry_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::open_vector_format::Part_GeometryInfo&>(
      ::open_vector_format::_Part_GeometryInfo_default_instance_);
}
inline const ::open_vector_format::Part_GeometryInfo& Part::geometry_info() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.geometry_info)
  return _internal_geometry_info();
}
inline void Part::unsafe_arena_set_allocated_geometry_info(
    ::open_vector_format::Part_GeometryInfo* geometry_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(geometry_info_);
  }
  geometry_info_ = geometry_info;
  if (geometry_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.Part.geometry_info)
}
inline ::open_vector_format::Part_GeometryInfo* Part::release_geometry_info() {
  
  ::open_vector_format::Part_GeometryInfo* temp = geometry_info_;
  geometry_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::open_vector_format::Part_GeometryInfo* Part::unsafe_arena_release_geometry_info() {
  // @@protoc_insertion_point(field_release:open_vector_format.Part.geometry_info)
  
  ::open_vector_format::Part_GeometryInfo* temp = geometry_info_;
  geometry_info_ = nullptr;
  return temp;
}
inline ::open_vector_format::Part_GeometryInfo* Part::_internal_mutable_geometry_info() {
  
  if (geometry_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::open_vector_format::Part_GeometryInfo>(GetArena());
    geometry_info_ = p;
  }
  return geometry_info_;
}
inline ::open_vector_format::Part_GeometryInfo* Part::mutable_geometry_info() {
  // @@protoc_insertion_point(field_mutable:open_vector_format.Part.geometry_info)
  return _internal_mutable_geometry_info();
}
inline void Part::set_allocated_geometry_info(::open_vector_format::Part_GeometryInfo* geometry_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete geometry_info_;
  }
  if (geometry_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(geometry_info);
    if (message_arena != submessage_arena) {
      geometry_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geometry_info, submessage_arena);
    }
    
  } else {
    
  }
  geometry_info_ = geometry_info;
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.Part.geometry_info)
}

// .open_vector_format.Part.Material material = 3;
inline bool Part::_internal_has_material() const {
  return this != internal_default_instance() && material_ != nullptr;
}
inline bool Part::has_material() const {
  return _internal_has_material();
}
inline void Part::clear_material() {
  if (GetArena() == nullptr && material_ != nullptr) {
    delete material_;
  }
  material_ = nullptr;
}
inline const ::open_vector_format::Part_Material& Part::_internal_material() const {
  const ::open_vector_format::Part_Material* p = material_;
  return p != nullptr ? *p : reinterpret_cast<const ::open_vector_format::Part_Material&>(
      ::open_vector_format::_Part_Material_default_instance_);
}
inline const ::open_vector_format::Part_Material& Part::material() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.material)
  return _internal_material();
}
inline void Part::unsafe_arena_set_allocated_material(
    ::open_vector_format::Part_Material* material) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(material_);
  }
  material_ = material;
  if (material) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.Part.material)
}
inline ::open_vector_format::Part_Material* Part::release_material() {
  
  ::open_vector_format::Part_Material* temp = material_;
  material_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::open_vector_format::Part_Material* Part::unsafe_arena_release_material() {
  // @@protoc_insertion_point(field_release:open_vector_format.Part.material)
  
  ::open_vector_format::Part_Material* temp = material_;
  material_ = nullptr;
  return temp;
}
inline ::open_vector_format::Part_Material* Part::_internal_mutable_material() {
  
  if (material_ == nullptr) {
    auto* p = CreateMaybeMessage<::open_vector_format::Part_Material>(GetArena());
    material_ = p;
  }
  return material_;
}
inline ::open_vector_format::Part_Material* Part::mutable_material() {
  // @@protoc_insertion_point(field_mutable:open_vector_format.Part.material)
  return _internal_mutable_material();
}
inline void Part::set_allocated_material(::open_vector_format::Part_Material* material) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete material_;
  }
  if (material) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(material);
    if (message_arena != submessage_arena) {
      material = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, material, submessage_arena);
    }
    
  } else {
    
  }
  material_ = material;
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.Part.material)
}

// .open_vector_format.Part.ProcessStrategy process_strategy = 4;
inline bool Part::_internal_has_process_strategy() const {
  return this != internal_default_instance() && process_strategy_ != nullptr;
}
inline bool Part::has_process_strategy() const {
  return _internal_has_process_strategy();
}
inline void Part::clear_process_strategy() {
  if (GetArena() == nullptr && process_strategy_ != nullptr) {
    delete process_strategy_;
  }
  process_strategy_ = nullptr;
}
inline const ::open_vector_format::Part_ProcessStrategy& Part::_internal_process_strategy() const {
  const ::open_vector_format::Part_ProcessStrategy* p = process_strategy_;
  return p != nullptr ? *p : reinterpret_cast<const ::open_vector_format::Part_ProcessStrategy&>(
      ::open_vector_format::_Part_ProcessStrategy_default_instance_);
}
inline const ::open_vector_format::Part_ProcessStrategy& Part::process_strategy() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.process_strategy)
  return _internal_process_strategy();
}
inline void Part::unsafe_arena_set_allocated_process_strategy(
    ::open_vector_format::Part_ProcessStrategy* process_strategy) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(process_strategy_);
  }
  process_strategy_ = process_strategy;
  if (process_strategy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.Part.process_strategy)
}
inline ::open_vector_format::Part_ProcessStrategy* Part::release_process_strategy() {
  
  ::open_vector_format::Part_ProcessStrategy* temp = process_strategy_;
  process_strategy_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::open_vector_format::Part_ProcessStrategy* Part::unsafe_arena_release_process_strategy() {
  // @@protoc_insertion_point(field_release:open_vector_format.Part.process_strategy)
  
  ::open_vector_format::Part_ProcessStrategy* temp = process_strategy_;
  process_strategy_ = nullptr;
  return temp;
}
inline ::open_vector_format::Part_ProcessStrategy* Part::_internal_mutable_process_strategy() {
  
  if (process_strategy_ == nullptr) {
    auto* p = CreateMaybeMessage<::open_vector_format::Part_ProcessStrategy>(GetArena());
    process_strategy_ = p;
  }
  return process_strategy_;
}
inline ::open_vector_format::Part_ProcessStrategy* Part::mutable_process_strategy() {
  // @@protoc_insertion_point(field_mutable:open_vector_format.Part.process_strategy)
  return _internal_mutable_process_strategy();
}
inline void Part::set_allocated_process_strategy(::open_vector_format::Part_ProcessStrategy* process_strategy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete process_strategy_;
  }
  if (process_strategy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(process_strategy);
    if (message_arena != submessage_arena) {
      process_strategy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, process_strategy, submessage_arena);
    }
    
  } else {
    
  }
  process_strategy_ = process_strategy;
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.Part.process_strategy)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// WorkPlane_WorkPlaneMetaData_closedContour

// repeated int32 contour_section_vector_block_indices = 1;
inline int WorkPlane_WorkPlaneMetaData_closedContour::_internal_contour_section_vector_block_indices_size() const {
  return contour_section_vector_block_indices_.size();
}
inline int WorkPlane_WorkPlaneMetaData_closedContour::contour_section_vector_block_indices_size() const {
  return _internal_contour_section_vector_block_indices_size();
}
inline void WorkPlane_WorkPlaneMetaData_closedContour::clear_contour_section_vector_block_indices() {
  contour_section_vector_block_indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkPlane_WorkPlaneMetaData_closedContour::_internal_contour_section_vector_block_indices(int index) const {
  return contour_section_vector_block_indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkPlane_WorkPlaneMetaData_closedContour::contour_section_vector_block_indices(int index) const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour.contour_section_vector_block_indices)
  return _internal_contour_section_vector_block_indices(index);
}
inline void WorkPlane_WorkPlaneMetaData_closedContour::set_contour_section_vector_block_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  contour_section_vector_block_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour.contour_section_vector_block_indices)
}
inline void WorkPlane_WorkPlaneMetaData_closedContour::_internal_add_contour_section_vector_block_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  contour_section_vector_block_indices_.Add(value);
}
inline void WorkPlane_WorkPlaneMetaData_closedContour::add_contour_section_vector_block_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_contour_section_vector_block_indices(value);
  // @@protoc_insertion_point(field_add:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour.contour_section_vector_block_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
WorkPlane_WorkPlaneMetaData_closedContour::_internal_contour_section_vector_block_indices() const {
  return contour_section_vector_block_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
WorkPlane_WorkPlaneMetaData_closedContour::contour_section_vector_block_indices() const {
  // @@protoc_insertion_point(field_list:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour.contour_section_vector_block_indices)
  return _internal_contour_section_vector_block_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
WorkPlane_WorkPlaneMetaData_closedContour::_internal_mutable_contour_section_vector_block_indices() {
  return &contour_section_vector_block_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
WorkPlane_WorkPlaneMetaData_closedContour::mutable_contour_section_vector_block_indices() {
  // @@protoc_insertion_point(field_mutable_list:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour.contour_section_vector_block_indices)
  return _internal_mutable_contour_section_vector_block_indices();
}

// float area_in_mm_2 = 2;
inline void WorkPlane_WorkPlaneMetaData_closedContour::clear_area_in_mm_2() {
  area_in_mm_2_ = 0;
}
inline float WorkPlane_WorkPlaneMetaData_closedContour::_internal_area_in_mm_2() const {
  return area_in_mm_2_;
}
inline float WorkPlane_WorkPlaneMetaData_closedContour::area_in_mm_2() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour.area_in_mm_2)
  return _internal_area_in_mm_2();
}
inline void WorkPlane_WorkPlaneMetaData_closedContour::_internal_set_area_in_mm_2(float value) {
  
  area_in_mm_2_ = value;
}
inline void WorkPlane_WorkPlaneMetaData_closedContour::set_area_in_mm_2(float value) {
  _internal_set_area_in_mm_2(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour.area_in_mm_2)
}

// float length_in_mm = 3;
inline void WorkPlane_WorkPlaneMetaData_closedContour::clear_length_in_mm() {
  length_in_mm_ = 0;
}
inline float WorkPlane_WorkPlaneMetaData_closedContour::_internal_length_in_mm() const {
  return length_in_mm_;
}
inline float WorkPlane_WorkPlaneMetaData_closedContour::length_in_mm() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour.length_in_mm)
  return _internal_length_in_mm();
}
inline void WorkPlane_WorkPlaneMetaData_closedContour::_internal_set_length_in_mm(float value) {
  
  length_in_mm_ = value;
}
inline void WorkPlane_WorkPlaneMetaData_closedContour::set_length_in_mm(float value) {
  _internal_set_length_in_mm(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour.length_in_mm)
}

// -------------------------------------------------------------------

// WorkPlane_WorkPlaneMetaData

// double total_scan_distance_in_mm = 1;
inline void WorkPlane_WorkPlaneMetaData::clear_total_scan_distance_in_mm() {
  total_scan_distance_in_mm_ = 0;
}
inline double WorkPlane_WorkPlaneMetaData::_internal_total_scan_distance_in_mm() const {
  return total_scan_distance_in_mm_;
}
inline double WorkPlane_WorkPlaneMetaData::total_scan_distance_in_mm() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.WorkPlaneMetaData.total_scan_distance_in_mm)
  return _internal_total_scan_distance_in_mm();
}
inline void WorkPlane_WorkPlaneMetaData::_internal_set_total_scan_distance_in_mm(double value) {
  
  total_scan_distance_in_mm_ = value;
}
inline void WorkPlane_WorkPlaneMetaData::set_total_scan_distance_in_mm(double value) {
  _internal_set_total_scan_distance_in_mm(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.WorkPlaneMetaData.total_scan_distance_in_mm)
}

// double total_jump_distance_in_mm = 2;
inline void WorkPlane_WorkPlaneMetaData::clear_total_jump_distance_in_mm() {
  total_jump_distance_in_mm_ = 0;
}
inline double WorkPlane_WorkPlaneMetaData::_internal_total_jump_distance_in_mm() const {
  return total_jump_distance_in_mm_;
}
inline double WorkPlane_WorkPlaneMetaData::total_jump_distance_in_mm() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.WorkPlaneMetaData.total_jump_distance_in_mm)
  return _internal_total_jump_distance_in_mm();
}
inline void WorkPlane_WorkPlaneMetaData::_internal_set_total_jump_distance_in_mm(double value) {
  
  total_jump_distance_in_mm_ = value;
}
inline void WorkPlane_WorkPlaneMetaData::set_total_jump_distance_in_mm(double value) {
  _internal_set_total_jump_distance_in_mm(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.WorkPlaneMetaData.total_jump_distance_in_mm)
}

// map<int32, .open_vector_format.WorkPlane.Patch> patches_map = 3;
inline int WorkPlane_WorkPlaneMetaData::_internal_patches_map_size() const {
  return patches_map_.size();
}
inline int WorkPlane_WorkPlaneMetaData::patches_map_size() const {
  return _internal_patches_map_size();
}
inline void WorkPlane_WorkPlaneMetaData::clear_patches_map() {
  patches_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::WorkPlane_Patch >&
WorkPlane_WorkPlaneMetaData::_internal_patches_map() const {
  return patches_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::WorkPlane_Patch >&
WorkPlane_WorkPlaneMetaData::patches_map() const {
  // @@protoc_insertion_point(field_map:open_vector_format.WorkPlane.WorkPlaneMetaData.patches_map)
  return _internal_patches_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::WorkPlane_Patch >*
WorkPlane_WorkPlaneMetaData::_internal_mutable_patches_map() {
  return patches_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::open_vector_format::WorkPlane_Patch >*
WorkPlane_WorkPlaneMetaData::mutable_patches_map() {
  // @@protoc_insertion_point(field_mutable_map:open_vector_format.WorkPlane.WorkPlaneMetaData.patches_map)
  return _internal_mutable_patches_map();
}

// float maxPower = 4;
inline void WorkPlane_WorkPlaneMetaData::clear_maxpower() {
  maxpower_ = 0;
}
inline float WorkPlane_WorkPlaneMetaData::_internal_maxpower() const {
  return maxpower_;
}
inline float WorkPlane_WorkPlaneMetaData::maxpower() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.WorkPlaneMetaData.maxPower)
  return _internal_maxpower();
}
inline void WorkPlane_WorkPlaneMetaData::_internal_set_maxpower(float value) {
  
  maxpower_ = value;
}
inline void WorkPlane_WorkPlaneMetaData::set_maxpower(float value) {
  _internal_set_maxpower(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.WorkPlaneMetaData.maxPower)
}

// float minPower = 5;
inline void WorkPlane_WorkPlaneMetaData::clear_minpower() {
  minpower_ = 0;
}
inline float WorkPlane_WorkPlaneMetaData::_internal_minpower() const {
  return minpower_;
}
inline float WorkPlane_WorkPlaneMetaData::minpower() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.WorkPlaneMetaData.minPower)
  return _internal_minpower();
}
inline void WorkPlane_WorkPlaneMetaData::_internal_set_minpower(float value) {
  
  minpower_ = value;
}
inline void WorkPlane_WorkPlaneMetaData::set_minpower(float value) {
  _internal_set_minpower(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.WorkPlaneMetaData.minPower)
}

// repeated .open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour contours = 6;
inline int WorkPlane_WorkPlaneMetaData::_internal_contours_size() const {
  return contours_.size();
}
inline int WorkPlane_WorkPlaneMetaData::contours_size() const {
  return _internal_contours_size();
}
inline void WorkPlane_WorkPlaneMetaData::clear_contours() {
  contours_.Clear();
}
inline ::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour* WorkPlane_WorkPlaneMetaData::mutable_contours(int index) {
  // @@protoc_insertion_point(field_mutable:open_vector_format.WorkPlane.WorkPlaneMetaData.contours)
  return contours_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour >*
WorkPlane_WorkPlaneMetaData::mutable_contours() {
  // @@protoc_insertion_point(field_mutable_list:open_vector_format.WorkPlane.WorkPlaneMetaData.contours)
  return &contours_;
}
inline const ::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour& WorkPlane_WorkPlaneMetaData::_internal_contours(int index) const {
  return contours_.Get(index);
}
inline const ::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour& WorkPlane_WorkPlaneMetaData::contours(int index) const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.WorkPlaneMetaData.contours)
  return _internal_contours(index);
}
inline ::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour* WorkPlane_WorkPlaneMetaData::_internal_add_contours() {
  return contours_.Add();
}
inline ::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour* WorkPlane_WorkPlaneMetaData::add_contours() {
  // @@protoc_insertion_point(field_add:open_vector_format.WorkPlane.WorkPlaneMetaData.contours)
  return _internal_add_contours();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour >&
WorkPlane_WorkPlaneMetaData::contours() const {
  // @@protoc_insertion_point(field_list:open_vector_format.WorkPlane.WorkPlaneMetaData.contours)
  return contours_;
}

// -------------------------------------------------------------------

// WorkPlane_Patch

// .open_vector_format.VectorBlock.LineSequence outer_contour = 1;
inline bool WorkPlane_Patch::_internal_has_outer_contour() const {
  return this != internal_default_instance() && outer_contour_ != nullptr;
}
inline bool WorkPlane_Patch::has_outer_contour() const {
  return _internal_has_outer_contour();
}
inline void WorkPlane_Patch::clear_outer_contour() {
  if (GetArena() == nullptr && outer_contour_ != nullptr) {
    delete outer_contour_;
  }
  outer_contour_ = nullptr;
}
inline const ::open_vector_format::VectorBlock_LineSequence& WorkPlane_Patch::_internal_outer_contour() const {
  const ::open_vector_format::VectorBlock_LineSequence* p = outer_contour_;
  return p != nullptr ? *p : reinterpret_cast<const ::open_vector_format::VectorBlock_LineSequence&>(
      ::open_vector_format::_VectorBlock_LineSequence_default_instance_);
}
inline const ::open_vector_format::VectorBlock_LineSequence& WorkPlane_Patch::outer_contour() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.Patch.outer_contour)
  return _internal_outer_contour();
}
inline void WorkPlane_Patch::unsafe_arena_set_allocated_outer_contour(
    ::open_vector_format::VectorBlock_LineSequence* outer_contour) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(outer_contour_);
  }
  outer_contour_ = outer_contour;
  if (outer_contour) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.WorkPlane.Patch.outer_contour)
}
inline ::open_vector_format::VectorBlock_LineSequence* WorkPlane_Patch::release_outer_contour() {
  
  ::open_vector_format::VectorBlock_LineSequence* temp = outer_contour_;
  outer_contour_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::open_vector_format::VectorBlock_LineSequence* WorkPlane_Patch::unsafe_arena_release_outer_contour() {
  // @@protoc_insertion_point(field_release:open_vector_format.WorkPlane.Patch.outer_contour)
  
  ::open_vector_format::VectorBlock_LineSequence* temp = outer_contour_;
  outer_contour_ = nullptr;
  return temp;
}
inline ::open_vector_format::VectorBlock_LineSequence* WorkPlane_Patch::_internal_mutable_outer_contour() {
  
  if (outer_contour_ == nullptr) {
    auto* p = CreateMaybeMessage<::open_vector_format::VectorBlock_LineSequence>(GetArena());
    outer_contour_ = p;
  }
  return outer_contour_;
}
inline ::open_vector_format::VectorBlock_LineSequence* WorkPlane_Patch::mutable_outer_contour() {
  // @@protoc_insertion_point(field_mutable:open_vector_format.WorkPlane.Patch.outer_contour)
  return _internal_mutable_outer_contour();
}
inline void WorkPlane_Patch::set_allocated_outer_contour(::open_vector_format::VectorBlock_LineSequence* outer_contour) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete outer_contour_;
  }
  if (outer_contour) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(outer_contour);
    if (message_arena != submessage_arena) {
      outer_contour = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outer_contour, submessage_arena);
    }
    
  } else {
    
  }
  outer_contour_ = outer_contour;
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.WorkPlane.Patch.outer_contour)
}

// float u = 2;
inline void WorkPlane_Patch::clear_u() {
  u_ = 0;
}
inline float WorkPlane_Patch::_internal_u() const {
  return u_;
}
inline float WorkPlane_Patch::u() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.Patch.u)
  return _internal_u();
}
inline void WorkPlane_Patch::_internal_set_u(float value) {
  
  u_ = value;
}
inline void WorkPlane_Patch::set_u(float value) {
  _internal_set_u(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.Patch.u)
}

// float v = 3;
inline void WorkPlane_Patch::clear_v() {
  v_ = 0;
}
inline float WorkPlane_Patch::_internal_v() const {
  return v_;
}
inline float WorkPlane_Patch::v() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.Patch.v)
  return _internal_v();
}
inline void WorkPlane_Patch::_internal_set_v(float value) {
  
  v_ = value;
}
inline void WorkPlane_Patch::set_v(float value) {
  _internal_set_v(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.Patch.v)
}

// int32 layer_id = 4;
inline void WorkPlane_Patch::clear_layer_id() {
  layer_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkPlane_Patch::_internal_layer_id() const {
  return layer_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkPlane_Patch::layer_id() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.Patch.layer_id)
  return _internal_layer_id();
}
inline void WorkPlane_Patch::_internal_set_layer_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  layer_id_ = value;
}
inline void WorkPlane_Patch::set_layer_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_layer_id(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.Patch.layer_id)
}

// -------------------------------------------------------------------

// WorkPlane

// repeated .open_vector_format.VectorBlock vector_blocks = 1;
inline int WorkPlane::_internal_vector_blocks_size() const {
  return vector_blocks_.size();
}
inline int WorkPlane::vector_blocks_size() const {
  return _internal_vector_blocks_size();
}
inline void WorkPlane::clear_vector_blocks() {
  vector_blocks_.Clear();
}
inline ::open_vector_format::VectorBlock* WorkPlane::mutable_vector_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:open_vector_format.WorkPlane.vector_blocks)
  return vector_blocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::open_vector_format::VectorBlock >*
WorkPlane::mutable_vector_blocks() {
  // @@protoc_insertion_point(field_mutable_list:open_vector_format.WorkPlane.vector_blocks)
  return &vector_blocks_;
}
inline const ::open_vector_format::VectorBlock& WorkPlane::_internal_vector_blocks(int index) const {
  return vector_blocks_.Get(index);
}
inline const ::open_vector_format::VectorBlock& WorkPlane::vector_blocks(int index) const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.vector_blocks)
  return _internal_vector_blocks(index);
}
inline ::open_vector_format::VectorBlock* WorkPlane::_internal_add_vector_blocks() {
  return vector_blocks_.Add();
}
inline ::open_vector_format::VectorBlock* WorkPlane::add_vector_blocks() {
  // @@protoc_insertion_point(field_add:open_vector_format.WorkPlane.vector_blocks)
  return _internal_add_vector_blocks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::open_vector_format::VectorBlock >&
WorkPlane::vector_blocks() const {
  // @@protoc_insertion_point(field_list:open_vector_format.WorkPlane.vector_blocks)
  return vector_blocks_;
}

// float x_pos_in_mm = 2;
inline void WorkPlane::clear_x_pos_in_mm() {
  x_pos_in_mm_ = 0;
}
inline float WorkPlane::_internal_x_pos_in_mm() const {
  return x_pos_in_mm_;
}
inline float WorkPlane::x_pos_in_mm() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.x_pos_in_mm)
  return _internal_x_pos_in_mm();
}
inline void WorkPlane::_internal_set_x_pos_in_mm(float value) {
  
  x_pos_in_mm_ = value;
}
inline void WorkPlane::set_x_pos_in_mm(float value) {
  _internal_set_x_pos_in_mm(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.x_pos_in_mm)
}

// float y_pos_in_mm = 3;
inline void WorkPlane::clear_y_pos_in_mm() {
  y_pos_in_mm_ = 0;
}
inline float WorkPlane::_internal_y_pos_in_mm() const {
  return y_pos_in_mm_;
}
inline float WorkPlane::y_pos_in_mm() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.y_pos_in_mm)
  return _internal_y_pos_in_mm();
}
inline void WorkPlane::_internal_set_y_pos_in_mm(float value) {
  
  y_pos_in_mm_ = value;
}
inline void WorkPlane::set_y_pos_in_mm(float value) {
  _internal_set_y_pos_in_mm(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.y_pos_in_mm)
}

// float z_pos_in_mm = 4;
inline void WorkPlane::clear_z_pos_in_mm() {
  z_pos_in_mm_ = 0;
}
inline float WorkPlane::_internal_z_pos_in_mm() const {
  return z_pos_in_mm_;
}
inline float WorkPlane::z_pos_in_mm() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.z_pos_in_mm)
  return _internal_z_pos_in_mm();
}
inline void WorkPlane::_internal_set_z_pos_in_mm(float value) {
  
  z_pos_in_mm_ = value;
}
inline void WorkPlane::set_z_pos_in_mm(float value) {
  _internal_set_z_pos_in_mm(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.z_pos_in_mm)
}

// float x_rot_in_deg = 5;
inline void WorkPlane::clear_x_rot_in_deg() {
  x_rot_in_deg_ = 0;
}
inline float WorkPlane::_internal_x_rot_in_deg() const {
  return x_rot_in_deg_;
}
inline float WorkPlane::x_rot_in_deg() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.x_rot_in_deg)
  return _internal_x_rot_in_deg();
}
inline void WorkPlane::_internal_set_x_rot_in_deg(float value) {
  
  x_rot_in_deg_ = value;
}
inline void WorkPlane::set_x_rot_in_deg(float value) {
  _internal_set_x_rot_in_deg(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.x_rot_in_deg)
}

// float y_rot_in_deg = 6;
inline void WorkPlane::clear_y_rot_in_deg() {
  y_rot_in_deg_ = 0;
}
inline float WorkPlane::_internal_y_rot_in_deg() const {
  return y_rot_in_deg_;
}
inline float WorkPlane::y_rot_in_deg() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.y_rot_in_deg)
  return _internal_y_rot_in_deg();
}
inline void WorkPlane::_internal_set_y_rot_in_deg(float value) {
  
  y_rot_in_deg_ = value;
}
inline void WorkPlane::set_y_rot_in_deg(float value) {
  _internal_set_y_rot_in_deg(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.y_rot_in_deg)
}

// float z_rot_in_deg = 7;
inline void WorkPlane::clear_z_rot_in_deg() {
  z_rot_in_deg_ = 0;
}
inline float WorkPlane::_internal_z_rot_in_deg() const {
  return z_rot_in_deg_;
}
inline float WorkPlane::z_rot_in_deg() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.z_rot_in_deg)
  return _internal_z_rot_in_deg();
}
inline void WorkPlane::_internal_set_z_rot_in_deg(float value) {
  
  z_rot_in_deg_ = value;
}
inline void WorkPlane::set_z_rot_in_deg(float value) {
  _internal_set_z_rot_in_deg(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.z_rot_in_deg)
}

// int32 num_blocks = 8;
inline void WorkPlane::clear_num_blocks() {
  num_blocks_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkPlane::_internal_num_blocks() const {
  return num_blocks_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkPlane::num_blocks() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.num_blocks)
  return _internal_num_blocks();
}
inline void WorkPlane::_internal_set_num_blocks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_blocks_ = value;
}
inline void WorkPlane::set_num_blocks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_blocks(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.num_blocks)
}

// uint32 repeats = 9;
inline void WorkPlane::clear_repeats() {
  repeats_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WorkPlane::_internal_repeats() const {
  return repeats_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WorkPlane::repeats() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.repeats)
  return _internal_repeats();
}
inline void WorkPlane::_internal_set_repeats(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  repeats_ = value;
}
inline void WorkPlane::set_repeats(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_repeats(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.repeats)
}

// int32 work_plane_number = 10;
inline void WorkPlane::clear_work_plane_number() {
  work_plane_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkPlane::_internal_work_plane_number() const {
  return work_plane_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkPlane::work_plane_number() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.work_plane_number)
  return _internal_work_plane_number();
}
inline void WorkPlane::_internal_set_work_plane_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  work_plane_number_ = value;
}
inline void WorkPlane::set_work_plane_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_work_plane_number(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.work_plane_number)
}

// string machine_type = 11;
inline void WorkPlane::clear_machine_type() {
  machine_type_.ClearToEmpty();
}
inline const std::string& WorkPlane::machine_type() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.machine_type)
  return _internal_machine_type();
}
inline void WorkPlane::set_machine_type(const std::string& value) {
  _internal_set_machine_type(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.machine_type)
}
inline std::string* WorkPlane::mutable_machine_type() {
  // @@protoc_insertion_point(field_mutable:open_vector_format.WorkPlane.machine_type)
  return _internal_mutable_machine_type();
}
inline const std::string& WorkPlane::_internal_machine_type() const {
  return machine_type_.Get();
}
inline void WorkPlane::_internal_set_machine_type(const std::string& value) {
  
  machine_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WorkPlane::set_machine_type(std::string&& value) {
  
  machine_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:open_vector_format.WorkPlane.machine_type)
}
inline void WorkPlane::set_machine_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  machine_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:open_vector_format.WorkPlane.machine_type)
}
inline void WorkPlane::set_machine_type(const char* value,
    size_t size) {
  
  machine_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:open_vector_format.WorkPlane.machine_type)
}
inline std::string* WorkPlane::_internal_mutable_machine_type() {
  
  return machine_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WorkPlane::release_machine_type() {
  // @@protoc_insertion_point(field_release:open_vector_format.WorkPlane.machine_type)
  return machine_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WorkPlane::set_allocated_machine_type(std::string* machine_type) {
  if (machine_type != nullptr) {
    
  } else {
    
  }
  machine_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), machine_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.WorkPlane.machine_type)
}

// repeated float additional_axis_positions = 12;
inline int WorkPlane::_internal_additional_axis_positions_size() const {
  return additional_axis_positions_.size();
}
inline int WorkPlane::additional_axis_positions_size() const {
  return _internal_additional_axis_positions_size();
}
inline void WorkPlane::clear_additional_axis_positions() {
  additional_axis_positions_.Clear();
}
inline float WorkPlane::_internal_additional_axis_positions(int index) const {
  return additional_axis_positions_.Get(index);
}
inline float WorkPlane::additional_axis_positions(int index) const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.additional_axis_positions)
  return _internal_additional_axis_positions(index);
}
inline void WorkPlane::set_additional_axis_positions(int index, float value) {
  additional_axis_positions_.Set(index, value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.additional_axis_positions)
}
inline void WorkPlane::_internal_add_additional_axis_positions(float value) {
  additional_axis_positions_.Add(value);
}
inline void WorkPlane::add_additional_axis_positions(float value) {
  _internal_add_additional_axis_positions(value);
  // @@protoc_insertion_point(field_add:open_vector_format.WorkPlane.additional_axis_positions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
WorkPlane::_internal_additional_axis_positions() const {
  return additional_axis_positions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
WorkPlane::additional_axis_positions() const {
  // @@protoc_insertion_point(field_list:open_vector_format.WorkPlane.additional_axis_positions)
  return _internal_additional_axis_positions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
WorkPlane::_internal_mutable_additional_axis_positions() {
  return &additional_axis_positions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
WorkPlane::mutable_additional_axis_positions() {
  // @@protoc_insertion_point(field_mutable_list:open_vector_format.WorkPlane.additional_axis_positions)
  return _internal_mutable_additional_axis_positions();
}

// .open_vector_format.WorkPlane.WorkPlaneMetaData meta_data = 13;
inline bool WorkPlane::_internal_has_meta_data() const {
  return this != internal_default_instance() && meta_data_ != nullptr;
}
inline bool WorkPlane::has_meta_data() const {
  return _internal_has_meta_data();
}
inline void WorkPlane::clear_meta_data() {
  if (GetArena() == nullptr && meta_data_ != nullptr) {
    delete meta_data_;
  }
  meta_data_ = nullptr;
}
inline const ::open_vector_format::WorkPlane_WorkPlaneMetaData& WorkPlane::_internal_meta_data() const {
  const ::open_vector_format::WorkPlane_WorkPlaneMetaData* p = meta_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::open_vector_format::WorkPlane_WorkPlaneMetaData&>(
      ::open_vector_format::_WorkPlane_WorkPlaneMetaData_default_instance_);
}
inline const ::open_vector_format::WorkPlane_WorkPlaneMetaData& WorkPlane::meta_data() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.meta_data)
  return _internal_meta_data();
}
inline void WorkPlane::unsafe_arena_set_allocated_meta_data(
    ::open_vector_format::WorkPlane_WorkPlaneMetaData* meta_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_data_);
  }
  meta_data_ = meta_data;
  if (meta_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.WorkPlane.meta_data)
}
inline ::open_vector_format::WorkPlane_WorkPlaneMetaData* WorkPlane::release_meta_data() {
  
  ::open_vector_format::WorkPlane_WorkPlaneMetaData* temp = meta_data_;
  meta_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::open_vector_format::WorkPlane_WorkPlaneMetaData* WorkPlane::unsafe_arena_release_meta_data() {
  // @@protoc_insertion_point(field_release:open_vector_format.WorkPlane.meta_data)
  
  ::open_vector_format::WorkPlane_WorkPlaneMetaData* temp = meta_data_;
  meta_data_ = nullptr;
  return temp;
}
inline ::open_vector_format::WorkPlane_WorkPlaneMetaData* WorkPlane::_internal_mutable_meta_data() {
  
  if (meta_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::open_vector_format::WorkPlane_WorkPlaneMetaData>(GetArena());
    meta_data_ = p;
  }
  return meta_data_;
}
inline ::open_vector_format::WorkPlane_WorkPlaneMetaData* WorkPlane::mutable_meta_data() {
  // @@protoc_insertion_point(field_mutable:open_vector_format.WorkPlane.meta_data)
  return _internal_mutable_meta_data();
}
inline void WorkPlane::set_allocated_meta_data(::open_vector_format::WorkPlane_WorkPlaneMetaData* meta_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete meta_data_;
  }
  if (meta_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(meta_data);
    if (message_arena != submessage_arena) {
      meta_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta_data, submessage_arena);
    }
    
  } else {
    
  }
  meta_data_ = meta_data;
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.WorkPlane.meta_data)
}

// -------------------------------------------------------------------

// VectorBlock_VectorBlockMetaData

// double total_scan_distance_in_mm = 1;
inline void VectorBlock_VectorBlockMetaData::clear_total_scan_distance_in_mm() {
  total_scan_distance_in_mm_ = 0;
}
inline double VectorBlock_VectorBlockMetaData::_internal_total_scan_distance_in_mm() const {
  return total_scan_distance_in_mm_;
}
inline double VectorBlock_VectorBlockMetaData::total_scan_distance_in_mm() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.VectorBlockMetaData.total_scan_distance_in_mm)
  return _internal_total_scan_distance_in_mm();
}
inline void VectorBlock_VectorBlockMetaData::_internal_set_total_scan_distance_in_mm(double value) {
  
  total_scan_distance_in_mm_ = value;
}
inline void VectorBlock_VectorBlockMetaData::set_total_scan_distance_in_mm(double value) {
  _internal_set_total_scan_distance_in_mm(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.VectorBlockMetaData.total_scan_distance_in_mm)
}

// double total_jump_distance_in_mm = 2;
inline void VectorBlock_VectorBlockMetaData::clear_total_jump_distance_in_mm() {
  total_jump_distance_in_mm_ = 0;
}
inline double VectorBlock_VectorBlockMetaData::_internal_total_jump_distance_in_mm() const {
  return total_jump_distance_in_mm_;
}
inline double VectorBlock_VectorBlockMetaData::total_jump_distance_in_mm() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.VectorBlockMetaData.total_jump_distance_in_mm)
  return _internal_total_jump_distance_in_mm();
}
inline void VectorBlock_VectorBlockMetaData::_internal_set_total_jump_distance_in_mm(double value) {
  
  total_jump_distance_in_mm_ = value;
}
inline void VectorBlock_VectorBlockMetaData::set_total_jump_distance_in_mm(double value) {
  _internal_set_total_jump_distance_in_mm(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.VectorBlockMetaData.total_jump_distance_in_mm)
}

// int32 part_key = 3;
inline void VectorBlock_VectorBlockMetaData::clear_part_key() {
  part_key_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorBlock_VectorBlockMetaData::_internal_part_key() const {
  return part_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorBlock_VectorBlockMetaData::part_key() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.VectorBlockMetaData.part_key)
  return _internal_part_key();
}
inline void VectorBlock_VectorBlockMetaData::_internal_set_part_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  part_key_ = value;
}
inline void VectorBlock_VectorBlockMetaData::set_part_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_part_key(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.VectorBlockMetaData.part_key)
}

// int32 patch_key = 4;
inline void VectorBlock_VectorBlockMetaData::clear_patch_key() {
  patch_key_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorBlock_VectorBlockMetaData::_internal_patch_key() const {
  return patch_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorBlock_VectorBlockMetaData::patch_key() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.VectorBlockMetaData.patch_key)
  return _internal_patch_key();
}
inline void VectorBlock_VectorBlockMetaData::_internal_set_patch_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  patch_key_ = value;
}
inline void VectorBlock_VectorBlockMetaData::set_patch_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_patch_key(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.VectorBlockMetaData.patch_key)
}

// int32 contour_index = 5;
inline void VectorBlock_VectorBlockMetaData::clear_contour_index() {
  contour_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorBlock_VectorBlockMetaData::_internal_contour_index() const {
  return contour_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorBlock_VectorBlockMetaData::contour_index() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.VectorBlockMetaData.contour_index)
  return _internal_contour_index();
}
inline void VectorBlock_VectorBlockMetaData::_internal_set_contour_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  contour_index_ = value;
}
inline void VectorBlock_VectorBlockMetaData::set_contour_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_contour_index(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.VectorBlockMetaData.contour_index)
}

// -------------------------------------------------------------------

// VectorBlock_LPBFMetadata

// .open_vector_format.VectorBlock.PartArea part_area = 1;
inline void VectorBlock_LPBFMetadata::clear_part_area() {
  part_area_ = 0;
}
inline ::open_vector_format::VectorBlock_PartArea VectorBlock_LPBFMetadata::_internal_part_area() const {
  return static_cast< ::open_vector_format::VectorBlock_PartArea >(part_area_);
}
inline ::open_vector_format::VectorBlock_PartArea VectorBlock_LPBFMetadata::part_area() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.LPBFMetadata.part_area)
  return _internal_part_area();
}
inline void VectorBlock_LPBFMetadata::_internal_set_part_area(::open_vector_format::VectorBlock_PartArea value) {
  
  part_area_ = value;
}
inline void VectorBlock_LPBFMetadata::set_part_area(::open_vector_format::VectorBlock_PartArea value) {
  _internal_set_part_area(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.LPBFMetadata.part_area)
}

// .open_vector_format.VectorBlock.LPBFMetadata.SkinType skin_type = 2;
inline void VectorBlock_LPBFMetadata::clear_skin_type() {
  skin_type_ = 0;
}
inline ::open_vector_format::VectorBlock_LPBFMetadata_SkinType VectorBlock_LPBFMetadata::_internal_skin_type() const {
  return static_cast< ::open_vector_format::VectorBlock_LPBFMetadata_SkinType >(skin_type_);
}
inline ::open_vector_format::VectorBlock_LPBFMetadata_SkinType VectorBlock_LPBFMetadata::skin_type() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.LPBFMetadata.skin_type)
  return _internal_skin_type();
}
inline void VectorBlock_LPBFMetadata::_internal_set_skin_type(::open_vector_format::VectorBlock_LPBFMetadata_SkinType value) {
  
  skin_type_ = value;
}
inline void VectorBlock_LPBFMetadata::set_skin_type(::open_vector_format::VectorBlock_LPBFMetadata_SkinType value) {
  _internal_set_skin_type(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.LPBFMetadata.skin_type)
}

// .open_vector_format.VectorBlock.LPBFMetadata.SkinCoreStrategyArea skin_core_strategy_area = 3;
inline void VectorBlock_LPBFMetadata::clear_skin_core_strategy_area() {
  skin_core_strategy_area_ = 0;
}
inline ::open_vector_format::VectorBlock_LPBFMetadata_SkinCoreStrategyArea VectorBlock_LPBFMetadata::_internal_skin_core_strategy_area() const {
  return static_cast< ::open_vector_format::VectorBlock_LPBFMetadata_SkinCoreStrategyArea >(skin_core_strategy_area_);
}
inline ::open_vector_format::VectorBlock_LPBFMetadata_SkinCoreStrategyArea VectorBlock_LPBFMetadata::skin_core_strategy_area() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.LPBFMetadata.skin_core_strategy_area)
  return _internal_skin_core_strategy_area();
}
inline void VectorBlock_LPBFMetadata::_internal_set_skin_core_strategy_area(::open_vector_format::VectorBlock_LPBFMetadata_SkinCoreStrategyArea value) {
  
  skin_core_strategy_area_ = value;
}
inline void VectorBlock_LPBFMetadata::set_skin_core_strategy_area(::open_vector_format::VectorBlock_LPBFMetadata_SkinCoreStrategyArea value) {
  _internal_set_skin_core_strategy_area(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.LPBFMetadata.skin_core_strategy_area)
}

// .open_vector_format.VectorBlock.StructureType structure_type = 4;
inline void VectorBlock_LPBFMetadata::clear_structure_type() {
  structure_type_ = 0;
}
inline ::open_vector_format::VectorBlock_StructureType VectorBlock_LPBFMetadata::_internal_structure_type() const {
  return static_cast< ::open_vector_format::VectorBlock_StructureType >(structure_type_);
}
inline ::open_vector_format::VectorBlock_StructureType VectorBlock_LPBFMetadata::structure_type() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.LPBFMetadata.structure_type)
  return _internal_structure_type();
}
inline void VectorBlock_LPBFMetadata::_internal_set_structure_type(::open_vector_format::VectorBlock_StructureType value) {
  
  structure_type_ = value;
}
inline void VectorBlock_LPBFMetadata::set_structure_type(::open_vector_format::VectorBlock_StructureType value) {
  _internal_set_structure_type(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.LPBFMetadata.structure_type)
}

// bool reexposure = 5;
inline void VectorBlock_LPBFMetadata::clear_reexposure() {
  reexposure_ = false;
}
inline bool VectorBlock_LPBFMetadata::_internal_reexposure() const {
  return reexposure_;
}
inline bool VectorBlock_LPBFMetadata::reexposure() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.LPBFMetadata.reexposure)
  return _internal_reexposure();
}
inline void VectorBlock_LPBFMetadata::_internal_set_reexposure(bool value) {
  
  reexposure_ = value;
}
inline void VectorBlock_LPBFMetadata::set_reexposure(bool value) {
  _internal_set_reexposure(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.LPBFMetadata.reexposure)
}

// -------------------------------------------------------------------

// VectorBlock_MicroStructuringMetadata

// .open_vector_format.VectorBlock.PartArea part_area = 1;
inline void VectorBlock_MicroStructuringMetadata::clear_part_area() {
  part_area_ = 0;
}
inline ::open_vector_format::VectorBlock_PartArea VectorBlock_MicroStructuringMetadata::_internal_part_area() const {
  return static_cast< ::open_vector_format::VectorBlock_PartArea >(part_area_);
}
inline ::open_vector_format::VectorBlock_PartArea VectorBlock_MicroStructuringMetadata::part_area() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.MicroStructuringMetadata.part_area)
  return _internal_part_area();
}
inline void VectorBlock_MicroStructuringMetadata::_internal_set_part_area(::open_vector_format::VectorBlock_PartArea value) {
  
  part_area_ = value;
}
inline void VectorBlock_MicroStructuringMetadata::set_part_area(::open_vector_format::VectorBlock_PartArea value) {
  _internal_set_part_area(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.MicroStructuringMetadata.part_area)
}

// .open_vector_format.VectorBlock.StructureType structure_type = 2;
inline void VectorBlock_MicroStructuringMetadata::clear_structure_type() {
  structure_type_ = 0;
}
inline ::open_vector_format::VectorBlock_StructureType VectorBlock_MicroStructuringMetadata::_internal_structure_type() const {
  return static_cast< ::open_vector_format::VectorBlock_StructureType >(structure_type_);
}
inline ::open_vector_format::VectorBlock_StructureType VectorBlock_MicroStructuringMetadata::structure_type() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.MicroStructuringMetadata.structure_type)
  return _internal_structure_type();
}
inline void VectorBlock_MicroStructuringMetadata::_internal_set_structure_type(::open_vector_format::VectorBlock_StructureType value) {
  
  structure_type_ = value;
}
inline void VectorBlock_MicroStructuringMetadata::set_structure_type(::open_vector_format::VectorBlock_StructureType value) {
  _internal_set_structure_type(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.MicroStructuringMetadata.structure_type)
}

// -------------------------------------------------------------------

// VectorBlock_PolishingMetadata

// -------------------------------------------------------------------

// VectorBlock_LineSequence

// repeated float points = 1;
inline int VectorBlock_LineSequence::_internal_points_size() const {
  return points_.size();
}
inline int VectorBlock_LineSequence::points_size() const {
  return _internal_points_size();
}
inline void VectorBlock_LineSequence::clear_points() {
  points_.Clear();
}
inline float VectorBlock_LineSequence::_internal_points(int index) const {
  return points_.Get(index);
}
inline float VectorBlock_LineSequence::points(int index) const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.LineSequence.points)
  return _internal_points(index);
}
inline void VectorBlock_LineSequence::set_points(int index, float value) {
  points_.Set(index, value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.LineSequence.points)
}
inline void VectorBlock_LineSequence::_internal_add_points(float value) {
  points_.Add(value);
}
inline void VectorBlock_LineSequence::add_points(float value) {
  _internal_add_points(value);
  // @@protoc_insertion_point(field_add:open_vector_format.VectorBlock.LineSequence.points)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VectorBlock_LineSequence::_internal_points() const {
  return points_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VectorBlock_LineSequence::points() const {
  // @@protoc_insertion_point(field_list:open_vector_format.VectorBlock.LineSequence.points)
  return _internal_points();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VectorBlock_LineSequence::_internal_mutable_points() {
  return &points_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VectorBlock_LineSequence::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:open_vector_format.VectorBlock.LineSequence.points)
  return _internal_mutable_points();
}

// -------------------------------------------------------------------

// VectorBlock_LineSequence3D

// repeated float points = 1;
inline int VectorBlock_LineSequence3D::_internal_points_size() const {
  return points_.size();
}
inline int VectorBlock_LineSequence3D::points_size() const {
  return _internal_points_size();
}
inline void VectorBlock_LineSequence3D::clear_points() {
  points_.Clear();
}
inline float VectorBlock_LineSequence3D::_internal_points(int index) const {
  return points_.Get(index);
}
inline float VectorBlock_LineSequence3D::points(int index) const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.LineSequence3D.points)
  return _internal_points(index);
}
inline void VectorBlock_LineSequence3D::set_points(int index, float value) {
  points_.Set(index, value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.LineSequence3D.points)
}
inline void VectorBlock_LineSequence3D::_internal_add_points(float value) {
  points_.Add(value);
}
inline void VectorBlock_LineSequence3D::add_points(float value) {
  _internal_add_points(value);
  // @@protoc_insertion_point(field_add:open_vector_format.VectorBlock.LineSequence3D.points)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VectorBlock_LineSequence3D::_internal_points() const {
  return points_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VectorBlock_LineSequence3D::points() const {
  // @@protoc_insertion_point(field_list:open_vector_format.VectorBlock.LineSequence3D.points)
  return _internal_points();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VectorBlock_LineSequence3D::_internal_mutable_points() {
  return &points_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VectorBlock_LineSequence3D::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:open_vector_format.VectorBlock.LineSequence3D.points)
  return _internal_mutable_points();
}

// -------------------------------------------------------------------

// VectorBlock_Hatches

// repeated float points = 1;
inline int VectorBlock_Hatches::_internal_points_size() const {
  return points_.size();
}
inline int VectorBlock_Hatches::points_size() const {
  return _internal_points_size();
}
inline void VectorBlock_Hatches::clear_points() {
  points_.Clear();
}
inline float VectorBlock_Hatches::_internal_points(int index) const {
  return points_.Get(index);
}
inline float VectorBlock_Hatches::points(int index) const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.Hatches.points)
  return _internal_points(index);
}
inline void VectorBlock_Hatches::set_points(int index, float value) {
  points_.Set(index, value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.Hatches.points)
}
inline void VectorBlock_Hatches::_internal_add_points(float value) {
  points_.Add(value);
}
inline void VectorBlock_Hatches::add_points(float value) {
  _internal_add_points(value);
  // @@protoc_insertion_point(field_add:open_vector_format.VectorBlock.Hatches.points)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VectorBlock_Hatches::_internal_points() const {
  return points_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VectorBlock_Hatches::points() const {
  // @@protoc_insertion_point(field_list:open_vector_format.VectorBlock.Hatches.points)
  return _internal_points();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VectorBlock_Hatches::_internal_mutable_points() {
  return &points_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VectorBlock_Hatches::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:open_vector_format.VectorBlock.Hatches.points)
  return _internal_mutable_points();
}

// -------------------------------------------------------------------

// VectorBlock_Hatches3D

// repeated float points = 1;
inline int VectorBlock_Hatches3D::_internal_points_size() const {
  return points_.size();
}
inline int VectorBlock_Hatches3D::points_size() const {
  return _internal_points_size();
}
inline void VectorBlock_Hatches3D::clear_points() {
  points_.Clear();
}
inline float VectorBlock_Hatches3D::_internal_points(int index) const {
  return points_.Get(index);
}
inline float VectorBlock_Hatches3D::points(int index) const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.Hatches3D.points)
  return _internal_points(index);
}
inline void VectorBlock_Hatches3D::set_points(int index, float value) {
  points_.Set(index, value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.Hatches3D.points)
}
inline void VectorBlock_Hatches3D::_internal_add_points(float value) {
  points_.Add(value);
}
inline void VectorBlock_Hatches3D::add_points(float value) {
  _internal_add_points(value);
  // @@protoc_insertion_point(field_add:open_vector_format.VectorBlock.Hatches3D.points)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VectorBlock_Hatches3D::_internal_points() const {
  return points_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VectorBlock_Hatches3D::points() const {
  // @@protoc_insertion_point(field_list:open_vector_format.VectorBlock.Hatches3D.points)
  return _internal_points();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VectorBlock_Hatches3D::_internal_mutable_points() {
  return &points_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VectorBlock_Hatches3D::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:open_vector_format.VectorBlock.Hatches3D.points)
  return _internal_mutable_points();
}

// -------------------------------------------------------------------

// VectorBlock_PointSequence

// repeated float points = 1;
inline int VectorBlock_PointSequence::_internal_points_size() const {
  return points_.size();
}
inline int VectorBlock_PointSequence::points_size() const {
  return _internal_points_size();
}
inline void VectorBlock_PointSequence::clear_points() {
  points_.Clear();
}
inline float VectorBlock_PointSequence::_internal_points(int index) const {
  return points_.Get(index);
}
inline float VectorBlock_PointSequence::points(int index) const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.PointSequence.points)
  return _internal_points(index);
}
inline void VectorBlock_PointSequence::set_points(int index, float value) {
  points_.Set(index, value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.PointSequence.points)
}
inline void VectorBlock_PointSequence::_internal_add_points(float value) {
  points_.Add(value);
}
inline void VectorBlock_PointSequence::add_points(float value) {
  _internal_add_points(value);
  // @@protoc_insertion_point(field_add:open_vector_format.VectorBlock.PointSequence.points)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VectorBlock_PointSequence::_internal_points() const {
  return points_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VectorBlock_PointSequence::points() const {
  // @@protoc_insertion_point(field_list:open_vector_format.VectorBlock.PointSequence.points)
  return _internal_points();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VectorBlock_PointSequence::_internal_mutable_points() {
  return &points_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VectorBlock_PointSequence::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:open_vector_format.VectorBlock.PointSequence.points)
  return _internal_mutable_points();
}

// -------------------------------------------------------------------

// VectorBlock_PointSequence3D

// repeated float points = 1;
inline int VectorBlock_PointSequence3D::_internal_points_size() const {
  return points_.size();
}
inline int VectorBlock_PointSequence3D::points_size() const {
  return _internal_points_size();
}
inline void VectorBlock_PointSequence3D::clear_points() {
  points_.Clear();
}
inline float VectorBlock_PointSequence3D::_internal_points(int index) const {
  return points_.Get(index);
}
inline float VectorBlock_PointSequence3D::points(int index) const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.PointSequence3D.points)
  return _internal_points(index);
}
inline void VectorBlock_PointSequence3D::set_points(int index, float value) {
  points_.Set(index, value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.PointSequence3D.points)
}
inline void VectorBlock_PointSequence3D::_internal_add_points(float value) {
  points_.Add(value);
}
inline void VectorBlock_PointSequence3D::add_points(float value) {
  _internal_add_points(value);
  // @@protoc_insertion_point(field_add:open_vector_format.VectorBlock.PointSequence3D.points)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VectorBlock_PointSequence3D::_internal_points() const {
  return points_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VectorBlock_PointSequence3D::points() const {
  // @@protoc_insertion_point(field_list:open_vector_format.VectorBlock.PointSequence3D.points)
  return _internal_points();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VectorBlock_PointSequence3D::_internal_mutable_points() {
  return &points_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VectorBlock_PointSequence3D::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:open_vector_format.VectorBlock.PointSequence3D.points)
  return _internal_mutable_points();
}

// -------------------------------------------------------------------

// VectorBlock_Arcs

// double angle = 1;
inline void VectorBlock_Arcs::clear_angle() {
  angle_ = 0;
}
inline double VectorBlock_Arcs::_internal_angle() const {
  return angle_;
}
inline double VectorBlock_Arcs::angle() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.Arcs.angle)
  return _internal_angle();
}
inline void VectorBlock_Arcs::_internal_set_angle(double value) {
  
  angle_ = value;
}
inline void VectorBlock_Arcs::set_angle(double value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.Arcs.angle)
}

// float start_dx = 2;
inline void VectorBlock_Arcs::clear_start_dx() {
  start_dx_ = 0;
}
inline float VectorBlock_Arcs::_internal_start_dx() const {
  return start_dx_;
}
inline float VectorBlock_Arcs::start_dx() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.Arcs.start_dx)
  return _internal_start_dx();
}
inline void VectorBlock_Arcs::_internal_set_start_dx(float value) {
  
  start_dx_ = value;
}
inline void VectorBlock_Arcs::set_start_dx(float value) {
  _internal_set_start_dx(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.Arcs.start_dx)
}

// float start_dy = 3;
inline void VectorBlock_Arcs::clear_start_dy() {
  start_dy_ = 0;
}
inline float VectorBlock_Arcs::_internal_start_dy() const {
  return start_dy_;
}
inline float VectorBlock_Arcs::start_dy() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.Arcs.start_dy)
  return _internal_start_dy();
}
inline void VectorBlock_Arcs::_internal_set_start_dy(float value) {
  
  start_dy_ = value;
}
inline void VectorBlock_Arcs::set_start_dy(float value) {
  _internal_set_start_dy(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.Arcs.start_dy)
}

// repeated float centers = 4;
inline int VectorBlock_Arcs::_internal_centers_size() const {
  return centers_.size();
}
inline int VectorBlock_Arcs::centers_size() const {
  return _internal_centers_size();
}
inline void VectorBlock_Arcs::clear_centers() {
  centers_.Clear();
}
inline float VectorBlock_Arcs::_internal_centers(int index) const {
  return centers_.Get(index);
}
inline float VectorBlock_Arcs::centers(int index) const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.Arcs.centers)
  return _internal_centers(index);
}
inline void VectorBlock_Arcs::set_centers(int index, float value) {
  centers_.Set(index, value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.Arcs.centers)
}
inline void VectorBlock_Arcs::_internal_add_centers(float value) {
  centers_.Add(value);
}
inline void VectorBlock_Arcs::add_centers(float value) {
  _internal_add_centers(value);
  // @@protoc_insertion_point(field_add:open_vector_format.VectorBlock.Arcs.centers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VectorBlock_Arcs::_internal_centers() const {
  return centers_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VectorBlock_Arcs::centers() const {
  // @@protoc_insertion_point(field_list:open_vector_format.VectorBlock.Arcs.centers)
  return _internal_centers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VectorBlock_Arcs::_internal_mutable_centers() {
  return &centers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VectorBlock_Arcs::mutable_centers() {
  // @@protoc_insertion_point(field_mutable_list:open_vector_format.VectorBlock.Arcs.centers)
  return _internal_mutable_centers();
}

// -------------------------------------------------------------------

// VectorBlock_Arcs3D

// double angle = 1;
inline void VectorBlock_Arcs3D::clear_angle() {
  angle_ = 0;
}
inline double VectorBlock_Arcs3D::_internal_angle() const {
  return angle_;
}
inline double VectorBlock_Arcs3D::angle() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.Arcs3D.angle)
  return _internal_angle();
}
inline void VectorBlock_Arcs3D::_internal_set_angle(double value) {
  
  angle_ = value;
}
inline void VectorBlock_Arcs3D::set_angle(double value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.Arcs3D.angle)
}

// float start_dx = 2;
inline void VectorBlock_Arcs3D::clear_start_dx() {
  start_dx_ = 0;
}
inline float VectorBlock_Arcs3D::_internal_start_dx() const {
  return start_dx_;
}
inline float VectorBlock_Arcs3D::start_dx() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.Arcs3D.start_dx)
  return _internal_start_dx();
}
inline void VectorBlock_Arcs3D::_internal_set_start_dx(float value) {
  
  start_dx_ = value;
}
inline void VectorBlock_Arcs3D::set_start_dx(float value) {
  _internal_set_start_dx(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.Arcs3D.start_dx)
}

// float start_dy = 3;
inline void VectorBlock_Arcs3D::clear_start_dy() {
  start_dy_ = 0;
}
inline float VectorBlock_Arcs3D::_internal_start_dy() const {
  return start_dy_;
}
inline float VectorBlock_Arcs3D::start_dy() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.Arcs3D.start_dy)
  return _internal_start_dy();
}
inline void VectorBlock_Arcs3D::_internal_set_start_dy(float value) {
  
  start_dy_ = value;
}
inline void VectorBlock_Arcs3D::set_start_dy(float value) {
  _internal_set_start_dy(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.Arcs3D.start_dy)
}

// float start_dz = 4;
inline void VectorBlock_Arcs3D::clear_start_dz() {
  start_dz_ = 0;
}
inline float VectorBlock_Arcs3D::_internal_start_dz() const {
  return start_dz_;
}
inline float VectorBlock_Arcs3D::start_dz() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.Arcs3D.start_dz)
  return _internal_start_dz();
}
inline void VectorBlock_Arcs3D::_internal_set_start_dz(float value) {
  
  start_dz_ = value;
}
inline void VectorBlock_Arcs3D::set_start_dz(float value) {
  _internal_set_start_dz(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.Arcs3D.start_dz)
}

// repeated float centers = 5;
inline int VectorBlock_Arcs3D::_internal_centers_size() const {
  return centers_.size();
}
inline int VectorBlock_Arcs3D::centers_size() const {
  return _internal_centers_size();
}
inline void VectorBlock_Arcs3D::clear_centers() {
  centers_.Clear();
}
inline float VectorBlock_Arcs3D::_internal_centers(int index) const {
  return centers_.Get(index);
}
inline float VectorBlock_Arcs3D::centers(int index) const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.Arcs3D.centers)
  return _internal_centers(index);
}
inline void VectorBlock_Arcs3D::set_centers(int index, float value) {
  centers_.Set(index, value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.Arcs3D.centers)
}
inline void VectorBlock_Arcs3D::_internal_add_centers(float value) {
  centers_.Add(value);
}
inline void VectorBlock_Arcs3D::add_centers(float value) {
  _internal_add_centers(value);
  // @@protoc_insertion_point(field_add:open_vector_format.VectorBlock.Arcs3D.centers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VectorBlock_Arcs3D::_internal_centers() const {
  return centers_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VectorBlock_Arcs3D::centers() const {
  // @@protoc_insertion_point(field_list:open_vector_format.VectorBlock.Arcs3D.centers)
  return _internal_centers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VectorBlock_Arcs3D::_internal_mutable_centers() {
  return &centers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VectorBlock_Arcs3D::mutable_centers() {
  // @@protoc_insertion_point(field_mutable_list:open_vector_format.VectorBlock.Arcs3D.centers)
  return _internal_mutable_centers();
}

// -------------------------------------------------------------------

// VectorBlock_Ellipses

// float a = 1;
inline void VectorBlock_Ellipses::clear_a() {
  a_ = 0;
}
inline float VectorBlock_Ellipses::_internal_a() const {
  return a_;
}
inline float VectorBlock_Ellipses::a() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.Ellipses.a)
  return _internal_a();
}
inline void VectorBlock_Ellipses::_internal_set_a(float value) {
  
  a_ = value;
}
inline void VectorBlock_Ellipses::set_a(float value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.Ellipses.a)
}

// float b = 2;
inline void VectorBlock_Ellipses::clear_b() {
  b_ = 0;
}
inline float VectorBlock_Ellipses::_internal_b() const {
  return b_;
}
inline float VectorBlock_Ellipses::b() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.Ellipses.b)
  return _internal_b();
}
inline void VectorBlock_Ellipses::_internal_set_b(float value) {
  
  b_ = value;
}
inline void VectorBlock_Ellipses::set_b(float value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.Ellipses.b)
}

// double phi0 = 3;
inline void VectorBlock_Ellipses::clear_phi0() {
  phi0_ = 0;
}
inline double VectorBlock_Ellipses::_internal_phi0() const {
  return phi0_;
}
inline double VectorBlock_Ellipses::phi0() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.Ellipses.phi0)
  return _internal_phi0();
}
inline void VectorBlock_Ellipses::_internal_set_phi0(double value) {
  
  phi0_ = value;
}
inline void VectorBlock_Ellipses::set_phi0(double value) {
  _internal_set_phi0(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.Ellipses.phi0)
}

// .open_vector_format.VectorBlock.Arcs ellipses_arcs = 4;
inline bool VectorBlock_Ellipses::_internal_has_ellipses_arcs() const {
  return this != internal_default_instance() && ellipses_arcs_ != nullptr;
}
inline bool VectorBlock_Ellipses::has_ellipses_arcs() const {
  return _internal_has_ellipses_arcs();
}
inline void VectorBlock_Ellipses::clear_ellipses_arcs() {
  if (GetArena() == nullptr && ellipses_arcs_ != nullptr) {
    delete ellipses_arcs_;
  }
  ellipses_arcs_ = nullptr;
}
inline const ::open_vector_format::VectorBlock_Arcs& VectorBlock_Ellipses::_internal_ellipses_arcs() const {
  const ::open_vector_format::VectorBlock_Arcs* p = ellipses_arcs_;
  return p != nullptr ? *p : reinterpret_cast<const ::open_vector_format::VectorBlock_Arcs&>(
      ::open_vector_format::_VectorBlock_Arcs_default_instance_);
}
inline const ::open_vector_format::VectorBlock_Arcs& VectorBlock_Ellipses::ellipses_arcs() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.Ellipses.ellipses_arcs)
  return _internal_ellipses_arcs();
}
inline void VectorBlock_Ellipses::unsafe_arena_set_allocated_ellipses_arcs(
    ::open_vector_format::VectorBlock_Arcs* ellipses_arcs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ellipses_arcs_);
  }
  ellipses_arcs_ = ellipses_arcs;
  if (ellipses_arcs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.VectorBlock.Ellipses.ellipses_arcs)
}
inline ::open_vector_format::VectorBlock_Arcs* VectorBlock_Ellipses::release_ellipses_arcs() {
  
  ::open_vector_format::VectorBlock_Arcs* temp = ellipses_arcs_;
  ellipses_arcs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::open_vector_format::VectorBlock_Arcs* VectorBlock_Ellipses::unsafe_arena_release_ellipses_arcs() {
  // @@protoc_insertion_point(field_release:open_vector_format.VectorBlock.Ellipses.ellipses_arcs)
  
  ::open_vector_format::VectorBlock_Arcs* temp = ellipses_arcs_;
  ellipses_arcs_ = nullptr;
  return temp;
}
inline ::open_vector_format::VectorBlock_Arcs* VectorBlock_Ellipses::_internal_mutable_ellipses_arcs() {
  
  if (ellipses_arcs_ == nullptr) {
    auto* p = CreateMaybeMessage<::open_vector_format::VectorBlock_Arcs>(GetArena());
    ellipses_arcs_ = p;
  }
  return ellipses_arcs_;
}
inline ::open_vector_format::VectorBlock_Arcs* VectorBlock_Ellipses::mutable_ellipses_arcs() {
  // @@protoc_insertion_point(field_mutable:open_vector_format.VectorBlock.Ellipses.ellipses_arcs)
  return _internal_mutable_ellipses_arcs();
}
inline void VectorBlock_Ellipses::set_allocated_ellipses_arcs(::open_vector_format::VectorBlock_Arcs* ellipses_arcs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ellipses_arcs_;
  }
  if (ellipses_arcs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ellipses_arcs);
    if (message_arena != submessage_arena) {
      ellipses_arcs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ellipses_arcs, submessage_arena);
    }
    
  } else {
    
  }
  ellipses_arcs_ = ellipses_arcs;
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.VectorBlock.Ellipses.ellipses_arcs)
}

// -------------------------------------------------------------------

// VectorBlock_ExposurePause

// uint64 pause_in_us = 1;
inline void VectorBlock_ExposurePause::clear_pause_in_us() {
  pause_in_us_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VectorBlock_ExposurePause::_internal_pause_in_us() const {
  return pause_in_us_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VectorBlock_ExposurePause::pause_in_us() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.ExposurePause.pause_in_us)
  return _internal_pause_in_us();
}
inline void VectorBlock_ExposurePause::_internal_set_pause_in_us(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pause_in_us_ = value;
}
inline void VectorBlock_ExposurePause::set_pause_in_us(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pause_in_us(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.ExposurePause.pause_in_us)
}

// -------------------------------------------------------------------

// VectorBlock_LineSequenceParaAdapt

// repeated float points_with_paras = 1;
inline int VectorBlock_LineSequenceParaAdapt::_internal_points_with_paras_size() const {
  return points_with_paras_.size();
}
inline int VectorBlock_LineSequenceParaAdapt::points_with_paras_size() const {
  return _internal_points_with_paras_size();
}
inline void VectorBlock_LineSequenceParaAdapt::clear_points_with_paras() {
  points_with_paras_.Clear();
}
inline float VectorBlock_LineSequenceParaAdapt::_internal_points_with_paras(int index) const {
  return points_with_paras_.Get(index);
}
inline float VectorBlock_LineSequenceParaAdapt::points_with_paras(int index) const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.LineSequenceParaAdapt.points_with_paras)
  return _internal_points_with_paras(index);
}
inline void VectorBlock_LineSequenceParaAdapt::set_points_with_paras(int index, float value) {
  points_with_paras_.Set(index, value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.LineSequenceParaAdapt.points_with_paras)
}
inline void VectorBlock_LineSequenceParaAdapt::_internal_add_points_with_paras(float value) {
  points_with_paras_.Add(value);
}
inline void VectorBlock_LineSequenceParaAdapt::add_points_with_paras(float value) {
  _internal_add_points_with_paras(value);
  // @@protoc_insertion_point(field_add:open_vector_format.VectorBlock.LineSequenceParaAdapt.points_with_paras)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VectorBlock_LineSequenceParaAdapt::_internal_points_with_paras() const {
  return points_with_paras_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VectorBlock_LineSequenceParaAdapt::points_with_paras() const {
  // @@protoc_insertion_point(field_list:open_vector_format.VectorBlock.LineSequenceParaAdapt.points_with_paras)
  return _internal_points_with_paras();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VectorBlock_LineSequenceParaAdapt::_internal_mutable_points_with_paras() {
  return &points_with_paras_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VectorBlock_LineSequenceParaAdapt::mutable_points_with_paras() {
  // @@protoc_insertion_point(field_mutable_list:open_vector_format.VectorBlock.LineSequenceParaAdapt.points_with_paras)
  return _internal_mutable_points_with_paras();
}

// .open_vector_format.VectorBlock.LineSequenceParaAdapt.AdaptedParameter parameter = 2;
inline void VectorBlock_LineSequenceParaAdapt::clear_parameter() {
  parameter_ = 0;
}
inline ::open_vector_format::VectorBlock_LineSequenceParaAdapt_AdaptedParameter VectorBlock_LineSequenceParaAdapt::_internal_parameter() const {
  return static_cast< ::open_vector_format::VectorBlock_LineSequenceParaAdapt_AdaptedParameter >(parameter_);
}
inline ::open_vector_format::VectorBlock_LineSequenceParaAdapt_AdaptedParameter VectorBlock_LineSequenceParaAdapt::parameter() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.LineSequenceParaAdapt.parameter)
  return _internal_parameter();
}
inline void VectorBlock_LineSequenceParaAdapt::_internal_set_parameter(::open_vector_format::VectorBlock_LineSequenceParaAdapt_AdaptedParameter value) {
  
  parameter_ = value;
}
inline void VectorBlock_LineSequenceParaAdapt::set_parameter(::open_vector_format::VectorBlock_LineSequenceParaAdapt_AdaptedParameter value) {
  _internal_set_parameter(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.LineSequenceParaAdapt.parameter)
}

// -------------------------------------------------------------------

// VectorBlock_HatchesParaAdapt

// repeated .open_vector_format.VectorBlock.LineSequenceParaAdapt hatchAsLinesequence = 1;
inline int VectorBlock_HatchesParaAdapt::_internal_hatchaslinesequence_size() const {
  return hatchaslinesequence_.size();
}
inline int VectorBlock_HatchesParaAdapt::hatchaslinesequence_size() const {
  return _internal_hatchaslinesequence_size();
}
inline void VectorBlock_HatchesParaAdapt::clear_hatchaslinesequence() {
  hatchaslinesequence_.Clear();
}
inline ::open_vector_format::VectorBlock_LineSequenceParaAdapt* VectorBlock_HatchesParaAdapt::mutable_hatchaslinesequence(int index) {
  // @@protoc_insertion_point(field_mutable:open_vector_format.VectorBlock.HatchesParaAdapt.hatchAsLinesequence)
  return hatchaslinesequence_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::open_vector_format::VectorBlock_LineSequenceParaAdapt >*
VectorBlock_HatchesParaAdapt::mutable_hatchaslinesequence() {
  // @@protoc_insertion_point(field_mutable_list:open_vector_format.VectorBlock.HatchesParaAdapt.hatchAsLinesequence)
  return &hatchaslinesequence_;
}
inline const ::open_vector_format::VectorBlock_LineSequenceParaAdapt& VectorBlock_HatchesParaAdapt::_internal_hatchaslinesequence(int index) const {
  return hatchaslinesequence_.Get(index);
}
inline const ::open_vector_format::VectorBlock_LineSequenceParaAdapt& VectorBlock_HatchesParaAdapt::hatchaslinesequence(int index) const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.HatchesParaAdapt.hatchAsLinesequence)
  return _internal_hatchaslinesequence(index);
}
inline ::open_vector_format::VectorBlock_LineSequenceParaAdapt* VectorBlock_HatchesParaAdapt::_internal_add_hatchaslinesequence() {
  return hatchaslinesequence_.Add();
}
inline ::open_vector_format::VectorBlock_LineSequenceParaAdapt* VectorBlock_HatchesParaAdapt::add_hatchaslinesequence() {
  // @@protoc_insertion_point(field_add:open_vector_format.VectorBlock.HatchesParaAdapt.hatchAsLinesequence)
  return _internal_add_hatchaslinesequence();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::open_vector_format::VectorBlock_LineSequenceParaAdapt >&
VectorBlock_HatchesParaAdapt::hatchaslinesequence() const {
  // @@protoc_insertion_point(field_list:open_vector_format.VectorBlock.HatchesParaAdapt.hatchAsLinesequence)
  return hatchaslinesequence_;
}

// -------------------------------------------------------------------

// VectorBlock

// .open_vector_format.VectorBlock.LineSequence line_sequence = 1;
inline bool VectorBlock::_internal_has_line_sequence() const {
  return vector_data_case() == kLineSequence;
}
inline bool VectorBlock::has_line_sequence() const {
  return _internal_has_line_sequence();
}
inline void VectorBlock::set_has_line_sequence() {
  _oneof_case_[0] = kLineSequence;
}
inline void VectorBlock::clear_line_sequence() {
  if (_internal_has_line_sequence()) {
    if (GetArena() == nullptr) {
      delete vector_data_.line_sequence_;
    }
    clear_has_vector_data();
  }
}
inline ::open_vector_format::VectorBlock_LineSequence* VectorBlock::release_line_sequence() {
  // @@protoc_insertion_point(field_release:open_vector_format.VectorBlock.line_sequence)
  if (_internal_has_line_sequence()) {
    clear_has_vector_data();
      ::open_vector_format::VectorBlock_LineSequence* temp = vector_data_.line_sequence_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    vector_data_.line_sequence_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::open_vector_format::VectorBlock_LineSequence& VectorBlock::_internal_line_sequence() const {
  return _internal_has_line_sequence()
      ? *vector_data_.line_sequence_
      : reinterpret_cast< ::open_vector_format::VectorBlock_LineSequence&>(::open_vector_format::_VectorBlock_LineSequence_default_instance_);
}
inline const ::open_vector_format::VectorBlock_LineSequence& VectorBlock::line_sequence() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.line_sequence)
  return _internal_line_sequence();
}
inline ::open_vector_format::VectorBlock_LineSequence* VectorBlock::unsafe_arena_release_line_sequence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:open_vector_format.VectorBlock.line_sequence)
  if (_internal_has_line_sequence()) {
    clear_has_vector_data();
    ::open_vector_format::VectorBlock_LineSequence* temp = vector_data_.line_sequence_;
    vector_data_.line_sequence_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorBlock::unsafe_arena_set_allocated_line_sequence(::open_vector_format::VectorBlock_LineSequence* line_sequence) {
  clear_vector_data();
  if (line_sequence) {
    set_has_line_sequence();
    vector_data_.line_sequence_ = line_sequence;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.VectorBlock.line_sequence)
}
inline ::open_vector_format::VectorBlock_LineSequence* VectorBlock::_internal_mutable_line_sequence() {
  if (!_internal_has_line_sequence()) {
    clear_vector_data();
    set_has_line_sequence();
    vector_data_.line_sequence_ = CreateMaybeMessage< ::open_vector_format::VectorBlock_LineSequence >(GetArena());
  }
  return vector_data_.line_sequence_;
}
inline ::open_vector_format::VectorBlock_LineSequence* VectorBlock::mutable_line_sequence() {
  // @@protoc_insertion_point(field_mutable:open_vector_format.VectorBlock.line_sequence)
  return _internal_mutable_line_sequence();
}

// .open_vector_format.VectorBlock.Hatches _hatches = 2;
inline bool VectorBlock::_internal_has__hatches() const {
  return vector_data_case() == kHatches;
}
inline bool VectorBlock::has__hatches() const {
  return _internal_has__hatches();
}
inline void VectorBlock::set_has__hatches() {
  _oneof_case_[0] = kHatches;
}
inline void VectorBlock::clear__hatches() {
  if (_internal_has__hatches()) {
    if (GetArena() == nullptr) {
      delete vector_data_._hatches_;
    }
    clear_has_vector_data();
  }
}
inline ::open_vector_format::VectorBlock_Hatches* VectorBlock::release__hatches() {
  // @@protoc_insertion_point(field_release:open_vector_format.VectorBlock._hatches)
  if (_internal_has__hatches()) {
    clear_has_vector_data();
      ::open_vector_format::VectorBlock_Hatches* temp = vector_data_._hatches_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    vector_data_._hatches_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::open_vector_format::VectorBlock_Hatches& VectorBlock::_internal__hatches() const {
  return _internal_has__hatches()
      ? *vector_data_._hatches_
      : reinterpret_cast< ::open_vector_format::VectorBlock_Hatches&>(::open_vector_format::_VectorBlock_Hatches_default_instance_);
}
inline const ::open_vector_format::VectorBlock_Hatches& VectorBlock::_hatches() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock._hatches)
  return _internal__hatches();
}
inline ::open_vector_format::VectorBlock_Hatches* VectorBlock::unsafe_arena_release__hatches() {
  // @@protoc_insertion_point(field_unsafe_arena_release:open_vector_format.VectorBlock._hatches)
  if (_internal_has__hatches()) {
    clear_has_vector_data();
    ::open_vector_format::VectorBlock_Hatches* temp = vector_data_._hatches_;
    vector_data_._hatches_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorBlock::unsafe_arena_set_allocated__hatches(::open_vector_format::VectorBlock_Hatches* _hatches) {
  clear_vector_data();
  if (_hatches) {
    set_has__hatches();
    vector_data_._hatches_ = _hatches;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.VectorBlock._hatches)
}
inline ::open_vector_format::VectorBlock_Hatches* VectorBlock::_internal_mutable__hatches() {
  if (!_internal_has__hatches()) {
    clear_vector_data();
    set_has__hatches();
    vector_data_._hatches_ = CreateMaybeMessage< ::open_vector_format::VectorBlock_Hatches >(GetArena());
  }
  return vector_data_._hatches_;
}
inline ::open_vector_format::VectorBlock_Hatches* VectorBlock::mutable__hatches() {
  // @@protoc_insertion_point(field_mutable:open_vector_format.VectorBlock._hatches)
  return _internal_mutable__hatches();
}

// .open_vector_format.VectorBlock.PointSequence point_sequence = 3;
inline bool VectorBlock::_internal_has_point_sequence() const {
  return vector_data_case() == kPointSequence;
}
inline bool VectorBlock::has_point_sequence() const {
  return _internal_has_point_sequence();
}
inline void VectorBlock::set_has_point_sequence() {
  _oneof_case_[0] = kPointSequence;
}
inline void VectorBlock::clear_point_sequence() {
  if (_internal_has_point_sequence()) {
    if (GetArena() == nullptr) {
      delete vector_data_.point_sequence_;
    }
    clear_has_vector_data();
  }
}
inline ::open_vector_format::VectorBlock_PointSequence* VectorBlock::release_point_sequence() {
  // @@protoc_insertion_point(field_release:open_vector_format.VectorBlock.point_sequence)
  if (_internal_has_point_sequence()) {
    clear_has_vector_data();
      ::open_vector_format::VectorBlock_PointSequence* temp = vector_data_.point_sequence_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    vector_data_.point_sequence_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::open_vector_format::VectorBlock_PointSequence& VectorBlock::_internal_point_sequence() const {
  return _internal_has_point_sequence()
      ? *vector_data_.point_sequence_
      : reinterpret_cast< ::open_vector_format::VectorBlock_PointSequence&>(::open_vector_format::_VectorBlock_PointSequence_default_instance_);
}
inline const ::open_vector_format::VectorBlock_PointSequence& VectorBlock::point_sequence() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.point_sequence)
  return _internal_point_sequence();
}
inline ::open_vector_format::VectorBlock_PointSequence* VectorBlock::unsafe_arena_release_point_sequence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:open_vector_format.VectorBlock.point_sequence)
  if (_internal_has_point_sequence()) {
    clear_has_vector_data();
    ::open_vector_format::VectorBlock_PointSequence* temp = vector_data_.point_sequence_;
    vector_data_.point_sequence_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorBlock::unsafe_arena_set_allocated_point_sequence(::open_vector_format::VectorBlock_PointSequence* point_sequence) {
  clear_vector_data();
  if (point_sequence) {
    set_has_point_sequence();
    vector_data_.point_sequence_ = point_sequence;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.VectorBlock.point_sequence)
}
inline ::open_vector_format::VectorBlock_PointSequence* VectorBlock::_internal_mutable_point_sequence() {
  if (!_internal_has_point_sequence()) {
    clear_vector_data();
    set_has_point_sequence();
    vector_data_.point_sequence_ = CreateMaybeMessage< ::open_vector_format::VectorBlock_PointSequence >(GetArena());
  }
  return vector_data_.point_sequence_;
}
inline ::open_vector_format::VectorBlock_PointSequence* VectorBlock::mutable_point_sequence() {
  // @@protoc_insertion_point(field_mutable:open_vector_format.VectorBlock.point_sequence)
  return _internal_mutable_point_sequence();
}

// .open_vector_format.VectorBlock.Arcs _arcs = 4;
inline bool VectorBlock::_internal_has__arcs() const {
  return vector_data_case() == kArcs;
}
inline bool VectorBlock::has__arcs() const {
  return _internal_has__arcs();
}
inline void VectorBlock::set_has__arcs() {
  _oneof_case_[0] = kArcs;
}
inline void VectorBlock::clear__arcs() {
  if (_internal_has__arcs()) {
    if (GetArena() == nullptr) {
      delete vector_data_._arcs_;
    }
    clear_has_vector_data();
  }
}
inline ::open_vector_format::VectorBlock_Arcs* VectorBlock::release__arcs() {
  // @@protoc_insertion_point(field_release:open_vector_format.VectorBlock._arcs)
  if (_internal_has__arcs()) {
    clear_has_vector_data();
      ::open_vector_format::VectorBlock_Arcs* temp = vector_data_._arcs_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    vector_data_._arcs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::open_vector_format::VectorBlock_Arcs& VectorBlock::_internal__arcs() const {
  return _internal_has__arcs()
      ? *vector_data_._arcs_
      : reinterpret_cast< ::open_vector_format::VectorBlock_Arcs&>(::open_vector_format::_VectorBlock_Arcs_default_instance_);
}
inline const ::open_vector_format::VectorBlock_Arcs& VectorBlock::_arcs() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock._arcs)
  return _internal__arcs();
}
inline ::open_vector_format::VectorBlock_Arcs* VectorBlock::unsafe_arena_release__arcs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:open_vector_format.VectorBlock._arcs)
  if (_internal_has__arcs()) {
    clear_has_vector_data();
    ::open_vector_format::VectorBlock_Arcs* temp = vector_data_._arcs_;
    vector_data_._arcs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorBlock::unsafe_arena_set_allocated__arcs(::open_vector_format::VectorBlock_Arcs* _arcs) {
  clear_vector_data();
  if (_arcs) {
    set_has__arcs();
    vector_data_._arcs_ = _arcs;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.VectorBlock._arcs)
}
inline ::open_vector_format::VectorBlock_Arcs* VectorBlock::_internal_mutable__arcs() {
  if (!_internal_has__arcs()) {
    clear_vector_data();
    set_has__arcs();
    vector_data_._arcs_ = CreateMaybeMessage< ::open_vector_format::VectorBlock_Arcs >(GetArena());
  }
  return vector_data_._arcs_;
}
inline ::open_vector_format::VectorBlock_Arcs* VectorBlock::mutable__arcs() {
  // @@protoc_insertion_point(field_mutable:open_vector_format.VectorBlock._arcs)
  return _internal_mutable__arcs();
}

// .open_vector_format.VectorBlock.Ellipses ellipses = 5;
inline bool VectorBlock::_internal_has_ellipses() const {
  return vector_data_case() == kEllipses;
}
inline bool VectorBlock::has_ellipses() const {
  return _internal_has_ellipses();
}
inline void VectorBlock::set_has_ellipses() {
  _oneof_case_[0] = kEllipses;
}
inline void VectorBlock::clear_ellipses() {
  if (_internal_has_ellipses()) {
    if (GetArena() == nullptr) {
      delete vector_data_.ellipses_;
    }
    clear_has_vector_data();
  }
}
inline ::open_vector_format::VectorBlock_Ellipses* VectorBlock::release_ellipses() {
  // @@protoc_insertion_point(field_release:open_vector_format.VectorBlock.ellipses)
  if (_internal_has_ellipses()) {
    clear_has_vector_data();
      ::open_vector_format::VectorBlock_Ellipses* temp = vector_data_.ellipses_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    vector_data_.ellipses_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::open_vector_format::VectorBlock_Ellipses& VectorBlock::_internal_ellipses() const {
  return _internal_has_ellipses()
      ? *vector_data_.ellipses_
      : reinterpret_cast< ::open_vector_format::VectorBlock_Ellipses&>(::open_vector_format::_VectorBlock_Ellipses_default_instance_);
}
inline const ::open_vector_format::VectorBlock_Ellipses& VectorBlock::ellipses() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.ellipses)
  return _internal_ellipses();
}
inline ::open_vector_format::VectorBlock_Ellipses* VectorBlock::unsafe_arena_release_ellipses() {
  // @@protoc_insertion_point(field_unsafe_arena_release:open_vector_format.VectorBlock.ellipses)
  if (_internal_has_ellipses()) {
    clear_has_vector_data();
    ::open_vector_format::VectorBlock_Ellipses* temp = vector_data_.ellipses_;
    vector_data_.ellipses_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorBlock::unsafe_arena_set_allocated_ellipses(::open_vector_format::VectorBlock_Ellipses* ellipses) {
  clear_vector_data();
  if (ellipses) {
    set_has_ellipses();
    vector_data_.ellipses_ = ellipses;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.VectorBlock.ellipses)
}
inline ::open_vector_format::VectorBlock_Ellipses* VectorBlock::_internal_mutable_ellipses() {
  if (!_internal_has_ellipses()) {
    clear_vector_data();
    set_has_ellipses();
    vector_data_.ellipses_ = CreateMaybeMessage< ::open_vector_format::VectorBlock_Ellipses >(GetArena());
  }
  return vector_data_.ellipses_;
}
inline ::open_vector_format::VectorBlock_Ellipses* VectorBlock::mutable_ellipses() {
  // @@protoc_insertion_point(field_mutable:open_vector_format.VectorBlock.ellipses)
  return _internal_mutable_ellipses();
}

// .open_vector_format.VectorBlock.LineSequence3D line_sequence_3d = 6;
inline bool VectorBlock::_internal_has_line_sequence_3d() const {
  return vector_data_case() == kLineSequence3D;
}
inline bool VectorBlock::has_line_sequence_3d() const {
  return _internal_has_line_sequence_3d();
}
inline void VectorBlock::set_has_line_sequence_3d() {
  _oneof_case_[0] = kLineSequence3D;
}
inline void VectorBlock::clear_line_sequence_3d() {
  if (_internal_has_line_sequence_3d()) {
    if (GetArena() == nullptr) {
      delete vector_data_.line_sequence_3d_;
    }
    clear_has_vector_data();
  }
}
inline ::open_vector_format::VectorBlock_LineSequence3D* VectorBlock::release_line_sequence_3d() {
  // @@protoc_insertion_point(field_release:open_vector_format.VectorBlock.line_sequence_3d)
  if (_internal_has_line_sequence_3d()) {
    clear_has_vector_data();
      ::open_vector_format::VectorBlock_LineSequence3D* temp = vector_data_.line_sequence_3d_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    vector_data_.line_sequence_3d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::open_vector_format::VectorBlock_LineSequence3D& VectorBlock::_internal_line_sequence_3d() const {
  return _internal_has_line_sequence_3d()
      ? *vector_data_.line_sequence_3d_
      : reinterpret_cast< ::open_vector_format::VectorBlock_LineSequence3D&>(::open_vector_format::_VectorBlock_LineSequence3D_default_instance_);
}
inline const ::open_vector_format::VectorBlock_LineSequence3D& VectorBlock::line_sequence_3d() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.line_sequence_3d)
  return _internal_line_sequence_3d();
}
inline ::open_vector_format::VectorBlock_LineSequence3D* VectorBlock::unsafe_arena_release_line_sequence_3d() {
  // @@protoc_insertion_point(field_unsafe_arena_release:open_vector_format.VectorBlock.line_sequence_3d)
  if (_internal_has_line_sequence_3d()) {
    clear_has_vector_data();
    ::open_vector_format::VectorBlock_LineSequence3D* temp = vector_data_.line_sequence_3d_;
    vector_data_.line_sequence_3d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorBlock::unsafe_arena_set_allocated_line_sequence_3d(::open_vector_format::VectorBlock_LineSequence3D* line_sequence_3d) {
  clear_vector_data();
  if (line_sequence_3d) {
    set_has_line_sequence_3d();
    vector_data_.line_sequence_3d_ = line_sequence_3d;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.VectorBlock.line_sequence_3d)
}
inline ::open_vector_format::VectorBlock_LineSequence3D* VectorBlock::_internal_mutable_line_sequence_3d() {
  if (!_internal_has_line_sequence_3d()) {
    clear_vector_data();
    set_has_line_sequence_3d();
    vector_data_.line_sequence_3d_ = CreateMaybeMessage< ::open_vector_format::VectorBlock_LineSequence3D >(GetArena());
  }
  return vector_data_.line_sequence_3d_;
}
inline ::open_vector_format::VectorBlock_LineSequence3D* VectorBlock::mutable_line_sequence_3d() {
  // @@protoc_insertion_point(field_mutable:open_vector_format.VectorBlock.line_sequence_3d)
  return _internal_mutable_line_sequence_3d();
}

// .open_vector_format.VectorBlock.Hatches3D hatches_3d = 7;
inline bool VectorBlock::_internal_has_hatches_3d() const {
  return vector_data_case() == kHatches3D;
}
inline bool VectorBlock::has_hatches_3d() const {
  return _internal_has_hatches_3d();
}
inline void VectorBlock::set_has_hatches_3d() {
  _oneof_case_[0] = kHatches3D;
}
inline void VectorBlock::clear_hatches_3d() {
  if (_internal_has_hatches_3d()) {
    if (GetArena() == nullptr) {
      delete vector_data_.hatches_3d_;
    }
    clear_has_vector_data();
  }
}
inline ::open_vector_format::VectorBlock_Hatches3D* VectorBlock::release_hatches_3d() {
  // @@protoc_insertion_point(field_release:open_vector_format.VectorBlock.hatches_3d)
  if (_internal_has_hatches_3d()) {
    clear_has_vector_data();
      ::open_vector_format::VectorBlock_Hatches3D* temp = vector_data_.hatches_3d_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    vector_data_.hatches_3d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::open_vector_format::VectorBlock_Hatches3D& VectorBlock::_internal_hatches_3d() const {
  return _internal_has_hatches_3d()
      ? *vector_data_.hatches_3d_
      : reinterpret_cast< ::open_vector_format::VectorBlock_Hatches3D&>(::open_vector_format::_VectorBlock_Hatches3D_default_instance_);
}
inline const ::open_vector_format::VectorBlock_Hatches3D& VectorBlock::hatches_3d() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.hatches_3d)
  return _internal_hatches_3d();
}
inline ::open_vector_format::VectorBlock_Hatches3D* VectorBlock::unsafe_arena_release_hatches_3d() {
  // @@protoc_insertion_point(field_unsafe_arena_release:open_vector_format.VectorBlock.hatches_3d)
  if (_internal_has_hatches_3d()) {
    clear_has_vector_data();
    ::open_vector_format::VectorBlock_Hatches3D* temp = vector_data_.hatches_3d_;
    vector_data_.hatches_3d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorBlock::unsafe_arena_set_allocated_hatches_3d(::open_vector_format::VectorBlock_Hatches3D* hatches_3d) {
  clear_vector_data();
  if (hatches_3d) {
    set_has_hatches_3d();
    vector_data_.hatches_3d_ = hatches_3d;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.VectorBlock.hatches_3d)
}
inline ::open_vector_format::VectorBlock_Hatches3D* VectorBlock::_internal_mutable_hatches_3d() {
  if (!_internal_has_hatches_3d()) {
    clear_vector_data();
    set_has_hatches_3d();
    vector_data_.hatches_3d_ = CreateMaybeMessage< ::open_vector_format::VectorBlock_Hatches3D >(GetArena());
  }
  return vector_data_.hatches_3d_;
}
inline ::open_vector_format::VectorBlock_Hatches3D* VectorBlock::mutable_hatches_3d() {
  // @@protoc_insertion_point(field_mutable:open_vector_format.VectorBlock.hatches_3d)
  return _internal_mutable_hatches_3d();
}

// .open_vector_format.VectorBlock.PointSequence3D point_sequence_3d = 8;
inline bool VectorBlock::_internal_has_point_sequence_3d() const {
  return vector_data_case() == kPointSequence3D;
}
inline bool VectorBlock::has_point_sequence_3d() const {
  return _internal_has_point_sequence_3d();
}
inline void VectorBlock::set_has_point_sequence_3d() {
  _oneof_case_[0] = kPointSequence3D;
}
inline void VectorBlock::clear_point_sequence_3d() {
  if (_internal_has_point_sequence_3d()) {
    if (GetArena() == nullptr) {
      delete vector_data_.point_sequence_3d_;
    }
    clear_has_vector_data();
  }
}
inline ::open_vector_format::VectorBlock_PointSequence3D* VectorBlock::release_point_sequence_3d() {
  // @@protoc_insertion_point(field_release:open_vector_format.VectorBlock.point_sequence_3d)
  if (_internal_has_point_sequence_3d()) {
    clear_has_vector_data();
      ::open_vector_format::VectorBlock_PointSequence3D* temp = vector_data_.point_sequence_3d_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    vector_data_.point_sequence_3d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::open_vector_format::VectorBlock_PointSequence3D& VectorBlock::_internal_point_sequence_3d() const {
  return _internal_has_point_sequence_3d()
      ? *vector_data_.point_sequence_3d_
      : reinterpret_cast< ::open_vector_format::VectorBlock_PointSequence3D&>(::open_vector_format::_VectorBlock_PointSequence3D_default_instance_);
}
inline const ::open_vector_format::VectorBlock_PointSequence3D& VectorBlock::point_sequence_3d() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.point_sequence_3d)
  return _internal_point_sequence_3d();
}
inline ::open_vector_format::VectorBlock_PointSequence3D* VectorBlock::unsafe_arena_release_point_sequence_3d() {
  // @@protoc_insertion_point(field_unsafe_arena_release:open_vector_format.VectorBlock.point_sequence_3d)
  if (_internal_has_point_sequence_3d()) {
    clear_has_vector_data();
    ::open_vector_format::VectorBlock_PointSequence3D* temp = vector_data_.point_sequence_3d_;
    vector_data_.point_sequence_3d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorBlock::unsafe_arena_set_allocated_point_sequence_3d(::open_vector_format::VectorBlock_PointSequence3D* point_sequence_3d) {
  clear_vector_data();
  if (point_sequence_3d) {
    set_has_point_sequence_3d();
    vector_data_.point_sequence_3d_ = point_sequence_3d;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.VectorBlock.point_sequence_3d)
}
inline ::open_vector_format::VectorBlock_PointSequence3D* VectorBlock::_internal_mutable_point_sequence_3d() {
  if (!_internal_has_point_sequence_3d()) {
    clear_vector_data();
    set_has_point_sequence_3d();
    vector_data_.point_sequence_3d_ = CreateMaybeMessage< ::open_vector_format::VectorBlock_PointSequence3D >(GetArena());
  }
  return vector_data_.point_sequence_3d_;
}
inline ::open_vector_format::VectorBlock_PointSequence3D* VectorBlock::mutable_point_sequence_3d() {
  // @@protoc_insertion_point(field_mutable:open_vector_format.VectorBlock.point_sequence_3d)
  return _internal_mutable_point_sequence_3d();
}

// .open_vector_format.VectorBlock.Arcs3D arcs_3d = 9;
inline bool VectorBlock::_internal_has_arcs_3d() const {
  return vector_data_case() == kArcs3D;
}
inline bool VectorBlock::has_arcs_3d() const {
  return _internal_has_arcs_3d();
}
inline void VectorBlock::set_has_arcs_3d() {
  _oneof_case_[0] = kArcs3D;
}
inline void VectorBlock::clear_arcs_3d() {
  if (_internal_has_arcs_3d()) {
    if (GetArena() == nullptr) {
      delete vector_data_.arcs_3d_;
    }
    clear_has_vector_data();
  }
}
inline ::open_vector_format::VectorBlock_Arcs3D* VectorBlock::release_arcs_3d() {
  // @@protoc_insertion_point(field_release:open_vector_format.VectorBlock.arcs_3d)
  if (_internal_has_arcs_3d()) {
    clear_has_vector_data();
      ::open_vector_format::VectorBlock_Arcs3D* temp = vector_data_.arcs_3d_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    vector_data_.arcs_3d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::open_vector_format::VectorBlock_Arcs3D& VectorBlock::_internal_arcs_3d() const {
  return _internal_has_arcs_3d()
      ? *vector_data_.arcs_3d_
      : reinterpret_cast< ::open_vector_format::VectorBlock_Arcs3D&>(::open_vector_format::_VectorBlock_Arcs3D_default_instance_);
}
inline const ::open_vector_format::VectorBlock_Arcs3D& VectorBlock::arcs_3d() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.arcs_3d)
  return _internal_arcs_3d();
}
inline ::open_vector_format::VectorBlock_Arcs3D* VectorBlock::unsafe_arena_release_arcs_3d() {
  // @@protoc_insertion_point(field_unsafe_arena_release:open_vector_format.VectorBlock.arcs_3d)
  if (_internal_has_arcs_3d()) {
    clear_has_vector_data();
    ::open_vector_format::VectorBlock_Arcs3D* temp = vector_data_.arcs_3d_;
    vector_data_.arcs_3d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorBlock::unsafe_arena_set_allocated_arcs_3d(::open_vector_format::VectorBlock_Arcs3D* arcs_3d) {
  clear_vector_data();
  if (arcs_3d) {
    set_has_arcs_3d();
    vector_data_.arcs_3d_ = arcs_3d;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.VectorBlock.arcs_3d)
}
inline ::open_vector_format::VectorBlock_Arcs3D* VectorBlock::_internal_mutable_arcs_3d() {
  if (!_internal_has_arcs_3d()) {
    clear_vector_data();
    set_has_arcs_3d();
    vector_data_.arcs_3d_ = CreateMaybeMessage< ::open_vector_format::VectorBlock_Arcs3D >(GetArena());
  }
  return vector_data_.arcs_3d_;
}
inline ::open_vector_format::VectorBlock_Arcs3D* VectorBlock::mutable_arcs_3d() {
  // @@protoc_insertion_point(field_mutable:open_vector_format.VectorBlock.arcs_3d)
  return _internal_mutable_arcs_3d();
}

// .open_vector_format.VectorBlock.ExposurePause exposure_pause = 10;
inline bool VectorBlock::_internal_has_exposure_pause() const {
  return vector_data_case() == kExposurePause;
}
inline bool VectorBlock::has_exposure_pause() const {
  return _internal_has_exposure_pause();
}
inline void VectorBlock::set_has_exposure_pause() {
  _oneof_case_[0] = kExposurePause;
}
inline void VectorBlock::clear_exposure_pause() {
  if (_internal_has_exposure_pause()) {
    if (GetArena() == nullptr) {
      delete vector_data_.exposure_pause_;
    }
    clear_has_vector_data();
  }
}
inline ::open_vector_format::VectorBlock_ExposurePause* VectorBlock::release_exposure_pause() {
  // @@protoc_insertion_point(field_release:open_vector_format.VectorBlock.exposure_pause)
  if (_internal_has_exposure_pause()) {
    clear_has_vector_data();
      ::open_vector_format::VectorBlock_ExposurePause* temp = vector_data_.exposure_pause_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    vector_data_.exposure_pause_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::open_vector_format::VectorBlock_ExposurePause& VectorBlock::_internal_exposure_pause() const {
  return _internal_has_exposure_pause()
      ? *vector_data_.exposure_pause_
      : reinterpret_cast< ::open_vector_format::VectorBlock_ExposurePause&>(::open_vector_format::_VectorBlock_ExposurePause_default_instance_);
}
inline const ::open_vector_format::VectorBlock_ExposurePause& VectorBlock::exposure_pause() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.exposure_pause)
  return _internal_exposure_pause();
}
inline ::open_vector_format::VectorBlock_ExposurePause* VectorBlock::unsafe_arena_release_exposure_pause() {
  // @@protoc_insertion_point(field_unsafe_arena_release:open_vector_format.VectorBlock.exposure_pause)
  if (_internal_has_exposure_pause()) {
    clear_has_vector_data();
    ::open_vector_format::VectorBlock_ExposurePause* temp = vector_data_.exposure_pause_;
    vector_data_.exposure_pause_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorBlock::unsafe_arena_set_allocated_exposure_pause(::open_vector_format::VectorBlock_ExposurePause* exposure_pause) {
  clear_vector_data();
  if (exposure_pause) {
    set_has_exposure_pause();
    vector_data_.exposure_pause_ = exposure_pause;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.VectorBlock.exposure_pause)
}
inline ::open_vector_format::VectorBlock_ExposurePause* VectorBlock::_internal_mutable_exposure_pause() {
  if (!_internal_has_exposure_pause()) {
    clear_vector_data();
    set_has_exposure_pause();
    vector_data_.exposure_pause_ = CreateMaybeMessage< ::open_vector_format::VectorBlock_ExposurePause >(GetArena());
  }
  return vector_data_.exposure_pause_;
}
inline ::open_vector_format::VectorBlock_ExposurePause* VectorBlock::mutable_exposure_pause() {
  // @@protoc_insertion_point(field_mutable:open_vector_format.VectorBlock.exposure_pause)
  return _internal_mutable_exposure_pause();
}

// .open_vector_format.VectorBlock.LineSequenceParaAdapt line_sequence_para_adapt = 11;
inline bool VectorBlock::_internal_has_line_sequence_para_adapt() const {
  return vector_data_case() == kLineSequenceParaAdapt;
}
inline bool VectorBlock::has_line_sequence_para_adapt() const {
  return _internal_has_line_sequence_para_adapt();
}
inline void VectorBlock::set_has_line_sequence_para_adapt() {
  _oneof_case_[0] = kLineSequenceParaAdapt;
}
inline void VectorBlock::clear_line_sequence_para_adapt() {
  if (_internal_has_line_sequence_para_adapt()) {
    if (GetArena() == nullptr) {
      delete vector_data_.line_sequence_para_adapt_;
    }
    clear_has_vector_data();
  }
}
inline ::open_vector_format::VectorBlock_LineSequenceParaAdapt* VectorBlock::release_line_sequence_para_adapt() {
  // @@protoc_insertion_point(field_release:open_vector_format.VectorBlock.line_sequence_para_adapt)
  if (_internal_has_line_sequence_para_adapt()) {
    clear_has_vector_data();
      ::open_vector_format::VectorBlock_LineSequenceParaAdapt* temp = vector_data_.line_sequence_para_adapt_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    vector_data_.line_sequence_para_adapt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::open_vector_format::VectorBlock_LineSequenceParaAdapt& VectorBlock::_internal_line_sequence_para_adapt() const {
  return _internal_has_line_sequence_para_adapt()
      ? *vector_data_.line_sequence_para_adapt_
      : reinterpret_cast< ::open_vector_format::VectorBlock_LineSequenceParaAdapt&>(::open_vector_format::_VectorBlock_LineSequenceParaAdapt_default_instance_);
}
inline const ::open_vector_format::VectorBlock_LineSequenceParaAdapt& VectorBlock::line_sequence_para_adapt() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.line_sequence_para_adapt)
  return _internal_line_sequence_para_adapt();
}
inline ::open_vector_format::VectorBlock_LineSequenceParaAdapt* VectorBlock::unsafe_arena_release_line_sequence_para_adapt() {
  // @@protoc_insertion_point(field_unsafe_arena_release:open_vector_format.VectorBlock.line_sequence_para_adapt)
  if (_internal_has_line_sequence_para_adapt()) {
    clear_has_vector_data();
    ::open_vector_format::VectorBlock_LineSequenceParaAdapt* temp = vector_data_.line_sequence_para_adapt_;
    vector_data_.line_sequence_para_adapt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorBlock::unsafe_arena_set_allocated_line_sequence_para_adapt(::open_vector_format::VectorBlock_LineSequenceParaAdapt* line_sequence_para_adapt) {
  clear_vector_data();
  if (line_sequence_para_adapt) {
    set_has_line_sequence_para_adapt();
    vector_data_.line_sequence_para_adapt_ = line_sequence_para_adapt;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.VectorBlock.line_sequence_para_adapt)
}
inline ::open_vector_format::VectorBlock_LineSequenceParaAdapt* VectorBlock::_internal_mutable_line_sequence_para_adapt() {
  if (!_internal_has_line_sequence_para_adapt()) {
    clear_vector_data();
    set_has_line_sequence_para_adapt();
    vector_data_.line_sequence_para_adapt_ = CreateMaybeMessage< ::open_vector_format::VectorBlock_LineSequenceParaAdapt >(GetArena());
  }
  return vector_data_.line_sequence_para_adapt_;
}
inline ::open_vector_format::VectorBlock_LineSequenceParaAdapt* VectorBlock::mutable_line_sequence_para_adapt() {
  // @@protoc_insertion_point(field_mutable:open_vector_format.VectorBlock.line_sequence_para_adapt)
  return _internal_mutable_line_sequence_para_adapt();
}

// .open_vector_format.VectorBlock.HatchesParaAdapt _hatchParaAdapt = 12;
inline bool VectorBlock::_internal_has__hatchparaadapt() const {
  return vector_data_case() == kHatchParaAdapt;
}
inline bool VectorBlock::has__hatchparaadapt() const {
  return _internal_has__hatchparaadapt();
}
inline void VectorBlock::set_has__hatchparaadapt() {
  _oneof_case_[0] = kHatchParaAdapt;
}
inline void VectorBlock::clear__hatchparaadapt() {
  if (_internal_has__hatchparaadapt()) {
    if (GetArena() == nullptr) {
      delete vector_data_._hatchparaadapt_;
    }
    clear_has_vector_data();
  }
}
inline ::open_vector_format::VectorBlock_HatchesParaAdapt* VectorBlock::release__hatchparaadapt() {
  // @@protoc_insertion_point(field_release:open_vector_format.VectorBlock._hatchParaAdapt)
  if (_internal_has__hatchparaadapt()) {
    clear_has_vector_data();
      ::open_vector_format::VectorBlock_HatchesParaAdapt* temp = vector_data_._hatchparaadapt_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    vector_data_._hatchparaadapt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::open_vector_format::VectorBlock_HatchesParaAdapt& VectorBlock::_internal__hatchparaadapt() const {
  return _internal_has__hatchparaadapt()
      ? *vector_data_._hatchparaadapt_
      : reinterpret_cast< ::open_vector_format::VectorBlock_HatchesParaAdapt&>(::open_vector_format::_VectorBlock_HatchesParaAdapt_default_instance_);
}
inline const ::open_vector_format::VectorBlock_HatchesParaAdapt& VectorBlock::_hatchparaadapt() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock._hatchParaAdapt)
  return _internal__hatchparaadapt();
}
inline ::open_vector_format::VectorBlock_HatchesParaAdapt* VectorBlock::unsafe_arena_release__hatchparaadapt() {
  // @@protoc_insertion_point(field_unsafe_arena_release:open_vector_format.VectorBlock._hatchParaAdapt)
  if (_internal_has__hatchparaadapt()) {
    clear_has_vector_data();
    ::open_vector_format::VectorBlock_HatchesParaAdapt* temp = vector_data_._hatchparaadapt_;
    vector_data_._hatchparaadapt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorBlock::unsafe_arena_set_allocated__hatchparaadapt(::open_vector_format::VectorBlock_HatchesParaAdapt* _hatchparaadapt) {
  clear_vector_data();
  if (_hatchparaadapt) {
    set_has__hatchparaadapt();
    vector_data_._hatchparaadapt_ = _hatchparaadapt;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.VectorBlock._hatchParaAdapt)
}
inline ::open_vector_format::VectorBlock_HatchesParaAdapt* VectorBlock::_internal_mutable__hatchparaadapt() {
  if (!_internal_has__hatchparaadapt()) {
    clear_vector_data();
    set_has__hatchparaadapt();
    vector_data_._hatchparaadapt_ = CreateMaybeMessage< ::open_vector_format::VectorBlock_HatchesParaAdapt >(GetArena());
  }
  return vector_data_._hatchparaadapt_;
}
inline ::open_vector_format::VectorBlock_HatchesParaAdapt* VectorBlock::mutable__hatchparaadapt() {
  // @@protoc_insertion_point(field_mutable:open_vector_format.VectorBlock._hatchParaAdapt)
  return _internal_mutable__hatchparaadapt();
}

// int32 marking_params_key = 50;
inline void VectorBlock::clear_marking_params_key() {
  marking_params_key_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorBlock::_internal_marking_params_key() const {
  return marking_params_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorBlock::marking_params_key() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.marking_params_key)
  return _internal_marking_params_key();
}
inline void VectorBlock::_internal_set_marking_params_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  marking_params_key_ = value;
}
inline void VectorBlock::set_marking_params_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_marking_params_key(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.marking_params_key)
}

// int32 laser_index = 53;
inline void VectorBlock::clear_laser_index() {
  laser_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorBlock::_internal_laser_index() const {
  return laser_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorBlock::laser_index() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.laser_index)
  return _internal_laser_index();
}
inline void VectorBlock::_internal_set_laser_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  laser_index_ = value;
}
inline void VectorBlock::set_laser_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_laser_index(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.laser_index)
}

// uint64 repeats = 54;
inline void VectorBlock::clear_repeats() {
  repeats_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VectorBlock::_internal_repeats() const {
  return repeats_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VectorBlock::repeats() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.repeats)
  return _internal_repeats();
}
inline void VectorBlock::_internal_set_repeats(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  repeats_ = value;
}
inline void VectorBlock::set_repeats(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_repeats(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.repeats)
}

// .open_vector_format.VectorBlock.VectorBlockMetaData meta_data = 100;
inline bool VectorBlock::_internal_has_meta_data() const {
  return this != internal_default_instance() && meta_data_ != nullptr;
}
inline bool VectorBlock::has_meta_data() const {
  return _internal_has_meta_data();
}
inline void VectorBlock::clear_meta_data() {
  if (GetArena() == nullptr && meta_data_ != nullptr) {
    delete meta_data_;
  }
  meta_data_ = nullptr;
}
inline const ::open_vector_format::VectorBlock_VectorBlockMetaData& VectorBlock::_internal_meta_data() const {
  const ::open_vector_format::VectorBlock_VectorBlockMetaData* p = meta_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::open_vector_format::VectorBlock_VectorBlockMetaData&>(
      ::open_vector_format::_VectorBlock_VectorBlockMetaData_default_instance_);
}
inline const ::open_vector_format::VectorBlock_VectorBlockMetaData& VectorBlock::meta_data() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.meta_data)
  return _internal_meta_data();
}
inline void VectorBlock::unsafe_arena_set_allocated_meta_data(
    ::open_vector_format::VectorBlock_VectorBlockMetaData* meta_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_data_);
  }
  meta_data_ = meta_data;
  if (meta_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.VectorBlock.meta_data)
}
inline ::open_vector_format::VectorBlock_VectorBlockMetaData* VectorBlock::release_meta_data() {
  
  ::open_vector_format::VectorBlock_VectorBlockMetaData* temp = meta_data_;
  meta_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::open_vector_format::VectorBlock_VectorBlockMetaData* VectorBlock::unsafe_arena_release_meta_data() {
  // @@protoc_insertion_point(field_release:open_vector_format.VectorBlock.meta_data)
  
  ::open_vector_format::VectorBlock_VectorBlockMetaData* temp = meta_data_;
  meta_data_ = nullptr;
  return temp;
}
inline ::open_vector_format::VectorBlock_VectorBlockMetaData* VectorBlock::_internal_mutable_meta_data() {
  
  if (meta_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::open_vector_format::VectorBlock_VectorBlockMetaData>(GetArena());
    meta_data_ = p;
  }
  return meta_data_;
}
inline ::open_vector_format::VectorBlock_VectorBlockMetaData* VectorBlock::mutable_meta_data() {
  // @@protoc_insertion_point(field_mutable:open_vector_format.VectorBlock.meta_data)
  return _internal_mutable_meta_data();
}
inline void VectorBlock::set_allocated_meta_data(::open_vector_format::VectorBlock_VectorBlockMetaData* meta_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete meta_data_;
  }
  if (meta_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(meta_data);
    if (message_arena != submessage_arena) {
      meta_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta_data, submessage_arena);
    }
    
  } else {
    
  }
  meta_data_ = meta_data;
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.VectorBlock.meta_data)
}

// .open_vector_format.VectorBlock.LPBFMetadata lpbf_metadata = 101;
inline bool VectorBlock::_internal_has_lpbf_metadata() const {
  return process_meta_data_case() == kLpbfMetadata;
}
inline bool VectorBlock::has_lpbf_metadata() const {
  return _internal_has_lpbf_metadata();
}
inline void VectorBlock::set_has_lpbf_metadata() {
  _oneof_case_[1] = kLpbfMetadata;
}
inline void VectorBlock::clear_lpbf_metadata() {
  if (_internal_has_lpbf_metadata()) {
    if (GetArena() == nullptr) {
      delete process_meta_data_.lpbf_metadata_;
    }
    clear_has_process_meta_data();
  }
}
inline ::open_vector_format::VectorBlock_LPBFMetadata* VectorBlock::release_lpbf_metadata() {
  // @@protoc_insertion_point(field_release:open_vector_format.VectorBlock.lpbf_metadata)
  if (_internal_has_lpbf_metadata()) {
    clear_has_process_meta_data();
      ::open_vector_format::VectorBlock_LPBFMetadata* temp = process_meta_data_.lpbf_metadata_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    process_meta_data_.lpbf_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::open_vector_format::VectorBlock_LPBFMetadata& VectorBlock::_internal_lpbf_metadata() const {
  return _internal_has_lpbf_metadata()
      ? *process_meta_data_.lpbf_metadata_
      : reinterpret_cast< ::open_vector_format::VectorBlock_LPBFMetadata&>(::open_vector_format::_VectorBlock_LPBFMetadata_default_instance_);
}
inline const ::open_vector_format::VectorBlock_LPBFMetadata& VectorBlock::lpbf_metadata() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.lpbf_metadata)
  return _internal_lpbf_metadata();
}
inline ::open_vector_format::VectorBlock_LPBFMetadata* VectorBlock::unsafe_arena_release_lpbf_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:open_vector_format.VectorBlock.lpbf_metadata)
  if (_internal_has_lpbf_metadata()) {
    clear_has_process_meta_data();
    ::open_vector_format::VectorBlock_LPBFMetadata* temp = process_meta_data_.lpbf_metadata_;
    process_meta_data_.lpbf_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorBlock::unsafe_arena_set_allocated_lpbf_metadata(::open_vector_format::VectorBlock_LPBFMetadata* lpbf_metadata) {
  clear_process_meta_data();
  if (lpbf_metadata) {
    set_has_lpbf_metadata();
    process_meta_data_.lpbf_metadata_ = lpbf_metadata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.VectorBlock.lpbf_metadata)
}
inline ::open_vector_format::VectorBlock_LPBFMetadata* VectorBlock::_internal_mutable_lpbf_metadata() {
  if (!_internal_has_lpbf_metadata()) {
    clear_process_meta_data();
    set_has_lpbf_metadata();
    process_meta_data_.lpbf_metadata_ = CreateMaybeMessage< ::open_vector_format::VectorBlock_LPBFMetadata >(GetArena());
  }
  return process_meta_data_.lpbf_metadata_;
}
inline ::open_vector_format::VectorBlock_LPBFMetadata* VectorBlock::mutable_lpbf_metadata() {
  // @@protoc_insertion_point(field_mutable:open_vector_format.VectorBlock.lpbf_metadata)
  return _internal_mutable_lpbf_metadata();
}

// .open_vector_format.VectorBlock.MicroStructuringMetadata micro_structuring_metadata = 102;
inline bool VectorBlock::_internal_has_micro_structuring_metadata() const {
  return process_meta_data_case() == kMicroStructuringMetadata;
}
inline bool VectorBlock::has_micro_structuring_metadata() const {
  return _internal_has_micro_structuring_metadata();
}
inline void VectorBlock::set_has_micro_structuring_metadata() {
  _oneof_case_[1] = kMicroStructuringMetadata;
}
inline void VectorBlock::clear_micro_structuring_metadata() {
  if (_internal_has_micro_structuring_metadata()) {
    if (GetArena() == nullptr) {
      delete process_meta_data_.micro_structuring_metadata_;
    }
    clear_has_process_meta_data();
  }
}
inline ::open_vector_format::VectorBlock_MicroStructuringMetadata* VectorBlock::release_micro_structuring_metadata() {
  // @@protoc_insertion_point(field_release:open_vector_format.VectorBlock.micro_structuring_metadata)
  if (_internal_has_micro_structuring_metadata()) {
    clear_has_process_meta_data();
      ::open_vector_format::VectorBlock_MicroStructuringMetadata* temp = process_meta_data_.micro_structuring_metadata_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    process_meta_data_.micro_structuring_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::open_vector_format::VectorBlock_MicroStructuringMetadata& VectorBlock::_internal_micro_structuring_metadata() const {
  return _internal_has_micro_structuring_metadata()
      ? *process_meta_data_.micro_structuring_metadata_
      : reinterpret_cast< ::open_vector_format::VectorBlock_MicroStructuringMetadata&>(::open_vector_format::_VectorBlock_MicroStructuringMetadata_default_instance_);
}
inline const ::open_vector_format::VectorBlock_MicroStructuringMetadata& VectorBlock::micro_structuring_metadata() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.micro_structuring_metadata)
  return _internal_micro_structuring_metadata();
}
inline ::open_vector_format::VectorBlock_MicroStructuringMetadata* VectorBlock::unsafe_arena_release_micro_structuring_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:open_vector_format.VectorBlock.micro_structuring_metadata)
  if (_internal_has_micro_structuring_metadata()) {
    clear_has_process_meta_data();
    ::open_vector_format::VectorBlock_MicroStructuringMetadata* temp = process_meta_data_.micro_structuring_metadata_;
    process_meta_data_.micro_structuring_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorBlock::unsafe_arena_set_allocated_micro_structuring_metadata(::open_vector_format::VectorBlock_MicroStructuringMetadata* micro_structuring_metadata) {
  clear_process_meta_data();
  if (micro_structuring_metadata) {
    set_has_micro_structuring_metadata();
    process_meta_data_.micro_structuring_metadata_ = micro_structuring_metadata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.VectorBlock.micro_structuring_metadata)
}
inline ::open_vector_format::VectorBlock_MicroStructuringMetadata* VectorBlock::_internal_mutable_micro_structuring_metadata() {
  if (!_internal_has_micro_structuring_metadata()) {
    clear_process_meta_data();
    set_has_micro_structuring_metadata();
    process_meta_data_.micro_structuring_metadata_ = CreateMaybeMessage< ::open_vector_format::VectorBlock_MicroStructuringMetadata >(GetArena());
  }
  return process_meta_data_.micro_structuring_metadata_;
}
inline ::open_vector_format::VectorBlock_MicroStructuringMetadata* VectorBlock::mutable_micro_structuring_metadata() {
  // @@protoc_insertion_point(field_mutable:open_vector_format.VectorBlock.micro_structuring_metadata)
  return _internal_mutable_micro_structuring_metadata();
}

// .open_vector_format.VectorBlock.PolishingMetadata polishing_metadata = 103;
inline bool VectorBlock::_internal_has_polishing_metadata() const {
  return process_meta_data_case() == kPolishingMetadata;
}
inline bool VectorBlock::has_polishing_metadata() const {
  return _internal_has_polishing_metadata();
}
inline void VectorBlock::set_has_polishing_metadata() {
  _oneof_case_[1] = kPolishingMetadata;
}
inline void VectorBlock::clear_polishing_metadata() {
  if (_internal_has_polishing_metadata()) {
    if (GetArena() == nullptr) {
      delete process_meta_data_.polishing_metadata_;
    }
    clear_has_process_meta_data();
  }
}
inline ::open_vector_format::VectorBlock_PolishingMetadata* VectorBlock::release_polishing_metadata() {
  // @@protoc_insertion_point(field_release:open_vector_format.VectorBlock.polishing_metadata)
  if (_internal_has_polishing_metadata()) {
    clear_has_process_meta_data();
      ::open_vector_format::VectorBlock_PolishingMetadata* temp = process_meta_data_.polishing_metadata_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    process_meta_data_.polishing_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::open_vector_format::VectorBlock_PolishingMetadata& VectorBlock::_internal_polishing_metadata() const {
  return _internal_has_polishing_metadata()
      ? *process_meta_data_.polishing_metadata_
      : reinterpret_cast< ::open_vector_format::VectorBlock_PolishingMetadata&>(::open_vector_format::_VectorBlock_PolishingMetadata_default_instance_);
}
inline const ::open_vector_format::VectorBlock_PolishingMetadata& VectorBlock::polishing_metadata() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.polishing_metadata)
  return _internal_polishing_metadata();
}
inline ::open_vector_format::VectorBlock_PolishingMetadata* VectorBlock::unsafe_arena_release_polishing_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:open_vector_format.VectorBlock.polishing_metadata)
  if (_internal_has_polishing_metadata()) {
    clear_has_process_meta_data();
    ::open_vector_format::VectorBlock_PolishingMetadata* temp = process_meta_data_.polishing_metadata_;
    process_meta_data_.polishing_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorBlock::unsafe_arena_set_allocated_polishing_metadata(::open_vector_format::VectorBlock_PolishingMetadata* polishing_metadata) {
  clear_process_meta_data();
  if (polishing_metadata) {
    set_has_polishing_metadata();
    process_meta_data_.polishing_metadata_ = polishing_metadata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.VectorBlock.polishing_metadata)
}
inline ::open_vector_format::VectorBlock_PolishingMetadata* VectorBlock::_internal_mutable_polishing_metadata() {
  if (!_internal_has_polishing_metadata()) {
    clear_process_meta_data();
    set_has_polishing_metadata();
    process_meta_data_.polishing_metadata_ = CreateMaybeMessage< ::open_vector_format::VectorBlock_PolishingMetadata >(GetArena());
  }
  return process_meta_data_.polishing_metadata_;
}
inline ::open_vector_format::VectorBlock_PolishingMetadata* VectorBlock::mutable_polishing_metadata() {
  // @@protoc_insertion_point(field_mutable:open_vector_format.VectorBlock.polishing_metadata)
  return _internal_mutable_polishing_metadata();
}

inline bool VectorBlock::has_vector_data() const {
  return vector_data_case() != VECTOR_DATA_NOT_SET;
}
inline void VectorBlock::clear_has_vector_data() {
  _oneof_case_[0] = VECTOR_DATA_NOT_SET;
}
inline bool VectorBlock::has_process_meta_data() const {
  return process_meta_data_case() != PROCESS_META_DATA_NOT_SET;
}
inline void VectorBlock::clear_has_process_meta_data() {
  _oneof_case_[1] = PROCESS_META_DATA_NOT_SET;
}
inline VectorBlock::VectorDataCase VectorBlock::vector_data_case() const {
  return VectorBlock::VectorDataCase(_oneof_case_[0]);
}
inline VectorBlock::ProcessMetaDataCase VectorBlock::process_meta_data_case() const {
  return VectorBlock::ProcessMetaDataCase(_oneof_case_[1]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace open_vector_format

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::open_vector_format::MarkingParams_MarkingMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::open_vector_format::MarkingParams_MarkingMode>() {
  return ::open_vector_format::MarkingParams_MarkingMode_descriptor();
}
template <> struct is_proto_enum< ::open_vector_format::MarkingParams_WobbleMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::open_vector_format::MarkingParams_WobbleMode>() {
  return ::open_vector_format::MarkingParams_WobbleMode_descriptor();
}
template <> struct is_proto_enum< ::open_vector_format::Part_ProcessStrategy_HatchingPattern> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::open_vector_format::Part_ProcessStrategy_HatchingPattern>() {
  return ::open_vector_format::Part_ProcessStrategy_HatchingPattern_descriptor();
}
template <> struct is_proto_enum< ::open_vector_format::VectorBlock_LPBFMetadata_SkinType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::open_vector_format::VectorBlock_LPBFMetadata_SkinType>() {
  return ::open_vector_format::VectorBlock_LPBFMetadata_SkinType_descriptor();
}
template <> struct is_proto_enum< ::open_vector_format::VectorBlock_LPBFMetadata_SkinCoreStrategyArea> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::open_vector_format::VectorBlock_LPBFMetadata_SkinCoreStrategyArea>() {
  return ::open_vector_format::VectorBlock_LPBFMetadata_SkinCoreStrategyArea_descriptor();
}
template <> struct is_proto_enum< ::open_vector_format::VectorBlock_LineSequenceParaAdapt_AdaptedParameter> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::open_vector_format::VectorBlock_LineSequenceParaAdapt_AdaptedParameter>() {
  return ::open_vector_format::VectorBlock_LineSequenceParaAdapt_AdaptedParameter_descriptor();
}
template <> struct is_proto_enum< ::open_vector_format::VectorBlock_PartArea> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::open_vector_format::VectorBlock_PartArea>() {
  return ::open_vector_format::VectorBlock_PartArea_descriptor();
}
template <> struct is_proto_enum< ::open_vector_format::VectorBlock_StructureType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::open_vector_format::VectorBlock_StructureType>() {
  return ::open_vector_format::VectorBlock_StructureType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_open_5fvector_5fformat_2eproto
